{
  "info": {
    "_postman_id": "d5a8bf47-b0a9-40d3-b3f0-b283027d402a",
    "name": "sweeft me",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "000 - send and verify sms",
      "item": [
        {
          "name": "001 - send sms",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "25d85964-5c70-490c-ba46-e2dfb55c10a9",
                "exec": [
                  "// Get SMS type from collection variables",
                  "let sms_type = pm.collectionVariables.get(\"send_sms_type\")",
                  "let gen_user = pm.collectionVariables.get(\"generate_new_user\")",
                  "",
                  "// Check SMS type and if it is \"REGISTRATION\" generate random number",
                  "if(sms_type == \"REGISTRATION\" && gen_user == \"true\"){",
                  "\tlet registration_number = Math.round(Math.random() * (999999999 - 000000001) + 000000001)",
                  "\tpm.collectionVariables.set(\"registration_number\", registration_number)",
                  "}",
                  "",
                  "let user = pm.collectionVariables.get(\"registration_number\")",
                  "console.info(user)",
                  "console.info(gen_user)",
                  "console.info(sms_type)"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "1c185d21-7bb7-4aaf-827c-4557a698c277",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "\tpm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Check response status and if it is 409 set next request self",
                  "if(pm.response.status == 409){",
                  "\tpostman.setNextRequest(\"001 - send sms\")",
                  "}",
                  "",
                  "// Get next request from collection variables",
                  "if(pm.collectionVariables.has(\"next_request\")){",
                  "\tlet next = pm.collectionVariables.get(\"next_request\")",
                  "",
                  "\t// If collection variable is set, set it as next request",
                  "\tif(next.length > 0){",
                  "\t\tpostman.setNextRequest(next)",
                  "\t}",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "0a4649b7-3b53-4fe1-8dcd-301ef54e224c",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"countryCode\": \"996\",\n  \"otphash\": \"string\",\n  \"phone\": \"{{registration_number}}\",\n  \"smsType\": \"{{send_sms_type}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{base_url}}/common-service/api/v1/auth/send-sms",
            "description": "## Send SMS\n\n### Purpose\n\nThis request is used to generate OTP for the user.\n\nGenerated OTP is requested for:\n\n- Login (LOGIN)\n- Password reset (PASSWORD_RESET)\n- Phone change (PHONE_CHANGE)\n- Registration (REGISTRATION)\n\n### Parameters\n\n`send-sms` request needs four parameters:\n\n1. `countryCode` - is set to `996` to make process automation possible. Using '996' makes possible to use `123456` as OTP wherever it is required.\n2. `otphash` - we are passing any string here.\n3. `phone` - the value for this parameter is set in collection variables. For registration it is randomly generated. \n4. `smsType` - the value for this parameter is set in collection variables. Its default value is `REGISTRATION`. Its value is changed dynamically during the test run.\n\n\n\nAfter generating OTP, it must be verified by \n`verify-sms` request."
          },
          "response": []
        },
        {
          "name": "002 - verify sms",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "43ac7e84-884a-47a5-be18-470445e0b855",
                "exec": [
                  "pm.test(\"Status is 202\", () => {",
                  "\tpm.expect(\"Status code is 202\", () => {",
                  "\t\tpm.response.to.have.status(202);",
                  "\t});",
                  "});",
                  "",
                  "// Get smsID from response",
                  "let smsID = responseBody",
                  "",
                  "// Set smsID in collection variables",
                  "pm.collectionVariables.set(\"smsID\", smsID)",
                  "",
                  "// Check smsID length to be 36 symbols",
                  "pm.test(\"Test smsID length is 36\", function(){",
                  "\tpm.expect(smsID.length).to.be.equal(36)",
                  "});",
                  "",
                  "if(pm.collectionVariables.has(\"next_request\")){",
                  "\t// Get next request from collection variables to be use after sms verification",
                  "\tlet next = pm.collectionVariables.get(\"next_request_after_verify_sms\")",
                  "",
                  "\t// If next request is set for sms verification use it as next request",
                  "\tif(next.length > 0){",
                  "\t\tpostman.setNextRequest(next)",
                  "\t}",
                  "}",
                  "// Clear next request in collection variables",
                  "pm.collectionVariables.set(\"next_request\", \"\")",
                  "// Clear next request for sms verification in collection variables",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"\")"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "5256a56e-d335-4783-ae71-0e360efbff2d",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"code\": \"123456\",\n  \"countryCode\": \"996\",\n  \"phone\": \"{{registration_number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{base_url}}/common-service/api/v1/auth/verify-sms",
            "description": "## Verify SMS\n\n### Purpose\n\nThis request is used to verify sent OTP and generate `SMSID`.\n\n### Parameters\n\n`verify-sms` request requires three parameters to pass:\n\n1. `code` - OTP code sent via `send-sms` request.\n2. `countryCode` - for what country it was sent. For us, it is `996`.\n3. `phone` - for what number OTP was generated for. The value of this parameter is from the collection variables.\n\n### Tests\n\nAfter the response is received\n\n-  `smsID` is set at collection variables.\n- The length of returned smsid is checked.\n- The next request is set from collection variables."
          },
          "response": []
        }
      ],
      "_postman_id": "364cf449-47ec-496d-8f72-8524f60e7c29"
    },
    {
      "name": "001 - registration",
      "item": [
        {
          "name": "001-01 - registration - miss single parameter",
          "item": [
            {
              "name": "001 - empty parameters",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0cd4cb1b-b575-4baa-80b3-a2262d1147d7",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dff63ee2-c7be-45d0-a3e0-5adbec3be88b",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - empty first name\")",
                      "pm.collectionVariables.set(\"generate_new_user\", \"false\")",
                      "",
                      "pm.test(\"Wrong firstname\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong firstname\");",
                      "});",
                      "",
                      "pm.test(\"Wrong lastname\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong lastname\");",
                      "});",
                      "",
                      "pm.test(\"Wrong userSMSId\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong userSMSId\");",
                      "});",
                      "",
                      "pm.test(\"Invalid Password\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Invalid Password\");",
                      "});",
                      "",
                      "pm.test(\"Wrong deviceToken\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong deviceToken\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "779c3993-eb41-4463-bfd8-5f9734ba2a11",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"deviceToken\": \"\",\n\t\"firstname\": \"\",\n\t\"lastname\": \"\",\n\t\"mobileName\": \"\",\n\t\"password\": \"\",\n\t\"userSMSId\": \"\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/registration",
                "description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
              },
              "response": []
            },
            {
              "name": "002 - empty first name",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "574d51d9-2305-4fbc-9d2e-2a334263d8ef",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "ba70d99d-9dae-4c9d-be19-9d8735c4def9",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "// empty last name",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - empty last name\")",
                      "",
                      "pm.test(\"Wrong firstname\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong firstname\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "8732ec98-8195-46f7-aa6d-e9f76e67e1cf",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"deviceToken\": \"someDUMMYtoken\",\n\t\"firstname\": \"\",\n\t\"lastname\": \"{{lname}}\",\n\t\"mobileName\": \"myMobile\",\n\t\"mobileOS\": \"UNKNOWN\",\n\t\"password\": \"magariParoli1\",\n\t\"userSMSId\": \"{{smsID}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/registration",
                "description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
              },
              "response": []
            },
            {
              "name": "003 - empty last name",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8d5eadf6-e969-46b6-a11d-44cf44f9f881",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "0bc62b26-c7e8-49cc-987c-37f01b93580a",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "// empty password",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - empty password\")",
                      "",
                      "pm.test(\"Wrong laststname\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong lastname\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "0b6ff78f-7d20-4b28-a942-e204205a4ccf",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"deviceToken\": \"someDUMMYtoken\",\n\t\"firstname\": \"{{fname}}\",\n\t\"lastname\": \"\",\n\t\"mobileName\": \"myMobile\",\n\t\"mobileOS\": \"UNKNOWN\",\n\t\"password\": \"magariParoli1\",\n\t\"userSMSId\": \"{{smsID}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/registration",
                "description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
              },
              "response": []
            },
            {
              "name": "004 - empty password",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "029f01c0-3cf5-459e-86b9-63db08bbcef2",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "c867d5fd-4353-4f5b-8fbf-d64dfb9d5cd5",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "// empty OTP",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"005 - empty OTP\")",
                      "",
                      "pm.test(\"Invalid Password\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Invalid Password\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "07b43048-cc5e-492c-8c06-23856e1aa132",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"deviceToken\": \"someDUMMYtoken\",\n\t\"firstname\": \"{{fname}}\",\n\t\"lastname\": \"{{lname}}\",\n\t\"mobileName\": \"myMobile\",\n\t\"mobileOS\": \"UNKNOWN\",\n\t\"password\": \"\",\n\t\"userSMSId\": \"{{smsID}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/registration",
                "description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
              },
              "response": []
            },
            {
              "name": "005 - empty OTP",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "f5cc20e8-75b6-4f80-9747-5aa354a704e4",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "55884fec-05ad-478d-8c32-ae62cc2b7ea1",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "// only first name",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"006 - only first and last name\")",
                      "",
                      "pm.test(\"Wrong userSMSId\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong userSMSId\");",
                      "});",
                      "",
                      "pm.test(\"Must not be blank\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Must not be blank\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "152869be-a110-45f6-933b-094ed3bb690b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"deviceToken\": \"someDUMMYtoken\",\n\t\"firstname\": \"{{fname}}\",\n\t\"lastname\": \"{{lname}}\",\n\t\"mobileName\": \"myMobile\",\n\t\"mobileOS\": \"UNKNOWN\",\n\t\"password\": \"magariParoli1\",\n\t\"userSMSId\": \"\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/registration",
                "description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
              },
              "response": []
            },
            {
              "name": "006 - only first and last name",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "aeaaa1e5-c631-4b57-b57c-874a21dd4d13",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "22bb7e32-3796-4e53-bd27-415aaffc1502",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "// only first name and password",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"007 - only first name and password\")",
                      "",
                      "pm.test(\"Wrong userSMSId\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong userSMSId\");",
                      "});",
                      "",
                      "pm.test(\"userSMSId Must not be blank\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Must not be blank\");",
                      "});",
                      "",
                      "pm.test(\"Invalid Password\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Invalid Password\");",
                      "});",
                      "",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "4456fd63-27a1-4a15-b5bb-5b4927f94ef4",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"firstname\": \"{{fname}}\",\n    \"lastname\": \"{{lname}}\",\n    \"password\": \"\",\n    \"userSMSId\": \"\",\n    \"deviceToken\": \"someDUMMYtoken\",\n    \"mobileName\": \"myMobile\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/registration",
                "description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
              },
              "response": []
            },
            {
              "name": "007 - only first name and password",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "55ef9b90-f7ff-496f-9355-307941174f00",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "92c4acbd-a4ea-4d17-abd5-0f8478286394",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "// only first name and OTP",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"008 - only first name and OTP\")",
                      "",
                      "pm.test(\"Wrong lastname\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong lastname\");",
                      "});",
                      "",
                      "pm.test(\"Wrong userSMSId\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong userSMSId\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "57cd1f35-7308-43b8-862e-2f01d1b0fa68",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstname\": \"{{fname}}\",\n  \"lastname\": \"\",\n  \"password\": \"magariParoli1\",\n  \"userSMSId\": \"\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/registration",
                "description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
              },
              "response": []
            },
            {
              "name": "008 - only first name and OTP",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c483bf38-120d-437a-9ade-8f5438136ef1",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e59b17ee-63fe-496a-9f10-3909ded3d357",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "// only last name and password",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"009 - only last name and passwrod\")",
                      "",
                      "pm.test(\"Check message to contain Wrong lastname\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong lastname\");",
                      "});",
                      "",
                      "pm.test(\"Check message to contain Invalid Password\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Invalid Password\");",
                      "});",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "1ae952ee-f2ca-49a7-b1ed-2f061e145b2e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"firstname\": \"{{lname}}\",\r\n  \"lastname\": \"\",\r\n  \"password\": \"\",\r\n  \"userSMSId\": \"smsID\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/registration",
                "description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
              },
              "response": []
            },
            {
              "name": "009 - only last name and passwrod",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "49139437-2522-4831-9d6c-c9fe45f1b0dc",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "85388708-eaed-45b8-87f0-5e3b6124679e",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "// only last name and OTP",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"010 - only last name and OTP\")",
                      "",
                      "pm.test(\"Check message to contain Wrong firstname\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong firstname\");",
                      "});",
                      "",
                      "pm.test(\"Check message to contain Wrong userSMSId\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong userSMSId\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "1ce18742-42f0-4411-9355-c68ff2bcbb1e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstname\": \"\",\n  \"lastname\": \"{{lname}}\",\n  \"password\": \"magariParoli1\",\n  \"userSMSId\": \"\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/registration",
                "description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
              },
              "response": []
            },
            {
              "name": "010 - only last name and OTP",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a9c92a81-ca8b-44d8-bdb7-4e6c5a45fbf3",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "241ed881-2187-4469-8de0-aa27e6cf7f62",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "// only password and OTP",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"011 - only password and OTP\")",
                      "",
                      "pm.test(\"Check message to contain Wrong firstname\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong firstname\");",
                      "});",
                      "",
                      "pm.test(\"Check message to contain Invalid Password\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Invalid Password\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "955daaa4-4e1d-42d9-9a49-4e1c7c806dd9",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstname\": \"\",\n  \"lastname\": \"{{lname}}\",\n  \"password\": \"\",\n  \"userSMSId\": \"smsID\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/registration",
                "description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
              },
              "response": []
            },
            {
              "name": "011 - only password and OTP",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "91d68b3f-1a56-43a7-ac5f-5d2e6f47f490",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a335610d-5211-431f-92c1-d5d06d5f4582",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "// registration",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - only first name\")",
                      "",
                      "pm.test(\"Check message to contain Wrong firstname\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong firstname\");",
                      "});",
                      "",
                      "pm.test(\"Check message to contain Wrong lastname\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong lastname\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "c70839c6-a96e-4ef4-8377-844ce1e3d951",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstname\": \"\",\n  \"lastname\": \"\",\n  \"password\": \"magariParoli1\",\n  \"userSMSId\": \"smsID\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/registration",
                "description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
              },
              "response": []
            }
          ],
          "_postman_id": "fe9e1e4e-3fec-4ba5-94be-0b2b862c288d",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "f78cf068-d5ef-463e-861a-21dd90c52995",
                "type": "text/javascript",
                "exec": [
                  "let fname = pm.variables.replaceIn('{{$randomFirstName}}')",
                  "let lname = pm.variables.replaceIn('{{$randomLastName}}')",
                  "pm.collectionVariables.set(\"fname\", fname)",
                  "pm.collectionVariables.set(\"lname\", lname)"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d4d9b4d1-84e3-4887-b4db-b84e1a3cf17a",
                "type": "text/javascript",
                "exec": [
                  "// Set data to collection variables",
                  "pm.collectionVariables.set(\"send_sms_type\", \"REGISTRATION\")",
                  "pm.collectionVariables.set(\"generate_new_user\", \"false\")",
                  "// verify sms",
                  "pm.collectionVariables.set(\"next_request\", \"002 - verify sms\")",
                  "// Set next request to be send-sms",
                  "postman.setNextRequest(\"001 - send sms\")"
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "001-02 - registration - send only one parameter",
          "item": [
            {
              "name": "001 - only first name",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b1e427ed-10b0-4791-aa63-4be84120f5bf",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "c4d09148-1562-4ed2-9367-2cd9b7327d87",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "// only last name",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - only last name\")",
                      "",
                      "pm.test(\"Wrong lastname\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong lastname\");",
                      "});",
                      "",
                      "pm.test(\"Invalid Password\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Invalid Password\");",
                      "});",
                      "",
                      "pm.test(\"Wrong userSMSId\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong userSMSId\");",
                      "});",
                      "",
                      "pm.test(\"Wrong deviceToken\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong deviceToken\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "91bf5031-63ee-4e4d-8615-afc619ed8d7d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"deviceToken\": \"\",\n\t\"firstname\": \"{{fname}}\",\n\t\"lastname\": \"\",\n\t\"mobileName\": \"\",\n\t\"mobileOS\": \"UNKNOWN\",\n\t\"password\": \"\",\n\t\"userSMSId\": \"\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/registration",
                "description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
              },
              "response": []
            },
            {
              "name": "002 - only last name",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9e8cca0f-e309-4a84-9d84-9028fbd0daaa",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "b6ed35c6-769c-4c1a-b350-4189595f16a0",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "// only password",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - only password\")",
                      "",
                      "pm.test(\"Wrong firstname\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong firstname\");",
                      "});",
                      "",
                      "pm.test(\"Check message to contain Invalid Password\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Invalid Password\");",
                      "});",
                      "",
                      "pm.test(\"Wrong userSMSId\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong userSMSId\");",
                      "});",
                      "",
                      "pm.test(\"Wrong deviceToken\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong deviceToken\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "02b3d81b-039f-4657-8331-88ab790f3597",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"deviceToken\": \"\",\n\t\"firstname\": \"\",\n\t\"lastname\": \"{{lname}}\",\n\t\"mobileName\": \"\",\n\t\"mobileOS\": \"UNKNOWN\",\n\t\"password\": \"\",\n\t\"userSMSId\": \"\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/registration",
                "description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
              },
              "response": []
            },
            {
              "name": "003 - only password",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5171a04c-e9bb-49fe-b6a6-cc5af77fc855",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "84c9bb8c-9d69-424d-a286-b7471b3e7a9e",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "// only password",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - only OTP\")",
                      "",
                      "pm.test(\"Wrong firstname\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong firstname\");",
                      "});",
                      "",
                      "pm.test(\"Wrong lastname\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong lastname\");",
                      "});",
                      "",
                      "pm.test(\"Wrong userSMSId\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong userSMSId\");",
                      "});",
                      "",
                      "pm.test(\"Wrong deviceToken\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong deviceToken\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "9632c91b-2909-4512-a60d-10421faf9e04",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"deviceToken\": \"\",\n\t\"firstname\": \"\",\n\t\"lastname\": \"\",\n\t\"mobileName\": \"\",\n\t\"mobileOS\": \"UNKNOWN\",\n\t\"password\": \"magariParoli1\",\n\t\"userSMSId\": \"\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/registration",
                "description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
              },
              "response": []
            },
            {
              "name": "004 - only OTP",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "64478cb8-4445-4c03-bf07-e8830e662e9d",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "d2ba63d2-4c0e-4629-9879-c97b8c7030bd",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "// only first and last name",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - registration\")",
                      "",
                      "pm.test(\"Wrong firstname\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong firstname\");",
                      "});",
                      "",
                      "pm.test(\"Wrong lastname\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong lastname\");",
                      "});",
                      "",
                      "pm.test(\"Wrong Password\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong password\");",
                      "});",
                      "",
                      "pm.test(\"Wrong deviceToken\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong deviceToken\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "7b2c6b17-406d-4c73-9ccf-b17e16b57c74",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"deviceToken\": \"\",\n\t\"firstname\": \"\",\n\t\"lastname\": \"\",\n\t\"mobileName\": \"\",\n\t\"mobileOS\": \"UNKNOWN\",\n\t\"password\": \"\",\n\t\"userSMSId\": \"{{smsID}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/registration",
                "description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
              },
              "response": []
            }
          ],
          "_postman_id": "3bf81ddc-8420-4e82-a5ab-9d9b5db3cd45",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "9ac33ca6-91c9-4493-8a8a-7b5cd46b8585",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "8ff0a914-2455-4f47-a602-ef3985aec950",
                "type": "text/javascript",
                "exec": [
                  "// Set data to collection variables",
                  "pm.collectionVariables.set(\"send_sms_type\", \"REGISTRATION\")",
                  "pm.collectionVariables.set(\"generate_new_user\", \"false\")",
                  "// verify sms",
                  "pm.collectionVariables.set(\"next_request\", \"002 - verify sms\")",
                  "// Set next request to be send-sms",
                  "postman.setNextRequest(\"001 - send sms\")"
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "001-03 - registration - incorrect data",
          "item": [
            {
              "name": "001 - first name - less than allowed",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "cd471120-197a-4f7c-976b-4dffab676448",
                    "exec": [
                      "let fname = pm.variables.replaceIn('{{$randomFirstName}}')",
                      "let lname = pm.variables.replaceIn('{{$randomLastName}}')",
                      "pm.collectionVariables.set(\"fname\", fname)",
                      "pm.collectionVariables.set(\"lname\", lname)"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e116a510-4f87-4a7c-aac1-6ef92ff22ba0",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "// empty last name",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - first name - more than allowed\")",
                      "",
                      "pm.test(\"Wrong firstname\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong firstname\");",
                      "});",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "a224266a-7931-49f3-a0d4-903690a24e6a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"firstname\": \"I\",\n    \"lastname\": \"{{lname}}\",\n    \"password\": \"magariParoli1\",\n    \"userSMSId\": \"{{smsID}}\",\n    \"mobileOS\": \"UNKNOWN\",\n    \"deviceToken\": \"token\",\n\t\"mobileName\": \"\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/registration",
                "description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
              },
              "response": []
            },
            {
              "name": "002 - first name - more than allowed",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "56b0ab27-7717-4aea-ab35-4bd719f12b86",
                    "exec": [
                      "let fname = pm.variables.replaceIn('{{$randomFirstName}}')",
                      "let lname = pm.variables.replaceIn('{{$randomLastName}}')",
                      "pm.collectionVariables.set(\"fname\", fname)",
                      "pm.collectionVariables.set(\"lname\", lname)"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "876525ae-ab9f-45ce-b381-8fc172d0e0aa",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "// empty last name",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - first name - disallowed chars\")",
                      "",
                      "",
                      "pm.test(\"Wrong firstname\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong firstname\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "1bc4b402-f8d6-4506-bc60-0f2f3ba93334",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"firstname\": \"Pablo Diego José Francisco de Paula Juan Nepomuceno\",\n    \"lastname\": \"{{lname}}\",\n    \"password\": \"magariParoli1\",\n    \"userSMSId\": \"{{smsID}}\",\n    \"mobileOS\": \"UNKNOWN\",\n    \"deviceToken\": \"token\",\n    \"mobileName\": \"\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/registration",
                "description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
              },
              "response": []
            },
            {
              "name": "003 - first name - disallowed chars",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "43627c38-126a-4e1d-a60a-ec658133dea2",
                    "exec": [
                      "let fname = \"ლენსტალბერი\"",
                      "let lname = pm.variables.replaceIn('{{$randomLastName}}')",
                      "pm.collectionVariables.set(\"fname\", fname)",
                      "pm.collectionVariables.set(\"lname\", lname)"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "7afa317f-82d5-45b7-9777-ac8e2f40bb36",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "// empty last name",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - last name - less than allowed\")",
                      "",
                      "pm.test(\"Wrong lastname\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong firstname\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "b22cc68e-136c-4161-adfe-ab171212cb9c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"firstname\": \"{{fname}}\",\n    \"lastname\": \"{{lname}}\",\n    \"password\": \"magariParoli1\",\n    \"userSMSId\": \"{{smsID}}\",\n    \"mobileOS\": \"UNKNOWN\",\n    \"deviceToken\": \"token\",\n    \"mobileName\": \"\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/registration",
                "description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
              },
              "response": []
            },
            {
              "name": "004 - last name - less than allowed",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "6bce332a-f327-4d83-88ee-63fdc90394e3",
                    "exec": [
                      "let fname = pm.variables.replaceIn('{{$randomFirstName}}')",
                      "let lname = pm.variables.replaceIn('{{$randomLastName}}')",
                      "pm.collectionVariables.set(\"fname\", fname)",
                      "pm.collectionVariables.set(\"lname\", lname)"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "d76f7a21-3065-4168-93e5-619e20af1735",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "// empty last name",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"005 - last name - more than allowed\")",
                      "",
                      "pm.test(\"Wrong lastname\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong lastname\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "72b96fff-5421-423d-a8ba-d92add36bc4a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"firstname\": \"{{fname}}\",\n    \"lastname\": \"I\",\n    \"password\": \"magariParoli1\",\n    \"userSMSId\": \"{{smsID}}\",\n    \"mobileOS\": \"UNKNOWN\",\n    \"deviceToken\": \"token\",\n    \"mobileName\": \"\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/registration",
                "description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
              },
              "response": []
            },
            {
              "name": "005 - last name - more than allowed",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "cb96e2f3-2b4e-42c6-8bd9-8c7054ef0486",
                    "exec": [
                      "let fname = pm.variables.replaceIn('{{$randomFirstName}}')",
                      "let lname = pm.variables.replaceIn('{{$randomLastName}}')",
                      "pm.collectionVariables.set(\"fname\", fname)",
                      "pm.collectionVariables.set(\"lname\", lname)"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "78caeee6-d765-495e-8395-0b1df861781f",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "// empty last name",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"006 - last name - disallowed chars\")",
                      "",
                      "pm.test(\"Wrong lastname\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong lastname\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "ffbd2b3a-6cbb-4e41-9130-5885b79d08f8",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"firstname\": \"{{fname}}\",\n    \"lastname\": \"Remedios Cipriano de la Santísima Trinidad Ruiz y Picasso\",\n    \"password\": \"magariParoli1\",\n    \"userSMSId\": \"{{smsID}}\",\n    \"mobileOS\": \"UNKNOWN\",\n    \"deviceToken\": \"token\",\n    \"mobileName\": \"\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/registration",
                "description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
              },
              "response": []
            },
            {
              "name": "006 - last name - disallowed chars",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ab4cb995-f7cc-41de-a934-9f5ad392e1dd",
                    "exec": [
                      "let fname = pm.variables.replaceIn('{{$randomFirstName}}')",
                      "let lname = \"ჯამჭურჭელაშვილი\"",
                      "pm.collectionVariables.set(\"fname\", fname)",
                      "pm.collectionVariables.set(\"lname\", lname)"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3ca0fed0-2726-40c4-8f2e-906ec3ffaf43",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "// empty last name",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - registration\")",
                      "",
                      "pm.test(\"Wrong lastname\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong lastname\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "b6cf5991-b6c1-4b2f-8812-47c716a76a86",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"firstname\": \"{{fname}}\",\n    \"lastname\": \"{{lname}}\",\n    \"password\": \"magariParoli1\",\n    \"userSMSId\": \"{{smsID}}\",\n    \"mobileOS\": \"UNKNOWN\",\n    \"deviceToken\": \"token\",\n    \"mobileName\": \"\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/registration",
                "description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
              },
              "response": []
            }
          ],
          "_postman_id": "1d9112fb-f108-43bf-8e00-8915011dc506",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5dd1a6a2-9a2e-4a4d-bd69-115c344e51b7",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "fc0b6c55-cb16-4fe4-bfbf-e41aab5551a7",
                "type": "text/javascript",
                "exec": [
                  "// Set data to collection variables",
                  "pm.collectionVariables.set(\"send_sms_type\", \"REGISTRATION\")",
                  "pm.collectionVariables.set(\"generate_new_user\", \"false\")",
                  "// verify sms",
                  "pm.collectionVariables.set(\"next_request\", \"002 - verify sms\")",
                  "",
                  "// Set next request to be send-sms",
                  "postman.setNextRequest(\"001 - send sms\")",
                  "",
                  "pm.collectionVariables.set(\"fname\", \"\")",
                  "pm.collectionVariables.set(\"lname\", \"\")"
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "003 - registration",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e4f2bd51-6065-4a20-a787-9a405b4523d2",
                "exec": [
                  "let fname = pm.variables.replaceIn('{{$randomFirstName}}')",
                  "let lname = pm.variables.replaceIn('{{$randomLastName}}')",
                  "pm.collectionVariables.set(\"fname\", fname)",
                  "pm.collectionVariables.set(\"lname\", lname)"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "08171e41-830c-4f25-9c96-813900af40c0",
                "exec": [
                  "// Get data from collection variables",
                  "pm.collectionVariables.set(\"send_sms_type\", \"PASSWORD_RESET\")",
                  "//password",
                  "pm.collectionVariables.set(\"password\", \"magariParoli1!\")",
                  "// verify sms",
                  "pm.collectionVariables.set(\"next_request\", \"002 - verify sms\")",
                  "// login",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - same password\")",
                  "// Set next request to be send-sms",
                  "postman.setNextRequest(\"001 - send sms\")",
                  "",
                  "pm.collectionVariables.set(\"generate_new_user\", \"false\")",
                  "",
                  "let jsonData = pm.response.json();",
                  "",
                  "const schema = {",
                  "\t\"type\": \"object\",",
                  "\t\"properties\": {",
                  "\t\t\"access_token\":{",
                  "\t\t\t\"type\": \"string\"",
                  "\t\t}",
                  "    }",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "\tpm.response.to.have.status(201);",
                  "}); ",
                  "",
                  "pm.test(\"Validating schema\", () => {",
                  "\tpm.response.to.have.jsonSchema(schema)",
                  "})"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "195b87ef-bd45-44ba-8341-b0d46fbca0aa",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"deviceToken\": \"string\",\n  \"firstname\": \"{{fname}}\",\n  \"lastname\": \"{{lname}}\",\n  \"password\": \"magariParoli1!\",\n  \"mobileName\": \"string\",\n  \"mobileOS\": \"ANDROID\",\n  \"userSMSId\": \"{{smsID}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{base_url}}/common-service/api/v1/auth/registration",
            "description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
          },
          "response": []
        }
      ],
      "_postman_id": "b5d91559-abaf-4c24-9c6c-54c72605af53"
    },
    {
      "name": "002 - resetPassword",
      "item": [
        {
          "name": "002-001 - reset password negative",
          "item": [
            {
              "name": "001 - same password",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "885e9d7c-16e3-4265-acc6-38d0efea9fd7",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "0cadd643-6327-43a4-88ba-82e3d3dacdfb",
                    "exec": [
                      "//let jsonData = pm.response.json();",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - empty fields\")",
                      "",
                      "pm.test(\"Status code is 205\", function () {",
                      "\tpm.response.to.have.status(205);",
                      "}); ",
                      "//pm.test(\"Wrong userSMSId\", () => {",
                      "//\tpm.expect(jsonData.message).to.contain(\"Wrong password. Invalid Password\");",
                      "//});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "72d8a40a-d171-426b-b8e0-9d6259a9317a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"password\": \"{{password}}\",\n  \"userSMSId\": \"{{smsID}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/reset-password",
                "description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
              },
              "response": []
            },
            {
              "name": "002 - empty fields",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "3c4d88be-3bcb-4767-b636-e9a416fa1146",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "4548a76f-2a3b-4886-b082-4f42ee115a57",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - empty password\")",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "\tpm.response.to.have.status(400);",
                      "}); ",
                      "",
                      "pm.test(\"Wrong userSMSId\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong userSMSId\");",
                      "});",
                      "",
                      "pm.test(\"Wrong userSMSId\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Invalid Password\");",
                      "});",
                      "",
                      "pm.test(\"Invalid Password\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Must not be blank\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "13f70f99-de56-4f05-91b9-52c7a5efc80a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"password\": \"\",\n  \"userSMSId\": \"\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/reset-password",
                "description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
              },
              "response": []
            },
            {
              "name": "003 - empty password",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e35686ad-f720-45e9-bd9d-e68b27846c14",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "d2c4b65f-ebf6-445a-afdf-9d600b98dc79",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - empty userSms\")",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "\tpm.response.to.have.status(400);",
                      "}); ",
                      "pm.test(\"Wrong userSMSId\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong password\");",
                      "});",
                      "",
                      "pm.test(\"Wrong userSMSId\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Invalid Password\");",
                      "});",
                      "",
                      "pm.test(\"Invalid Password\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Must not be blank\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "67c23548-d672-45a6-a3f5-685b77e01360",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"password\": \"\",\n  \"userSMSId\": \"{{smsID}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/reset-password",
                "description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
              },
              "response": []
            },
            {
              "name": "004 - empty userSms",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9fd0ad78-7c2d-4e71-9f79-17f60a838213",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fb414549-7b0c-4f12-9182-d95701b9a3f7",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"005 - wrong userSMS\")",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "\tpm.response.to.have.status(400);",
                      "}); ",
                      "pm.test(\"Wrong userSMSId\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong userSMSId\");",
                      "});",
                      "",
                      "pm.test(\"Invalid Password\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Must not be blank\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "eed850f2-e37b-4fd9-9627-a6a16769b7b4",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"password\": \"{{password}}\",\n  \"userSMSId\": \"\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/reset-password",
                "description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
              },
              "response": []
            },
            {
              "name": "005 - wrong userSMS",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a118a7ab-0efa-4972-acd5-17cbe97cf725",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "d5715fc2-fd5f-4bdc-a850-5fb9a88c4d89",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"006 - password without upperCase\")",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "\tpm.response.to.have.status(404);",
                      "}); ",
                      "pm.test(\"Wrong userSMSId\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"404 NOT_FOUND \\\"Sms not send with id 196129129 \\\"\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "52de0048-d1ba-4100-8e30-822cc6182943",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"password\": \"{{password}}\",\n  \"userSMSId\": \"196129129\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/reset-password",
                "description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
              },
              "response": []
            },
            {
              "name": "006 - password without upperCase",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "35df0576-1997-4546-b62f-c1a2c0c5a1d1",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "b7cd31de-7b85-461b-a2b3-ccec434299fa",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"007 - password less length\")",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "\tpm.response.to.have.status(400);",
                      "}); ",
                      "pm.test(\"Wrong userSMSId\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong password. Invalid Password\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "886fa2d2-fa5e-4cff-8a38-a4ff019bc6e7",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"password\": \"magariparoli12\",\n  \"userSMSId\": \"{{smsID}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/reset-password",
                "description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
              },
              "response": []
            },
            {
              "name": "007 - password less length",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e850d43a-3ce1-4e1b-9ef6-8fcbe52d3262",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "5a950607-605d-463b-b062-2989d3567083",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"008 - password max length\")",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "\tpm.response.to.have.status(400);",
                      "}); ",
                      "pm.test(\"Wrong userSMSId\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong password. Invalid Password\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "981700bd-4784-401e-b59f-6fef7d0f8cc5",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"password\": \"Paroli1\",\n  \"userSMSId\": \"{{smsID}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/reset-password",
                "description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
              },
              "response": []
            },
            {
              "name": "008 - password max length",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "96d0a528-cda7-439c-abc2-a0a1354687aa",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "737e7af5-83b5-4624-9439-9ed0147c18d6",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"009 - password without digit\")",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "\tpm.response.to.have.status(400);",
                      "}); ",
                      "pm.test(\"Wrong userSMSId\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong password. Invalid Password\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "d7286210-c378-4af5-bb49-3604af630f5d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"password\": \"eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJPeUU1bUN2N3did0tZTjVLOHdCaW1OZlB6UjJMQVRjN1dfSU1uVXcwU1JrIn0.eyJleHAiOjE2NDA3NDg2NTUsImlhdCI6MTY0MDcxMjY1NSwianRpIjoiZjg2M2JhMGYtM2FjZC00ZDJlLWI0ZmUtYTMzMGNiM2Y5ZDgyIiwiaXNzIjoiaHR0cHM6Ly9rZXljbG9hay5kZXYuc3dlZWZ0ZGlnaXRhbC5jb206ODA4MC9hdXRoL3JlYWxtcy9zd2VlZnQiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiN2RhZGQ5OWEtZTI0MC00MzUyLWExNTktNmRhNTU2YWU0YTI5IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoic3dlZWZ0LWFwaS1nYXRld2F5Iiwic2Vzc2lvbl9zdGF0ZSI6IjIyYWU4NTRkLWY1ZTQtNGVhMS05ZWQxLTJiYTMzNzQ0MWM5OCIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsiZGVmYXVsdC1yb2xlcy1zd2VlZnQiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvZmZsaW5lX2FjY2VzcyBwcm9maWxlIGVtYWlsIHRlc3QiLCJzaWQiOiIyMmFlODU0ZC1mNWU0LTRlYTEtOWVkMS0yYmEzMzc0NDFjOTgiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsImRhdGFiYXNlX2lkIjoxMjAsIm5hbWUiOiJFbWVseSBCZWNrZXIiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5OTY1MTAyODgwNzMiLCJnaXZlbl9uYW1lIjoiRW1lbHkiLCJmYW1pbHlfbmFtZSI6IkJlY2tlciJ9.M3X5_F82f4o7Iw5j1ln2xZNt9dNykkUIUyjBsB1HRDAFY769fY3ymI2JplAMVxgj3N5AePb5O1uxmPvRlc1c-pVvM8x2A3-kAtdUoevE_kdor3kvAI4EXb88xm4qmlAfy1M7u47y1EBIpK7cY5iy8X2FUy4ACXXIgt9h_mdswO7fxG8nicj4Q_eNhS1WV5hArUDgTtCM4W_AqtFXA2PQaq5Q3WdsZhSoYWlz02KdgaIygS1geJ7jKANQHo7fVsPwGFqmH4Kc4622FXI2iBgGjyP6JGgyzQmHeaJWo9W8irZ4anFrDXscwM9-UlPc5TYyXGQbglgmqdINV-YQBa9Gvw\",\n  \"userSMSId\": \"{{smsID}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/reset-password",
                "description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
              },
              "response": []
            },
            {
              "name": "009 - password without digit",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "68d018c8-d603-4887-bded-82c10da50c1e",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "8f69829e-fb4f-48d4-ad72-22b895068c54",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - reset password\")",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "\tpm.response.to.have.status(400);",
                      "}); ",
                      "pm.test(\"Wrong userSMSId\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong password. Invalid Password\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "f6a7e089-52dc-4fa2-bfbe-90380657c633",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"password\": \"magariParoli\",\n  \"userSMSId\": \"{{smsID}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/reset-password",
                "description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
              },
              "response": []
            }
          ],
          "_postman_id": "fc0600ea-5af5-4a7a-9bbe-71ab4af2fb6a",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "25e7ef87-0f0e-4f6b-8a60-18c2a2ce7320",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "028f8fed-8ea6-4147-8587-6faf81c0a172",
                "type": "text/javascript",
                "exec": [
                  "// Set data to collection variables",
                  "pm.collectionVariables.set(\"send_sms_type\", \"PASSWORD_RESET\")",
                  "pm.collectionVariables.set(\"generate_new_user\", \"false\")",
                  "// verify sms",
                  "pm.collectionVariables.set(\"next_request\", \"002 - verify sms\")",
                  "",
                  "// Set next request to be send-sms",
                  "postman.setNextRequest(\"001 - send sms\")"
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "004 - reset password",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "f38ab57e-e35b-4996-b7fa-b07333a2dd80",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e8d0951b-b006-4b47-97ed-551b6120b5f7",
                "exec": [
                  "// Get data from collection variables",
                  "pm.collectionVariables.set(\"send_sms_type\", \"LOGIN\")",
                  "//password",
                  "pm.collectionVariables.set(\"resetedPassword\", \"magariParoli12!@\")",
                  "// verify sms",
                  "pm.collectionVariables.set(\"next_request\", \"002 - verify sms\")",
                  "// login",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - login with empty password field and valid Number\")",
                  "// Set next request to be send-sms",
                  "postman.setNextRequest(\"001 - send sms\")",
                  "",
                  "pm.collectionVariables.set(\"generate_new_user\", \"false\")",
                  "",
                  "pm.test(\"Status code is 205\", function () {",
                  "\tpm.response.to.have.status(205);",
                  "}); ",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "0219a72e-ad89-4ce4-9f92-6b449a9e5a28",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"password\": \"magariParoli12!@\",\n  \"userSMSId\": \"{{smsID}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{base_url}}/common-service/api/v1/auth/reset-password",
            "description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
          },
          "response": []
        }
      ],
      "_postman_id": "ade1fd65-6df8-4c36-8463-24cbea391210"
    },
    {
      "name": "002 - login",
      "item": [
        {
          "name": "002 - 001 -  login negative",
          "item": [
            {
              "name": "001 - login with empty password field and valid Number",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e351122f-a204-43dd-b7fc-22b6cde5508a",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "\tpm.response.to.have.status(400);",
                      "});",
                      "let access_token = jsonData.access_token",
                      "let refresh_token = jsonData.refresh_token",
                      "",
                      "pm.collectionVariables.set(\"access_token\", access_token)",
                      "pm.collectionVariables.set(\"refresh_token\", refresh_token)",
                      "",
                      "const schema = {",
                      "\t\"type\": \"object\",",
                      "\t\"properties\": {",
                      "\t\t\"status\": {",
                      "\t\t\t\"type\": \"string\"",
                      "\t\t},",
                      "\t\t\"message\": {",
                      "\t\t\t\"type\": \"string\"",
                      "\t\t}",
                      "\t}",
                      "}",
                      "",
                      "pm.test(\"Validating schema for login response\", () => {",
                      "\tpm.response.to.have.jsonSchema(schema);",
                      "});",
                      "",
                      "pm.test(\"Error message must contain text: \\\"Wrong password. Invalid Password\\\"\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong password. Invalid Password\")",
                      "});",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - login with invalid Number field and valid password\")",
                      "",
                      "",
                      "pm.collectionVariables.set(\"send_sms_type\", \"LOGIN\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "91584802-41c2-4784-a4ca-a9f86454abd1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"deviceToken\": \"string\",\n  \"mobileName\": \"string\",\n  \"mobileOS\": \"ANDROID\",\n  \"password\": \"\",\n  \"userSMSId\": \"{{smsID}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/login"
              },
              "response": []
            },
            {
              "name": "002 - login with invalid Number field and valid password",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e351122f-a204-43dd-b7fc-22b6cde5508a",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "\tpm.response.to.have.status(404);",
                      "});",
                      "let access_token = jsonData.access_token",
                      "let refresh_token = jsonData.refresh_token",
                      "",
                      "pm.collectionVariables.set(\"access_token\", access_token)",
                      "pm.collectionVariables.set(\"refresh_token\", refresh_token)",
                      "",
                      "const schema = {",
                      "\t\"type\": \"object\",",
                      "\t\"properties\": {",
                      "\t\t\"status\": {",
                      "\t\t\t\"type\": \"string\"",
                      "\t\t},",
                      "\t\t\"message\": {",
                      "\t\t\t\"type\": \"string\"",
                      "\t\t}",
                      "\t}",
                      "}",
                      "",
                      "pm.test(\"Validating schema for login response\", () => {",
                      "\tpm.response.to.have.jsonSchema(schema);",
                      "});",
                      "",
                      "pm.test(\"Error message must contain text: \\\"Sms not send with id invalid \\\"\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Sms not send with id invalid \")",
                      "});",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - login with invalid Number field and invalid password\")",
                      "",
                      "pm.collectionVariables.set(\"send_sms_type\", \"LOGIN\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "ec739d10-bfbb-4e6f-a4f3-2e98180fb079",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"deviceToken\": \"string\",\n  \"mobileName\": \"string\",\n  \"mobileOS\": \"ANDROID\",\n  \"password\": \"magariParoli1\",\n  \"userSMSId\": \"invalid\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/login"
              },
              "response": []
            },
            {
              "name": "003 - login with invalid Number field and invalid password",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e351122f-a204-43dd-b7fc-22b6cde5508a",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "\tpm.response.to.have.status(400);",
                      "});",
                      "let access_token = jsonData.access_token",
                      "let refresh_token = jsonData.refresh_token",
                      "",
                      "pm.collectionVariables.set(\"access_token\", access_token)",
                      "pm.collectionVariables.set(\"refresh_token\", refresh_token)",
                      "",
                      "const schema = {",
                      "\t\"type\": \"object\",",
                      "\t\"properties\": {",
                      "\t\t\"status\": {",
                      "\t\t\t\"type\": \"string\"",
                      "\t\t},",
                      "\t\t\"message\": {",
                      "\t\t\t\"type\": \"string\"",
                      "\t\t}",
                      "\t}",
                      "}",
                      "",
                      "pm.test(\"Validating schema for login response\", () => {",
                      "\tpm.response.to.have.jsonSchema(schema);",
                      "});",
                      "",
                      "pm.test(\"Error message must contain text: \\\"Wrong password. Invalid Password\\\"\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong password. Invalid Password\")",
                      "});",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - login with empty password field and invalid Number\")",
                      "",
                      "",
                      "pm.collectionVariables.set(\"send_sms_type\", \"LOGIN\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "4b5112ad-04f5-4ce0-9903-ccb163b79ec1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"deviceToken\": \"string\",\n  \"mobileName\": \"string\",\n  \"mobileOS\": \"ANDROID\",\n  \"password\": \"invalid\",\n  \"userSMSId\": \"invalid\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/login"
              },
              "response": []
            },
            {
              "name": "004 - login with empty password field and invalid Number",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e351122f-a204-43dd-b7fc-22b6cde5508a",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "\tpm.response.to.have.status(400);",
                      "});",
                      "let access_token = jsonData.access_token",
                      "let refresh_token = jsonData.refresh_token",
                      "",
                      "pm.collectionVariables.set(\"access_token\", access_token)",
                      "pm.collectionVariables.set(\"refresh_token\", refresh_token)",
                      "",
                      "const schema = {",
                      "\t\"type\": \"object\",",
                      "\t\"properties\": {",
                      "\t\t\"status\": {",
                      "\t\t\t\"type\": \"string\"",
                      "\t\t},",
                      "\t\t\"message\": {",
                      "\t\t\t\"type\": \"string\"",
                      "\t\t}",
                      "\t}",
                      "}",
                      "",
                      "pm.test(\"Validating schema for login response\", () => {",
                      "\tpm.response.to.have.jsonSchema(schema);",
                      "});",
                      "",
                      "pm.test(\"Error message must contain text: \\\"Wrong password. Invalid Password\\\"\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong password. Invalid Password\")",
                      "});",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"005 - login with empty fields\")",
                      "",
                      "pm.collectionVariables.set(\"send_sms_type\", \"LOGIN\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "be456be0-a24b-45ca-998d-b57874c0722f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"deviceToken\": \"string\",\n  \"mobileName\": \"string\",\n  \"mobileOS\": \"ANDROID\",\n  \"password\": \"\",\n  \"userSMSId\": \"invalid\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/login"
              },
              "response": []
            },
            {
              "name": "005 - login with empty fields",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e351122f-a204-43dd-b7fc-22b6cde5508a",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "\tpm.response.to.have.status(400);",
                      "});",
                      "let access_token = jsonData.access_token",
                      "let refresh_token = jsonData.refresh_token",
                      "",
                      "pm.collectionVariables.set(\"access_token\", access_token)",
                      "pm.collectionVariables.set(\"refresh_token\", refresh_token)",
                      "",
                      "const schema = {",
                      "\t\"type\": \"object\",",
                      "\t\"properties\": {",
                      "\t\t\"status\": {",
                      "\t\t\t\"type\": \"string\"",
                      "\t\t},",
                      "\t\t\"message\": {",
                      "\t\t\t\"type\": \"string\"",
                      "\t\t}",
                      "\t}",
                      "}",
                      "",
                      "pm.test(\"Validating schema for login response\", () => {",
                      "\tpm.response.to.have.jsonSchema(schema);",
                      "});",
                      "",
                      "pm.test(\"Error message must contain text: \\\"Wrong userSMSId. Must not be blank\\\"\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong userSMSId. Must not be blank\")",
                      "});",
                      "",
                      "pm.test(\"Error message must contain text: \\\"Wrong password. Invalid Password\\\"\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong password. Invalid Password\")",
                      "});",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"006 - login with invalid password field and valid number\")",
                      "",
                      "pm.collectionVariables.set(\"send_sms_type\", \"LOGIN\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "65cc6e26-7f20-43da-a6a7-1083953498af",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"deviceToken\": \"string\",\n  \"mobileName\": \"string\",\n  \"mobileOS\": \"ANDROID\",\n  \"password\": \"\",\n  \"userSMSId\": \"\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/login"
              },
              "response": []
            },
            {
              "name": "006 - login with invalid password field and valid number",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e351122f-a204-43dd-b7fc-22b6cde5508a",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "\tpm.response.to.have.status(400);",
                      "});",
                      "let access_token = jsonData.access_token",
                      "let refresh_token = jsonData.refresh_token",
                      "",
                      "pm.collectionVariables.set(\"access_token\", access_token)",
                      "pm.collectionVariables.set(\"refresh_token\", refresh_token)",
                      "",
                      "const schema = {",
                      "\t\"type\": \"object\",",
                      "\t\"properties\": {",
                      "\t\t\"status\": {",
                      "\t\t\t\"type\": \"string\"",
                      "\t\t},",
                      "\t\t\"message\": {",
                      "\t\t\t\"type\": \"string\"",
                      "\t\t}",
                      "\t}",
                      "}",
                      "",
                      "pm.test(\"Validating schema for login response\", () => {",
                      "\tpm.response.to.have.jsonSchema(schema);",
                      "});",
                      "",
                      "pm.test(\"Error message must contain text: \\\"Wrong password. Invalid Password\\\"\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong password. Invalid Password\")",
                      "});",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"010 - login with invalid format Number field and correct password\")",
                      "",
                      "pm.collectionVariables.set(\"send_sms_type\", \"LOGIN\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "baaf18ce-8f4e-43d1-9632-6c081519f5bc",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"deviceToken\": \"string\",\n  \"mobileName\": \"string\",\n  \"mobileOS\": \"ANDROID\",\n  \"password\": \"invalid\",\n  \"userSMSId\": \"{{smsID}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/login"
              },
              "response": []
            },
            {
              "name": "007 - login when user is blocked --- not tested",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e351122f-a204-43dd-b7fc-22b6cde5508a",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "\tpm.response.to.have.status(400);",
                      "});",
                      "let access_token = jsonData.access_token",
                      "let refresh_token = jsonData.refresh_token",
                      "",
                      "pm.collectionVariables.set(\"access_token\", access_token)",
                      "pm.collectionVariables.set(\"refresh_token\", refresh_token)",
                      "",
                      "const schema = {",
                      "\t\"type\": \"object\",",
                      "\t\"properties\": {",
                      "\t\t\"status\": {",
                      "\t\t\t\"type\": \"string\"",
                      "\t\t},",
                      "\t\t\"message\": {",
                      "\t\t\t\"type\": \"string\"",
                      "\t\t}",
                      "\t}",
                      "}",
                      "",
                      "pm.test(\"Validating schema for login response\", () => {",
                      "\tpm.response.to.have.jsonSchema(schema);",
                      "});",
                      "",
                      "pm.test(\"Error message must contain text: \\\"Wrong password. Invalid Password\\\"\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong password. Invalid Password\")",
                      "});",
                      "",
                      "// for(i = 0; i <= 5; i++){",
                      "//   postman.setNextRequest(\"007 - login when user is blocked\")",
                      "// }",
                      "",
                      "pm.collectionVariables.set(\"send_sms_type\", \"LOGIN\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "f62d1ab4-d765-46b1-94d4-d63ca5ff9795",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"deviceToken\": \"string\",\n  \"mobileName\": \"string\",\n  \"mobileOS\": \"ANDROID\",\n  \"password\": \"\",\n  \"userSMSId\": \"{{smsID}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/login"
              },
              "response": []
            },
            {
              "name": "008 - login with expired OTP --- not tested",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e351122f-a204-43dd-b7fc-22b6cde5508a",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "\tpm.response.to.have.status(400);",
                      "});",
                      "let access_token = jsonData.access_token",
                      "let refresh_token = jsonData.refresh_token",
                      "",
                      "pm.collectionVariables.set(\"access_token\", access_token)",
                      "pm.collectionVariables.set(\"refresh_token\", refresh_token)",
                      "",
                      "const schema = {",
                      "\t\"type\": \"object\",",
                      "\t\"properties\": {",
                      "\t\t\"status\": {",
                      "\t\t\t\"type\": \"string\"",
                      "\t\t},",
                      "\t\t\"message\": {",
                      "\t\t\t\"type\": \"string\"",
                      "\t\t}",
                      "\t}",
                      "}",
                      "",
                      "pm.test(\"Validating schema for login response\", () => {",
                      "\tpm.response.to.have.jsonSchema(schema);",
                      "});",
                      "",
                      "pm.test(\"Error message must contain text: \\\"Wrong password. Invalid Password\\\"\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong password. Invalid Password\")",
                      "});",
                      "",
                      "pm.collectionVariables.set(\"send_sms_type\", \"LOGIN\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "6e7b51d9-8e1c-4cfd-9761-f76c52bf5d04",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"deviceToken\": \"string\",\n  \"mobileName\": \"string\",\n  \"mobileOS\": \"ANDROID\",\n  \"password\": \"\",\n  \"userSMSId\": \"{{smsID}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/login"
              },
              "response": []
            },
            {
              "name": "009 - login with invalid OTP --- not tested",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e351122f-a204-43dd-b7fc-22b6cde5508a",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "\tpm.response.to.have.status(400);",
                      "});",
                      "let access_token = jsonData.access_token",
                      "let refresh_token = jsonData.refresh_token",
                      "",
                      "pm.collectionVariables.set(\"access_token\", access_token)",
                      "pm.collectionVariables.set(\"refresh_token\", refresh_token)",
                      "",
                      "const schema = {",
                      "\t\"type\": \"object\",",
                      "\t\"properties\": {",
                      "\t\t\"status\": {",
                      "\t\t\t\"type\": \"string\"",
                      "\t\t},",
                      "\t\t\"message\": {",
                      "\t\t\t\"type\": \"string\"",
                      "\t\t}",
                      "\t}",
                      "}",
                      "",
                      "pm.test(\"Validating schema for login response\", () => {",
                      "\tpm.response.to.have.jsonSchema(schema);",
                      "});",
                      "",
                      "pm.test(\"Error message must contain text: \\\"Wrong password. Invalid Password\\\"\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong password. Invalid Password\")",
                      "});",
                      "",
                      "pm.collectionVariables.set(\"send_sms_type\", \"LOGIN\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "3543d8fd-a118-4eff-b692-eff3f522d358",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"deviceToken\": \"string\",\n  \"mobileName\": \"string\",\n  \"mobileOS\": \"ANDROID\",\n  \"password\": \"\",\n  \"userSMSId\": \"{{smsID}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/login"
              },
              "response": []
            },
            {
              "name": "010 - login with invalid format Number field and correct password",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e351122f-a204-43dd-b7fc-22b6cde5508a",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "\tpm.response.to.have.status(404);",
                      "});",
                      "let access_token = jsonData.access_token",
                      "let refresh_token = jsonData.refresh_token",
                      "",
                      "pm.collectionVariables.set(\"access_token\", access_token)",
                      "pm.collectionVariables.set(\"refresh_token\", refresh_token)",
                      "",
                      "const schema = {",
                      "\t\"type\": \"object\",",
                      "\t\"properties\": {",
                      "\t\t\"status\": {",
                      "\t\t\t\"type\": \"string\"",
                      "\t\t},",
                      "\t\t\"message\": {",
                      "\t\t\t\"type\": \"string\"",
                      "\t\t}",
                      "\t}",
                      "}",
                      "",
                      "pm.test(\"Validating schema for login response\", () => {",
                      "\tpm.response.to.have.jsonSchema(schema);",
                      "});",
                      "",
                      "pm.test(\"Error message must contain text: \\\"Sms not send with id\\\"\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Sms not send with id\")",
                      "});",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"011 - login with empty Number field and valid password\")",
                      "",
                      "pm.collectionVariables.set(\"send_sms_type\", \"LOGIN\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "f0ee48e9-e9b6-48ee-b8c3-780de75a35fc",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"deviceToken\": \"string\",\n  \"mobileName\": \"string\",\n  \"mobileOS\": \"ANDROID\",\n  \"password\": \"magariParoli1\",\n  \"userSMSId\": 1234567\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/login"
              },
              "response": []
            },
            {
              "name": "011 - login with empty Number field and valid password",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e351122f-a204-43dd-b7fc-22b6cde5508a",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "\tpm.response.to.have.status(400);",
                      "});",
                      "let access_token = jsonData.access_token",
                      "let refresh_token = jsonData.refresh_token",
                      "",
                      "pm.collectionVariables.set(\"access_token\", access_token)",
                      "pm.collectionVariables.set(\"refresh_token\", refresh_token)",
                      "",
                      "const schema = {",
                      "\t\"type\": \"object\",",
                      "\t\"properties\": {",
                      "\t\t\"status\": {",
                      "\t\t\t\"type\": \"string\"",
                      "\t\t},",
                      "\t\t\"message\": {",
                      "\t\t\t\"type\": \"string\"",
                      "\t\t}",
                      "\t}",
                      "}",
                      "",
                      "pm.test(\"Validating schema for login response\", () => {",
                      "\tpm.response.to.have.jsonSchema(schema);",
                      "});",
                      "",
                      "pm.test(\"Error message must contain text: \\\"Wrong userSMSId. Must not be blank\\\"\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong userSMSId. Must not be blank\")",
                      "});",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"012 - login with empty Number field and invalid password\")",
                      "",
                      "pm.collectionVariables.set(\"send_sms_type\", \"LOGIN\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "9e6777f4-dadc-467b-b6bd-cc645ba389d2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"deviceToken\": \"string\",\n  \"mobileName\": \"string\",\n  \"mobileOS\": \"ANDROID\",\n  \"password\": \"magariParoli1\",\n  \"userSMSId\": \"\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/login"
              },
              "response": []
            },
            {
              "name": "012 - login with empty Number field and invalid password",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e351122f-a204-43dd-b7fc-22b6cde5508a",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "\tpm.response.to.have.status(400);",
                      "});",
                      "let access_token = jsonData.access_token",
                      "let refresh_token = jsonData.refresh_token",
                      "",
                      "pm.collectionVariables.set(\"access_token\", access_token)",
                      "pm.collectionVariables.set(\"refresh_token\", refresh_token)",
                      "",
                      "const schema = {",
                      "\t\"type\": \"object\",",
                      "\t\"properties\": {",
                      "\t\t\"status\": {",
                      "\t\t\t\"type\": \"string\"",
                      "\t\t},",
                      "\t\t\"message\": {",
                      "\t\t\t\"type\": \"string\"",
                      "\t\t}",
                      "\t}",
                      "}",
                      "",
                      "pm.test(\"Validating schema for login response\", () => {",
                      "\tpm.response.to.have.jsonSchema(schema);",
                      "});",
                      "",
                      "pm.test(\"Error message must contain text: \\\"Wrong userSMSId. Must not be blank\\\"\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong userSMSId. Must not be blank\")",
                      "});",
                      "",
                      "pm.test(\"Error message must contain text: \\\"Wrong password. Invalid Password\\\"\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong password. Invalid Password\")",
                      "});",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - login\")",
                      "",
                      "",
                      "pm.collectionVariables.set(\"send_sms_type\", \"LOGIN\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "25bf1ae1-eac8-4dbb-98ad-a77d378e2207",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"deviceToken\": \"string\",\n  \"mobileName\": \"string\",\n  \"mobileOS\": \"ANDROID\",\n  \"password\": \"invalid\",\n  \"userSMSId\": \"\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/login"
              },
              "response": []
            }
          ],
          "_postman_id": "992371d4-f991-4521-aaf1-738810096105",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "4583d5df-96fc-4142-adfa-f3e2b420600d",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "7f9b592c-841e-4fb4-be2a-b2c02c0b593d",
                "type": "text/javascript",
                "exec": [
                  "// Set data to collection variables",
                  "pm.collectionVariables.set(\"send_sms_type\", \"LOGIN\")",
                  "pm.collectionVariables.set(\"generate_new_user\", \"false\")",
                  "// verify sms",
                  "pm.collectionVariables.set(\"next_request\", \"002 - verify sms\")",
                  "// Set next request to be send-sms",
                  "postman.setNextRequest(\"001 - send sms\")",
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "001 - login",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "81ec745a-cce3-46bc-9c14-62bc69788da6",
                "exec": [
                  "let jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "\tpm.response.to.have.status(200);",
                  "});",
                  "",
                  "let access_token = jsonData.access_token",
                  "let refresh_token = jsonData.refresh_token",
                  "let sessionid = jsonData.session_state",
                  "",
                  "pm.collectionVariables.set(\"access_token\", access_token)",
                  "pm.collectionVariables.set(\"refresh_token\", refresh_token)",
                  "pm.collectionVariables.set(\"sessionId\", sessionid)",
                  "",
                  "const schema = {",
                  "\t\"type\": \"object\",",
                  "\t\"properties\": {",
                  "\t\t\"access_token\": {",
                  "\t\t\t\"type\": \"string\"",
                  "\t\t},",
                  "\t\t\"expires_in\": {",
                  "\t\t\t\"type\": \"number\"",
                  "\t\t},",
                  "\t\t\"refresh_expires_in\": {",
                  "\t\t\t\"type\": \"number\"",
                  "\t\t},",
                  "\t\t\"refresh_token\": {",
                  "\t\t\t\"type\": \"string\"",
                  "\t\t},",
                  "\t\t\"token_type\": {",
                  "\t\t\t\"type\": \"string\"",
                  "\t\t},",
                  "\t\t\"not-before-policy\": {",
                  "\t\t\t\"type\": \"number\"",
                  "\t\t},",
                  "\t\t\"session_state\": {",
                  "\t\t\t\"type\": \"string\"",
                  "\t\t},",
                  "\t\t\"scope\": {",
                  "\t\t\t\"type\": \"string\"",
                  "\t\t},",
                  "\t}",
                  "}",
                  "",
                  "pm.test(\"Validating schema for login response\", () => {",
                  "\tpm.response.to.have.jsonSchema(schema)",
                  "})",
                  "",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - logged user\")",
                  "",
                  "pm.collectionVariables.set(\"send_sms_type\", \"LOGIN\")",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "bb039cf4-b1bc-408a-bad3-a81835ac5269",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "f27ab813-0270-431f-b489-d503294273f6",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"deviceToken\": \"string\",\n  \"mobileName\": \"string\",\n  \"mobileOS\": \"ANDROID\",\n  \"password\": \"{{resetedPassword}}\",\n  \"userSMSId\": \"{{smsID}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{base_url}}/common-service/api/v1/auth/login"
          },
          "response": []
        },
        {
          "name": "002 - logged user",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1a2df121-57b4-49c6-97c7-c7f87c827ad4",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "\tpm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - profile details - first login\")\r",
                  "\r",
                  "c_fname = pm.collectionVariables.get(\"fname\")\r",
                  "c_lname = pm.collectionVariables.get(\"lname\")\r",
                  "\r",
                  "let loggedid = jsonData.id\r",
                  "let firstname = jsonData.firstname\r",
                  "let lastname = jsonData.lastname\r",
                  "\r",
                  "pm.test(\"Test user first name\", function () {\r",
                  "\tpm.expect(firstname).to.eql(c_fname);\r",
                  "});\r",
                  "pm.test(\"Test user last name\", function () {\r",
                  "\tpm.expect(lastname).to.eql(c_lname);\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.set(\"loggedId\", loggedid)"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "09432181-1afe-4b33-a3c3-635c49b2b1f5",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/common-service/api/v1/profile"
          },
          "response": []
        }
      ],
      "_postman_id": "29ce9991-4044-4c74-bbfc-30bc6ec77351",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "b877770c-ba80-4a4a-a12a-bbc54d3d6039",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "e7cc9346-9047-48dd-a9f7-886c571c8fe5",
            "type": "text/javascript",
            "exec": [
              "// Set data to collection variables",
              "pm.collectionVariables.set(\"send_sms_type\", \"LOGIN\")",
              "pm.collectionVariables.set(\"generate_new_user\", \"false\")",
              "// verify sms",
              "pm.collectionVariables.set(\"next_request\", \"002 - verify sms\")",
              "// Set next request to be send-sms",
              "postman.setNextRequest(\"001 - send sms\")"
            ]
          }
        }
      ]
    },
    {
      "name": "003 - myProfile",
      "item": [
        {
          "name": "003 - 001 - profile update negative - empty fields",
          "item": [
            {
              "name": "001 - profile details - first login",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "02ee4ad1-c82f-425e-aaec-3eb47df63ecf",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "\tpm.response.to.have.status(200);",
                      "});",
                      "",
                      "c_fname = pm.collectionVariables.get(\"fname\")",
                      "c_lname = pm.collectionVariables.get(\"lname\")",
                      "c_phone = pm.collectionVariables.get(\"registration_number\").toString()",
                      "",
                      "let fname = jsonData.firstname",
                      "let lname = jsonData.lastname",
                      "let phone = jsonData.phoneNumber",
                      "let personalid = jsonData.personalId",
                      "",
                      "const schema = {",
                      "\t\"type\": \"object\",",
                      "\t\"properties\": {",
                      "\t\t\"firstname\":{",
                      "\t\t\t\"type\": \"string\"",
                      "\t\t},",
                      "\t\t\"lastname\":{",
                      "\t\t\t\"type\": \"string\"",
                      "\t\t},",
                      "\t\t\"birthdate\":{",
                      "\t\t\t\"type\": \"null\"",
                      "\t\t},",
                      "\t\t\"personalId\":{",
                      "\t\t\t\"type\": \"null\"",
                      "\t\t},",
                      "\t\t\"email\":{",
                      "\t\t\t\"type\": \"null\"",
                      "\t\t},",
                      "\t\t\"phone\":{",
                      "\t\t\t\"type\": \"string\"",
                      "\t\t}",
                      "\t}",
                      "}",
                      "",
                      "pm.test(\"Validating schema\", () => {",
                      "\tpm.response.to.have.jsonSchema(schema)",
                      "})",
                      "pm.test(\"Test user first name\", function () {",
                      "\tpm.expect(fname).to.eql(c_fname);",
                      "});",
                      "pm.test(\"Test user last name\", function () {",
                      "\tpm.expect(lname).to.eql(c_lname);",
                      "});",
                      "pm.test(\"Test user phone\", function () {",
                      "\tpm.expect(phone).to.eql(c_phone);",
                      "});",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - profile details Update empty parameters\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "c0e192d6-97f5-423b-8833-a10b764e1592",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/details"
              },
              "response": []
            },
            {
              "name": "001 - profile details Update empty parameters",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f8cc0fc7-cc58-4e9b-88e1-629f324daa3d",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "\tpm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Error message must contain text: \\\"Wrong firstname. Must not be blank\\\"\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong firstname. Must not be blank\")",
                      "});",
                      "",
                      "pm.test(\"Error message must contain text: \\\"Wrong lastname. Must not be blank\\\"\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong lastname. Must not be blank\")",
                      "});",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - profile details Update empty birthdate\")"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "14302194-7b1d-422c-9631-70bb288959da",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "c6909ade-cd38-4855-9caf-b77588bfd61b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"birthdate\": \"\", \r\n  \"firstname\": \"\",\r\n  \"lastname\": \"\",\r\n  \"personalId\": \"\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/details"
              },
              "response": []
            },
            {
              "name": "002 - profile details Update empty birthdate",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1a534527-d978-49c4-b2e9-d03c8c99596b",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 406\", function () {",
                      "\tpm.response.to.have.status(406);",
                      "});",
                      "",
                      "pm.test(\"Error message must contain text: \\\"406 NOT_ACCEPTABLE \\\"Bad birthday pattern! must be d/MM/yyyy\\\"\\\"\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"406 NOT_ACCEPTABLE \\\"Bad birthday pattern! must be d/MM/yyyy\\\"\")",
                      "});",
                      "",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - profile details Update empty firstname\")"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2e684cca-5855-4c77-b903-b1a6e6968ee9",
                    "exec": [
                      "let Ufname = pm.variables.replaceIn('{{$randomFirstName}}')\r",
                      "let Ulname = pm.variables.replaceIn('{{$randomLastName}}')\r",
                      "let personalId = Math.round(Math.random() * (99999999999 - 00000000001) + 00000000001).toString()\r",
                      "function randomDate(start, end) { return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())); }\r",
                      "let birthdate = randomDate(new Date(1, 01, 2000), new Date()).toLocaleDateString()\r",
                      "pm.collectionVariables.set(\"fname\", Ufname)\r",
                      "pm.collectionVariables.set(\"lname\", Ulname)\r",
                      "pm.collectionVariables.set(\"personalID\", personalId)\r",
                      "pm.collectionVariables.set(\"birthDate\", \"1/11/1111\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "025c5237-4623-45d9-8873-3f17ff54a383",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"birthdate\": \"\",\r\n  \"firstname\": \"{{fname}}\",\r\n  \"lastname\": \"{{lname}}\",\r\n  \"personalId\": \"{{personalID}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/details"
              },
              "response": []
            },
            {
              "name": "003 - profile details Update empty firstname",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e8d1637b-35ce-42ef-a424-aeb4f05db933",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "\tpm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Error message must contain text: \\\"Wrong firstname. Must not be blank\\\"\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong firstname. Must not be blank\")",
                      "});",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - profile details Update empty lastname\")"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "670bd582-1b64-4958-b583-f663fa1fb6fa",
                    "exec": [
                      "let Ufname = pm.variables.replaceIn('{{$randomFirstName}}')\r",
                      "let Ulname = pm.variables.replaceIn('{{$randomLastName}}')\r",
                      "let personalId = Math.round(Math.random() * (99999999999 - 00000000001) + 00000000001)\r",
                      "function randomDate(start, end) { return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())); }\r",
                      "let birthdate = randomDate(new Date(1, 01, 2000), new Date()).toLocaleDateString()\r",
                      "pm.collectionVariables.set(\"fname\", Ufname)\r",
                      "pm.collectionVariables.set(\"lname\", Ulname)\r",
                      "pm.collectionVariables.set(\"personalID\", personalId)\r",
                      "pm.collectionVariables.set(\"birthDate\", \"1/11/1111\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "811d2911-c873-403c-a912-c49ea8b789fd",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"birthdate\": \"1/11/1111\",\r\n  \"firstname\": \"\",\r\n  \"lastname\": \"{{lname}}\",\r\n  \"personalId\": \"{{personalID}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/details"
              },
              "response": []
            },
            {
              "name": "004 - profile details Update empty lastname",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cc952d67-1bd3-4429-b9e0-f714812f0a6f",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "\tpm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Error message must contain text: \\\"Wrong lastname. Must not be blank\\\"\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong lastname. Must not be blank\")",
                      "});",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"005 - profile details Update empty personalID\")"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0bebbbbe-883a-4465-9db2-208d4a0e9b38",
                    "exec": [
                      "let Ufname = pm.variables.replaceIn('{{$randomFirstName}}')\r",
                      "let Ulname = pm.variables.replaceIn('{{$randomLastName}}')\r",
                      "let personalId = Math.round(Math.random() * (99999999999 - 00000000001) + 00000000001)\r",
                      "function randomDate(start, end) { return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())); }\r",
                      "let birthdate = randomDate(new Date(1, 01, 2000), new Date()).toLocaleDateString()\r",
                      "pm.collectionVariables.set(\"fname\", Ufname)\r",
                      "pm.collectionVariables.set(\"lname\", Ulname)\r",
                      "pm.collectionVariables.set(\"personalID\", personalId)\r",
                      "pm.collectionVariables.set(\"birthDate\", \"1/11/1111\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "42d6d683-b3f2-407f-b2ae-32207bf4b85b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"birthdate\": \"1/11/1111\",\r\n  \"firstname\": \"{{fname}}\",\r\n  \"lastname\": \"\",\r\n  \"personalId\": \"{{personalID}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/details"
              },
              "response": []
            },
            {
              "name": "005 - profile details Update empty personalID",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7b0e111-7417-476c-8926-23cbae19eeec",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "\tpm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Error message must contain text: \\\"Wrong personalId. Must not be blank\\\"\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong personalId. Must not be blank\")",
                      "});",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - profile details Update firstname - less than allowed\")"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "f84f7849-a8cd-457a-bcb7-8ca5a53f5262",
                    "exec": [
                      "let Ufname = pm.variables.replaceIn('{{$randomFirstName}}')\r",
                      "let Ulname = pm.variables.replaceIn('{{$randomLastName}}')\r",
                      "let personalId = Math.round(Math.random() * (99999999999 - 00000000001) + 00000000001)\r",
                      "function randomDate(start, end) { return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())); }\r",
                      "let birthdate = randomDate(new Date(1, 01, 2000), new Date()).toLocaleDateString()\r",
                      "pm.collectionVariables.set(\"fname\", Ufname)\r",
                      "pm.collectionVariables.set(\"lname\", Ulname)\r",
                      "pm.collectionVariables.set(\"personalID\", personalId)\r",
                      "pm.collectionVariables.set(\"birthDate\", \"1/11/1111\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "46bb0f9d-756c-4db9-b418-2e8038d94cfc",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"birthdate\": \"1/11/1111\",\r\n  \"firstname\": \"{{fname}}\",\r\n  \"lastname\": \"{{lname}}\",\r\n  \"personalId\": \"\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/details"
              },
              "response": []
            }
          ],
          "_postman_id": "d3a10a11-82b7-48c3-95ea-5918abae929e",
          "_postman_isSubFolder": true
        },
        {
          "name": "003 - 002 - profile update negative - incorrect data",
          "item": [
            {
              "name": "001 - profile details Update firstname - less than allowed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fcdbb92c-e9c1-45b4-81c9-08dae58af038",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "\tpm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Error message must contain text: \\\"Wrong firstname. Invalid format of firstname\\\"\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong firstname. Invalid format of firstname\")",
                      "});",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - profile details Update lastname - less than allowed\")"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a02d425e-d77d-4f4f-80bc-4f7a52dc1d09",
                    "exec": [
                      "\r",
                      "let Ulname = pm.variables.replaceIn('{{$randomLastName}}')\r",
                      "let personalId = Math.round(Math.random() * (99999999999 - 00000000001) + 00000000001)\r",
                      "function randomDate(start, end) { return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())); }\r",
                      "let birthdate = randomDate(new Date(1, 01, 2000), new Date()).toLocaleDateString()\r",
                      "\r",
                      "pm.collectionVariables.set(\"lname\", Ulname)\r",
                      "pm.collectionVariables.set(\"personalID\", personalId)\r",
                      "pm.collectionVariables.set(\"birthDate\", \"1/11/1111\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "6a076a0d-691d-4d3c-89c0-2fd097f45408",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"birthdate\": \"1/11/1111\",\r\n  \"firstname\": \"s\",\r\n  \"lastname\": \"{{lname}}\",\r\n  \"personalId\": \"{{personalID}}\"\r\n}//min 2 symbol fname its bug",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/details"
              },
              "response": []
            },
            {
              "name": "002 - profile details Update lastname - less than allowed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c0cd3d10-e32c-4802-aa68-48571e30f9b5",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "\tpm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Error message must contain text: \\\"Wrong lastname. Invalid format of lastname\\\"\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong lastname. Invalid format of lastname\")",
                      "});",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - profile details Update firstname - more than allowed\")"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "3f1381df-0f93-40ca-b0e4-0903b117a997",
                    "exec": [
                      "let Ufname = pm.variables.replaceIn('{{$randomFirstName}}')\r",
                      "\r",
                      "let personalId = Math.round(Math.random() * (99999999999 - 00000000001) + 00000000001)\r",
                      "function randomDate(start, end) { return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())); }\r",
                      "let birthdate = randomDate(new Date(1, 01, 2000), new Date()).toLocaleDateString()\r",
                      "pm.collectionVariables.set(\"fname\", Ufname)\r",
                      "\r",
                      "pm.collectionVariables.set(\"personalID\", personalId)\r",
                      "pm.collectionVariables.set(\"birthDate\", \"1/11/1111\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "0adbf7e5-1e40-41e2-8d2c-27c6f23d801d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"birthdate\": \"1/11/1111\",\r\n  \"firstname\": \"{{fname}}\",\r\n  \"lastname\": \"s\",\r\n  \"personalId\": \"{{personalID}}\"\r\n}//min 2 symbol lname its bug",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/details"
              },
              "response": []
            },
            {
              "name": "003 - profile details Update firstname - more than allowed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "81475c55-fc17-428d-a5ad-1a3f665723e8",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "\tpm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Error message must contain text: \\\"Wrong firstname. Invalid format of firstname\\\"\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong firstname. Invalid format of firstname\")",
                      "});",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - profile details Update lastname - more than allowed\")"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e6a5f314-5f1f-4882-9753-599f50590d8c",
                    "exec": [
                      "\r",
                      "let Ulname = pm.variables.replaceIn('{{$randomLastName}}')\r",
                      "let personalId = Math.round(Math.random() * (99999999999 - 00000000001) + 00000000001)\r",
                      "function randomDate(start, end) { return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())); }\r",
                      "let birthdate = randomDate(new Date(1, 01, 2000), new Date()).toLocaleDateString()\r",
                      "\r",
                      "pm.collectionVariables.set(\"lname\", Ulname)\r",
                      "pm.collectionVariables.set(\"personalID\", personalId)\r",
                      "pm.collectionVariables.set(\"birthDate\", \"1/11/1111\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "1ebcfba1-e59d-4e1c-b0b9-773c31ee592a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"birthdate\": \"1/11/1111\",\r\n  \"firstname\": \"{{refresh_token}}\",\r\n  \"lastname\": \"{{lname}}\",\r\n  \"personalId\": \"{{personalID}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/details"
              },
              "response": []
            },
            {
              "name": "004 - profile details Update lastname - more than allowed",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4342dd57-5628-40c8-a8e7-e7ae8beaeb8e",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "\tpm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Error message must contain text: \\\"Wrong lastname. Invalid format of lastname\\\"\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong lastname. Invalid format of lastname\")",
                      "});",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"005 - profile details Update firstname - invalid format geo\")"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "deb29cfc-372e-4ac0-a3b5-92ea401d8396",
                    "exec": [
                      "let Ufname = pm.variables.replaceIn('{{$randomFirstName}}')\r",
                      "\r",
                      "let personalId = Math.round(Math.random() * (99999999999 - 00000000001) + 00000000001)\r",
                      "function randomDate(start, end) { return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())); }\r",
                      "let birthdate = randomDate(new Date(1, 01, 2000), new Date()).toLocaleDateString()\r",
                      "pm.collectionVariables.set(\"fname\", Ufname)\r",
                      "\r",
                      "pm.collectionVariables.set(\"personalID\", personalId)\r",
                      "pm.collectionVariables.set(\"birthDate\", \"1/11/1111\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "5c90eaa7-3b4f-4426-aa5e-a2e937033991",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"birthdate\": \"1/11/1111\",\r\n  \"firstname\": \"{{fname}}\",\r\n  \"lastname\": \"{{refresh_token}}\",\r\n  \"personalId\": \"{{personalID}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/details"
              },
              "response": []
            },
            {
              "name": "005 - profile details Update firstname - invalid format geo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f8d66776-2b33-4674-a309-211073ee0380",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "\tpm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Error message must contain text: \\\"Wrong firstname. Invalid format of firstname\\\"\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong firstname. Invalid format of firstname\")",
                      "});",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"006 - profile details Update lastname - invalid format geo\")"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "bba65469-5757-4be2-a2c6-5f5a0cddb4f1",
                    "exec": [
                      "\r",
                      "let Ulname = pm.variables.replaceIn('{{$randomLastName}}')\r",
                      "let personalId = Math.round(Math.random() * (99999999999 - 00000000001) + 00000000001)\r",
                      "function randomDate(start, end) { return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())); }\r",
                      "let birthdate = randomDate(new Date(1, 01, 2000), new Date()).toLocaleDateString()\r",
                      "\r",
                      "pm.collectionVariables.set(\"lname\", Ulname)\r",
                      "pm.collectionVariables.set(\"personalID\", personalId)\r",
                      "pm.collectionVariables.set(\"birthDate\", \"1/11/1111\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "1c24ca8b-652f-48ce-9dc0-2110397236d9",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"birthdate\": \"1/11/1111\",\r\n  \"firstname\": \"სს\",\r\n  \"lastname\": \"{{lname}}\",\r\n  \"personalId\": \"{{personalID}}\"\r\n}//fname mustnot contains symbols its bug",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/details"
              },
              "response": []
            },
            {
              "name": "006 - profile details Update lastname - invalid format geo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d1ca1b9e-f7a6-4e20-84c9-e7dcab432ad8",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "\tpm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Error message must contain text: \\\"Wrong lastname. Invalid format of lastname\\\"\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong lastname. Invalid format of lastname\")",
                      "});",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"007 - profile details Update firstname - invalid format\")"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "bd8c4e4a-b5f0-4ec4-947c-e18051a27afe",
                    "exec": [
                      "let Ufname = pm.variables.replaceIn('{{$randomFirstName}}')\r",
                      "\r",
                      "let personalId = Math.round(Math.random() * (99999999999 - 00000000001) + 00000000001)\r",
                      "function randomDate(start, end) { return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())); }\r",
                      "let birthdate = randomDate(new Date(1, 01, 2000), new Date()).toLocaleDateString()\r",
                      "pm.collectionVariables.set(\"fname\", Ufname)\r",
                      "\r",
                      "pm.collectionVariables.set(\"personalID\", personalId)\r",
                      "pm.collectionVariables.set(\"birthDate\", \"1/11/1111\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "e0cca153-5916-47c4-b33c-2a7c6991b92d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"birthdate\": \"1/11/1111\",\r\n  \"firstname\": \"{{fname}}\",\r\n  \"lastname\": \"სს\",\r\n  \"personalId\": \"{{personalID}}\"\r\n}//fname mustnot contains symbols its bug",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/details"
              },
              "response": []
            },
            {
              "name": "007 - profile details Update firstname - invalid format",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a735a7f2-e07d-4778-9d3c-a571039555fb",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "\tpm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Error message must contain text: \\\"Wrong firstname. Invalid format of firstname\\\"\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong firstname. Invalid format of firstname\")",
                      "});",
                      "",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"008 - profile details Update lastname - invalid format\")"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2d292be0-313c-44d9-bf59-613299b4aac6",
                    "exec": [
                      "\r",
                      "let Ulname = pm.variables.replaceIn('{{$randomLastName}}')\r",
                      "let personalId = Math.round(Math.random() * (99999999999 - 00000000001) + 00000000001)\r",
                      "function randomDate(start, end) { return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())); }\r",
                      "let birthdate = randomDate(new Date(1, 01, 2000), new Date()).toLocaleDateString()\r",
                      "\r",
                      "pm.collectionVariables.set(\"lname\", Ulname)\r",
                      "pm.collectionVariables.set(\"personalID\", personalId)\r",
                      "pm.collectionVariables.set(\"birthDate\", \"1/11/1111\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "26818603-934d-477a-be23-8860c7b24747",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"birthdate\": \"1/11/1111\",\r\n  \"firstname\": \"@#$!\",\r\n  \"lastname\": \"{{lname}}\",\r\n  \"personalId\": \"{{personalID}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/details"
              },
              "response": []
            },
            {
              "name": "008 - profile details Update lastname - invalid format",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2fb2e04e-7251-48e7-8f1a-11391b758301",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "\tpm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Error message must contain text: \\\"Wrong lastname. Invalid format of lastname\\\"\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong lastname. Invalid format of lastname\")",
                      "});",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"009- profile details Update personalid - invalid format\")"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "efa440a9-1563-4bb4-9ad2-13fc4acfb231",
                    "exec": [
                      "let Ufname = pm.variables.replaceIn('{{$randomFirstName}}')\r",
                      "\r",
                      "let personalId = Math.round(Math.random() * (99999999999 - 00000000001) + 00000000001)\r",
                      "function randomDate(start, end) { return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())); }\r",
                      "let birthdate = randomDate(new Date(1, 01, 2000), new Date()).toLocaleDateString()\r",
                      "pm.collectionVariables.set(\"fname\", Ufname)\r",
                      "\r",
                      "pm.collectionVariables.set(\"personalID\", personalId)\r",
                      "pm.collectionVariables.set(\"birthDate\", \"1/11/1111\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "b83d6c2d-e7cf-48b2-ab18-f7a2f581f6b7",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"birthdate\": \"1/11/1111\",\r\n  \"firstname\": \"{{fname}}\",\r\n  \"lastname\": \"!@#$%#$\",\r\n  \"personalId\": \"{{personalID}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/details"
              },
              "response": []
            },
            {
              "name": "009- profile details Update personalid - invalid format",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dadd1bb7-6e75-4ffa-b5f9-4359a59e0aba",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "\tpm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Error message must contain text: \\\"Wrong personalId. Invalid format of personal id\\\"\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong personalId. Invalid format of personal id\")",
                      "});",
                      "",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"010- profile details Update personalid - less than valid\")"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5b2a874b-c9fe-4c62-b0d6-572a497db06a",
                    "exec": [
                      "let Ufname = pm.variables.replaceIn('{{$randomFirstName}}')\r",
                      "let Ulname = pm.variables.replaceIn('{{$randomLastName}}')\r",
                      "\r",
                      "function randomDate(start, end) { return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())); }\r",
                      "let birthdate = randomDate(new Date(1, 01, 2000), new Date()).toLocaleDateString()\r",
                      "pm.collectionVariables.set(\"fname\", Ufname)\r",
                      "pm.collectionVariables.set(\"lname\", Ulname)\r",
                      "\r",
                      "pm.collectionVariables.set(\"birthDate\", \"1/11/1111\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "9fb3fce9-cebf-4e2a-b112-4033e00555e5",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"birthdate\": \"1/11/1111\",\r\n  \"firstname\": \"{{fname}}\",\r\n  \"lastname\": \"{{lname}}\",\r\n  \"personalId\": \"!@@#$@#@\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/details"
              },
              "response": []
            },
            {
              "name": "010- profile details Update personalid - less than valid",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "84c2ec14-9951-4de9-a116-4b9e2c75f608",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "\tpm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Error message must contain text: \\\"Wrong personalId. Invalid format of personal id\\\"\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong personalId. Invalid format of personal id\")",
                      "});",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"011- profile details Update personalid -more than valid\")"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "84266a52-1ac2-4504-8729-af30f075936b",
                    "exec": [
                      "let Ufname = pm.variables.replaceIn('{{$randomFirstName}}')\r",
                      "let Ulname = pm.variables.replaceIn('{{$randomLastName}}')\r",
                      "\r",
                      "function randomDate(start, end) { return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())); }\r",
                      "let birthdate = randomDate(new Date(1, 01, 2000), new Date()).toLocaleDateString()\r",
                      "pm.collectionVariables.set(\"fname\", Ufname)\r",
                      "pm.collectionVariables.set(\"lname\", Ulname)\r",
                      "\r",
                      "pm.collectionVariables.set(\"birthDate\", \"1/11/1111\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "7138a5ca-c4e5-4cca-8ce6-8cc05aa50e37",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"birthdate\": \"1/11/1111\",\r\n  \"firstname\": \"{{fname}}\",\r\n  \"lastname\": \"{{lname}}\",\r\n  \"personalId\": \"0\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/details"
              },
              "response": []
            },
            {
              "name": "011- profile details Update personalid -more than valid",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a5cdc7e7-70f8-48c1-a0cd-03ec99310bff",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "\tpm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Error message must contain text: \\\"Wrong personalId. Invalid format of personal id\\\"\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong personalId. Invalid format of personal id\")",
                      "});",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"012- profile details Update birthdate - invalid format\")",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "3d332b76-0d94-4048-ba26-99f9aa4369cb",
                    "exec": [
                      "let Ufname = pm.variables.replaceIn('{{$randomFirstName}}')\r",
                      "let Ulname = pm.variables.replaceIn('{{$randomLastName}}')\r",
                      "\r",
                      "function randomDate(start, end) { return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())); }\r",
                      "let birthdate = randomDate(new Date(1, 01, 2000), new Date()).toLocaleDateString()\r",
                      "pm.collectionVariables.set(\"fname\", Ufname)\r",
                      "pm.collectionVariables.set(\"lname\", Ulname)\r",
                      "\r",
                      "pm.collectionVariables.set(\"birthDate\", \"1/11/1111\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "16e6854b-6265-4886-8dbd-e93341cf7fe8",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"birthdate\": \"1/11/1111\",\r\n  \"firstname\": \"{{fname}}\",\r\n  \"lastname\": \"{{lname}}\",\r\n  \"personalId\": \"1234567890121\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/details"
              },
              "response": []
            },
            {
              "name": "012- profile details Update birthdate - invalid format",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0a65d5f8-1297-43ef-b57e-bd881b7eea06",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 406\", function () {",
                      "\tpm.response.to.have.status(406);",
                      "});",
                      "",
                      "pm.test(\"Error message must contain text: \\\"406 NOT_ACCEPTABLE \\\"Bad birthday pattern! must be d/MM/yyyy\\\"\\\"\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"406 NOT_ACCEPTABLE \\\"Bad birthday pattern! must be d/MM/yyyy\\\"\")",
                      "});",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - send sms changeNum empty\")",
                      "",
                      "pm.collectionVariables.set(\"birthDate\", \"\")",
                      "pm.collectionVariables.set(\"personalID\", \"\")",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "fd6d3be4-2191-45b4-978e-635296f3291f",
                    "exec": [
                      "let Ufname = pm.variables.replaceIn('{{$randomFirstName}}')\r",
                      "let Ulname = pm.variables.replaceIn('{{$randomLastName}}')\r",
                      "let personalId = Math.round(Math.random() * (99999999999 - 00000000001) + 00000000001)\r",
                      "function randomDate(start, end) { return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())); }\r",
                      "let birthdate = randomDate(new Date(1, 01, 2000), new Date()).toLocaleDateString()\r",
                      "pm.collectionVariables.set(\"fname\", Ufname)\r",
                      "pm.collectionVariables.set(\"lname\", Ulname)\r",
                      "pm.collectionVariables.set(\"personalID\", personalId)"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "fb624fc6-44dc-4836-b6e0-981612b34c90",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"birthdate\": \"!@#$!@#@\",\r\n  \"firstname\": \"{{fname}}\",\r\n  \"lastname\": \"{{lname}}\",\r\n  \"personalId\": \"{{personalID}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/details"
              },
              "response": []
            }
          ],
          "_postman_id": "d7707ae8-da2f-4fb3-a882-02d154310f2e",
          "_postman_isSubFolder": true
        },
        {
          "name": "003 - 003 - change phone negative",
          "item": [
            {
              "name": "001 - send sms changeNum empty",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "74a11d25-a621-4959-95ff-5e9f80446342",
                    "exec": [
                      "pm.collectionVariables.set(\"send_sms_type\", \"PHONE_CHANGE\")"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2729cd09-f8e1-442f-b8ef-81fafe1f0128",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "\tpm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Error message must contain text: \\\"Wrong phone. Must not be blank\\\"\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong phone. Must not be blank\")",
                      "});",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - change phone with less data than allowed\")",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "75bfa7e0-366d-4bae-a48c-bcd99bec35ab",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"countryCode\": \"996\",\n  \"otphash\": \"string\",\n  \"phone\": \"\",\n  \"smsType\": \"{{send_sms_type}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/send-sms",
                "description": "## Send SMS\n\n### Purpose\n\nThis request is used to generate OTP for the user.\n\nGenerated OTP is requested for:\n\n- Login (LOGIN)\n- Password reset (PASSWORD_RESET)\n- Phone change (PHONE_CHANGE)\n- Registration (REGISTRATION)\n\n### Parameters\n\n`send-sms` request needs four parameters:\n\n1. `countryCode` - is set to `996` to make process automation possible. Using '996' makes possible to use `123456` as OTP wherever it is required.\n2. `otphash` - we are passing any string here.\n3. `phone` - the value for this parameter is set in collection variables. For registration it is randomly generated. \n4. `smsType` - the value for this parameter is set in collection variables. Its default value is `REGISTRATION`. Its value is changed dynamically during the test run.\n\n\n\nAfter generating OTP, it must be verified by \n`verify-sms` request."
              },
              "response": []
            },
            {
              "name": "002 - change phone with less data than allowed",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "4179ad54-afa3-4bdf-9609-ada744389910",
                    "exec": [
                      "pm.collectionVariables.set(\"send_sms_type\", \"PHONE_CHANGE\")"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "78bd6ac0-0b4d-4195-9d4b-dba7b9615c31",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "\tpm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Error message must contain text: \\\"Wrong phone. Invalid format of phone\\\"\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong phone. Invalid format of phone\")",
                      " });",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - change phone with more data than allowed\")",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "583589f0-2e83-4229-96a0-9db51cc2c343",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"countryCode\": \"996\",\n  \"otphash\": \"string\",\n  \"phone\": \"1\",\n  \"smsType\": \"{{send_sms_type}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/send-sms",
                "description": "## Send SMS\n\n### Purpose\n\nThis request is used to generate OTP for the user.\n\nGenerated OTP is requested for:\n\n- Login (LOGIN)\n- Password reset (PASSWORD_RESET)\n- Phone change (PHONE_CHANGE)\n- Registration (REGISTRATION)\n\n### Parameters\n\n`send-sms` request needs four parameters:\n\n1. `countryCode` - is set to `996` to make process automation possible. Using '996' makes possible to use `123456` as OTP wherever it is required.\n2. `otphash` - we are passing any string here.\n3. `phone` - the value for this parameter is set in collection variables. For registration it is randomly generated. \n4. `smsType` - the value for this parameter is set in collection variables. Its default value is `REGISTRATION`. Its value is changed dynamically during the test run.\n\n\n\nAfter generating OTP, it must be verified by \n`verify-sms` request."
              },
              "response": []
            },
            {
              "name": "003 - change phone with more data than allowed",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "59992026-54a1-430e-adb3-b5a9f4cad04d",
                    "exec": [
                      "pm.collectionVariables.set(\"send_sms_type\", \"PHONE_CHANGE\")\r",
                      "\r",
                      "let maxumber = Math.round(Math.random() * (99999999999999999999 - 00000000000000000001) + 00000000000000000001)\r",
                      "pm.collectionVariables.set(\"maxNumber\", maxumber)"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "47bb9eb5-2fdd-4853-8574-1ab9f3fe8938",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "\tpm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Error message must contain text: \\\"Wrong phone. Invalid format of phone\\\"\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong phone. Invalid format of phone\")",
                      " });",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - change phone with incorect format data Copy\")",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "ca21e877-32fc-4719-be1d-d6b7bf7c5af3",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"countryCode\": \"996\",\n  \"otphash\": \"string\",\n  \"phone\": \"{{maxNumber}}\",\n  \"smsType\": \"{{send_sms_type}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/send-sms",
                "description": "## Send SMS\n\n### Purpose\n\nThis request is used to generate OTP for the user.\n\nGenerated OTP is requested for:\n\n- Login (LOGIN)\n- Password reset (PASSWORD_RESET)\n- Phone change (PHONE_CHANGE)\n- Registration (REGISTRATION)\n\n### Parameters\n\n`send-sms` request needs four parameters:\n\n1. `countryCode` - is set to `996` to make process automation possible. Using '996' makes possible to use `123456` as OTP wherever it is required.\n2. `otphash` - we are passing any string here.\n3. `phone` - the value for this parameter is set in collection variables. For registration it is randomly generated. \n4. `smsType` - the value for this parameter is set in collection variables. Its default value is `REGISTRATION`. Its value is changed dynamically during the test run.\n\n\n\nAfter generating OTP, it must be verified by \n`verify-sms` request."
              },
              "response": []
            },
            {
              "name": "004 - change phone with incorect format data Copy",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "65309be7-da7d-4d88-adde-7ba65bf54d0b",
                    "exec": [
                      "pm.collectionVariables.set(\"send_sms_type\", \"PHONE_CHANGE\")"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "41489fc7-f60a-41ce-89b8-7e0310430367",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "\tpm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Error message must contain text: \\\"Wrong phone. Invalid format of phone\\\"\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong phone. Invalid format of phone\")",
                      " });",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"005 - change phone with space\")",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "66b45734-5b59-4cb6-b6af-75cb2c0dd4e0",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"countryCode\": \"996\",\n  \"otphash\": \"string\",\n  \"phone\": \"test\",\n  \"smsType\": \"{{send_sms_type}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/send-sms",
                "description": "## Send SMS\n\n### Purpose\n\nThis request is used to generate OTP for the user.\n\nGenerated OTP is requested for:\n\n- Login (LOGIN)\n- Password reset (PASSWORD_RESET)\n- Phone change (PHONE_CHANGE)\n- Registration (REGISTRATION)\n\n### Parameters\n\n`send-sms` request needs four parameters:\n\n1. `countryCode` - is set to `996` to make process automation possible. Using '996' makes possible to use `123456` as OTP wherever it is required.\n2. `otphash` - we are passing any string here.\n3. `phone` - the value for this parameter is set in collection variables. For registration it is randomly generated. \n4. `smsType` - the value for this parameter is set in collection variables. Its default value is `REGISTRATION`. Its value is changed dynamically during the test run.\n\n\n\nAfter generating OTP, it must be verified by \n`verify-sms` request."
              },
              "response": []
            },
            {
              "name": "005 - change phone with space",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b01fa63a-8ffc-4c02-816d-95f862e3249c",
                    "exec": [
                      "pm.collectionVariables.set(\"send_sms_type\", \"PHONE_CHANGE\")"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "caba8398-c83c-4b36-bcd8-116708d99186",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "\tpm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Error message must contain text: \\\"Wrong phone\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong phone\")",
                      " });",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"006 - verify sms changeNum empty\")",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "b29a1ba1-5e6c-48c3-994d-aedd36233f70",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"countryCode\": \"996\",\n  \"otphash\": \"string\",\n  \"phone\": \"   \",\n  \"smsType\": \"{{send_sms_type}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/send-sms",
                "description": "## Send SMS\n\n### Purpose\n\nThis request is used to generate OTP for the user.\n\nGenerated OTP is requested for:\n\n- Login (LOGIN)\n- Password reset (PASSWORD_RESET)\n- Phone change (PHONE_CHANGE)\n- Registration (REGISTRATION)\n\n### Parameters\n\n`send-sms` request needs four parameters:\n\n1. `countryCode` - is set to `996` to make process automation possible. Using '996' makes possible to use `123456` as OTP wherever it is required.\n2. `otphash` - we are passing any string here.\n3. `phone` - the value for this parameter is set in collection variables. For registration it is randomly generated. \n4. `smsType` - the value for this parameter is set in collection variables. Its default value is `REGISTRATION`. Its value is changed dynamically during the test run.\n\n\n\nAfter generating OTP, it must be verified by \n`verify-sms` request."
              },
              "response": []
            },
            {
              "name": "006 - verify sms changeNum empty",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b29bee07-22a4-4c6b-bc45-7fbb1d8e71c7",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "\tpm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Error message must contain text: \\\"Wrong phone. Must not be blank\\\"\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong phone. Must not be blank\")",
                      "});",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"007 - send sms changeNum for wrong PhoneNumber\")",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "dc95e166-d6bd-4a34-a9a9-58d67c81472f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"code\": \"123456\",\n  \"countryCode\": \"996\",\n  \"phone\": \"\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/verify-sms",
                "description": "## Verify SMS\n\n### Purpose\n\nThis request is used to verify sent OTP and generate `SMSID`.\n\n### Parameters\n\n`verify-sms` request requires three parameters to pass:\n\n1. `code` - OTP code sent via `send-sms` request.\n2. `countryCode` - for what country it was sent. For us, it is `996`.\n3. `phone` - for what number OTP was generated for. The value of this parameter is from the collection variables.\n\n### Tests\n\nAfter the response is received\n\n-  `smsID` is set at collection variables.\n- The length of returned smsid is checked.\n- The next request is set from collection variables."
              },
              "response": []
            },
            {
              "name": "007 - send sms changeNum for wrong PhoneNumber",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "7aa59a9f-dbac-4c86-832c-1c772255b897",
                    "exec": [
                      "pm.collectionVariables.set(\"send_sms_type\", \"PHONE_CHANGE\")"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2dd8dd91-2ccf-4e58-9d3d-be36cbf60ecb",
                    "exec": [
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "\tpm.response.to.have.status(200);",
                      "});",
                      "",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"008 - verify sms changeNum wrong phone\")",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "618e9d5d-811e-47c4-9adf-36f59f0bbb72",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"countryCode\": \"996\",\n  \"otphash\": \"string\",\n  \"phone\": \"123456789\",\n  \"smsType\": \"{{send_sms_type}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/send-sms",
                "description": "## Send SMS\n\n### Purpose\n\nThis request is used to generate OTP for the user.\n\nGenerated OTP is requested for:\n\n- Login (LOGIN)\n- Password reset (PASSWORD_RESET)\n- Phone change (PHONE_CHANGE)\n- Registration (REGISTRATION)\n\n### Parameters\n\n`send-sms` request needs four parameters:\n\n1. `countryCode` - is set to `996` to make process automation possible. Using '996' makes possible to use `123456` as OTP wherever it is required.\n2. `otphash` - we are passing any string here.\n3. `phone` - the value for this parameter is set in collection variables. For registration it is randomly generated. \n4. `smsType` - the value for this parameter is set in collection variables. Its default value is `REGISTRATION`. Its value is changed dynamically during the test run.\n\n\n\nAfter generating OTP, it must be verified by \n`verify-sms` request."
              },
              "response": []
            },
            {
              "name": "008 - verify sms changeNum wrong phone",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1d523eb6-a0aa-4f01-b458-45399b371849",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 428\", function () {",
                      "\tpm.response.to.have.status(428);",
                      "});",
                      "",
                      "pm.test(\"Error message must contain text: \\\"428 PRECONDITION_REQUIRED \\\"SMS not send on phone 996595959695 \\\"\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"428 PRECONDITION_REQUIRED \\\"SMS not send on phone 996595959695 \")",
                      "});",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"009 - change phone with emoty field\")",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "126068d9-295b-437a-be12-fad1ad4f2764",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"code\": \"123456\",\n  \"countryCode\": \"996\",\n  \"phone\": \"595959695\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/auth/verify-sms",
                "description": "## Verify SMS\n\n### Purpose\n\nThis request is used to verify sent OTP and generate `SMSID`.\n\n### Parameters\n\n`verify-sms` request requires three parameters to pass:\n\n1. `code` - OTP code sent via `send-sms` request.\n2. `countryCode` - for what country it was sent. For us, it is `996`.\n3. `phone` - for what number OTP was generated for. The value of this parameter is from the collection variables.\n\n### Tests\n\nAfter the response is received\n\n-  `smsID` is set at collection variables.\n- The length of returned smsid is checked.\n- The next request is set from collection variables."
              },
              "response": []
            },
            {
              "name": "009 - change phone with emoty field",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2012502d-18b1-42cd-af23-fa7e5b60708b",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 400\", function () {",
                      "\tpm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Error message must contain text: \\\"Wrong userSMSid. Must not be blank\\\"\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong userSMSId\")",
                      "});",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"010 - change phone with wrong sms\")"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "11d39a4d-7a6c-474e-aec4-9577660eb22a",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "65032267-f562-48ff-9915-4f56db462c0e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"userSMSId\": \"\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/phone"
              },
              "response": []
            },
            {
              "name": "010 - change phone with wrong sms",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4028f91e-340f-4f34-b7ef-2b5447513e1b",
                    "exec": [
                      "let jsonData = pm.response.json();",
                      "",
                      "pm.test(\"Status code is 404\", function () {",
                      "\tpm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Error message must contain text: \\\"404 NOT_FOUND \\\"Sms not send with id 6559595 \\\"\", () => {",
                      "\tpm.expect(jsonData.message).to.contain(\"404 NOT_FOUND \\\"Sms not send with id 6559595 \\\"\")",
                      "});",
                      "",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - upload incorect format data .pdf\")"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1cb9e915-4d9c-4de6-abde-ee0b32043cf8",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "08d048ed-4e3e-4ecd-852e-f3b76b6e4daf",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"userSMSId\": \"6559595\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/phone"
              },
              "response": []
            }
          ],
          "_postman_id": "18971e74-19df-4923-a33d-5a659c9fd17c",
          "_postman_isSubFolder": true
        },
        {
          "name": "003 - 004 - upload image negative",
          "item": [
            {
              "name": "001 - upload incorect format data .pdf",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c890212c-df58-4147-8a50-682049d9a584",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 415\", function () {\r",
                      "\tpm.response.to.have.status(415);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Error message must contain text: UNSUPPORTED_MEDIA_TYPE\", () => {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"415 UNSUPPORTED_MEDIA_TYPE\")\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - upload incorect format data .mp4\")\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "a6f029a5-bc87-4357-b4d6-6288cc5cbd18",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "file",
                      "type": "file",
                      "src": "/C:/Users/levan/Downloads/RentalSummary-TestProperty-12-Jul-2021.pdf",
                      "disabled": true
                    },
                    {
                      "key": "file",
                      "type": "file",
                      "src": "Georbio.pdf"
                    }
                  ],
                  "options": {
                    "formdata": {}
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/image"
              },
              "response": []
            },
            {
              "name": "002 - upload incorect format data .mp4",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "42c69545-6d06-4002-aec6-9b20933f96c1",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 415\", function () {\r",
                      "\tpm.response.to.have.status(415);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Error message must contain text: UNSUPPORTED_MEDIA_TYPE\", () => {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"415 UNSUPPORTED_MEDIA_TYPE\")\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - upload incorect format data .docx\")\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "897f6645-4aca-4b90-8174-9a6ce75ffd9d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "file",
                      "type": "file",
                      "src": "/C:/Users/levan/Downloads/RentalSummary-TestProperty-12-Jul-2021.pdf",
                      "disabled": true
                    },
                    {
                      "key": "file",
                      "type": "file",
                      "src": "SampleVideo_1280x720_5mb.mp4"
                    }
                  ],
                  "options": {
                    "formdata": {}
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/image"
              },
              "response": []
            },
            {
              "name": "003 - upload incorect format data .docx",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "67e77dd3-d347-46bf-99e4-69afed74b102",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 415\", function () {\r",
                      "\tpm.response.to.have.status(415);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Error message must contain text: UNSUPPORTED_MEDIA_TYPE\", () => {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"415 UNSUPPORTED_MEDIA_TYPE\")\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - upload more than max size data\")\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "dc06737b-6b09-4d13-9281-4b110509a2c4",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "file",
                      "type": "file",
                      "src": "/C:/Users/levan/Downloads/RentalSummary-TestProperty-12-Jul-2021.pdf",
                      "disabled": true
                    },
                    {
                      "key": "file",
                      "type": "file",
                      "src": "MIDTERM.docx"
                    }
                  ],
                  "options": {
                    "formdata": {}
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/image"
              },
              "response": []
            },
            {
              "name": "004 - upload more than max size data",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b40d3f16-4fed-4052-a5a9-738fa20e4511",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 413\", function () {\r",
                      "\tpm.response.to.have.status(413);\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - click upload empty field\")\r",
                      "\r",
                      "pm.test(\"Error message must contain text: File size exceeds limit of -1 bytes\", () => {\r",
                      "\tpm.expect(jsonData.message).contain(\"File size exceeds limit of -1 bytes\")\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "259425cb-6e67-4434-81c3-7685130742f0",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "file",
                      "type": "file",
                      "src": "/E:/bandi/bandicam 2021-01-03 15-11-07-091.mp4",
                      "disabled": true
                    },
                    {
                      "key": "file",
                      "type": "file",
                      "src": "SampleJPGImage_10mbmb.jpg"
                    }
                  ],
                  "options": {
                    "formdata": {}
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/image"
              },
              "response": []
            },
            {
              "name": "005 - click upload empty field",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "39475054-39fc-4b3f-a8d2-5b8da7744250",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 415\", function () {\r",
                      "\tpm.response.to.have.status(415);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Error message must contain text: Content type '' not supported\", () => {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"Content type '' not supported\")\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - change Email without '@' symbol\")\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "ea617f03-96f1-4bc0-b5ac-74e91a7c56d1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "file",
                      "type": "file",
                      "value": null,
                      "disabled": true
                    }
                  ],
                  "options": {
                    "formdata": {}
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/image"
              },
              "response": []
            }
          ],
          "_postman_id": "533a4ce6-c1db-4d0a-ae92-7d83425f2eed",
          "_postman_isSubFolder": true
        },
        {
          "name": "003 - 005 - change Email negative",
          "item": [
            {
              "name": "001 - change Email without '@' symbol",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9f161eeb-9f8f-43bf-a9eb-4b48b8346a16",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Error message must contain text: \\\"Wrong email. Please provide a valid email address, Wrong email. Please provide a valid email address\\\"\", () => {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong email. Please provide a valid email address, Wrong email. Please provide a valid email address\")\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002- change Email empty field\")\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "39352aad-0344-4b8b-8c4d-acce43f7f25d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"email\": \"testmail.com\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/send-email"
              },
              "response": []
            },
            {
              "name": "002- change Email empty field",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1d64866a-3fe9-4636-b050-d1302c9537cd",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Wrong email. Must not be blank, Wrong email\", () => {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"Please provide a valid email address\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Wrong email. Must not be blank\", () => {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"Must not be blank\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - change Email without ' . '  symbol\")\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "71f31614-f8f1-4a0b-85ca-46201ae62a28",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"email\": \"\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/send-email"
              },
              "response": []
            },
            {
              "name": "003 - change Email without ' . '  symbol",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "31deab00-d5fa-4ac4-bec2-0cf2864c33fc",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Error message must contain text: \\\"Wrong email. Please provide a valid email address\\\"\", () => {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong email. Please provide a valid email address\")\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - addBlockedUser yourself\")\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "b76f0c95-e1e4-4cf7-8104-a317f606e807",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"email\": \"test@mailcom\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/send-email"
              },
              "response": []
            }
          ],
          "_postman_id": "dfa2ace4-d69d-4d1e-bf31-2cbbd562c1c4",
          "_postman_isSubFolder": true
        },
        {
          "name": "003 - 006 - add user in block list negative",
          "item": [
            {
              "name": "001 - addBlockedUser yourself",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ce9a4623-60ca-480e-9e3f-6d33e83b9a7d",
                    "exec": [
                      "pm.test(\"Status code is 406\", function () {\r",
                      "\tpm.response.to.have.status(406);\r",
                      "});\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Test user 406 NOT_ACCEPTABLE \\\"You can't blocked yourself!\\\"\", function () {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"406 NOT_ACCEPTABLE \\\"You can't blocked yourself!\\\"\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - addBlockedUser wrong Id\")\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "efe457fa-c18a-41f9-b3ab-a9eafcb3a9df",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}/common-service/api/v1/profile/block?userId={{loggedId}}",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "common-service",
                    "api",
                    "v1",
                    "profile",
                    "block"
                  ],
                  "query": [
                    {
                      "key": "userId",
                      "value": "{{loggedId}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "002 - addBlockedUser wrong Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "61161589-2544-4e39-bcc2-44fff4f958f5",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "\tpm.response.to.have.status(404);\r",
                      "});\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Test user 404 NOT_FOUND \\\"User with id 0 not found!\\\"\", function () {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"404 NOT_FOUND \\\"User with id 0 not found!\\\"\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - addBlockedUser empty\")\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "b5b51dcc-d016-4e5a-8c38-86116bf22d56",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}/common-service/api/v1/profile/block?userId=0",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "common-service",
                    "api",
                    "v1",
                    "profile",
                    "block"
                  ],
                  "query": [
                    {
                      "key": "userId",
                      "value": "0"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "003 - addBlockedUser empty",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7d4bc65-c94a-4427-b49a-1b8dc186e8fe",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Required Long parameter 'userId' is not present\", function () {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"Required Long parameter 'userId' is not present\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - addBlockedUser max\")\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "365ba216-2a91-413f-8ea3-b9728b74777f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "POST",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/common-service/api/v1/profile/block?userId",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "common-service",
                    "api",
                    "v1",
                    "profile",
                    "block"
                  ],
                  "query": [
                    {
                      "key": "userId",
                      "value": null
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "004 - addBlockedUser max",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e98b3a6b-5123-4272-9cc3-a6afe93a0f59",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Failed to convert value of type\", function () {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"Failed to convert value of type\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"005 - addBlockedUser space\")\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a59b0b87-1429-4f38-8fba-b794e866e992",
                    "exec": [
                      "let maxumber = Math.round(Math.random() * (99999999999999999999 - 00000000000000000001) + 00000000000000000001)\r",
                      "pm.collectionVariables.set(\"maxNumber\", maxumber)"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "64edd64f-70be-43bb-a7cc-0d885f34df26",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "POST",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/common-service/api/v1/profile/block?userId={{maxNumber}}",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "common-service",
                    "api",
                    "v1",
                    "profile",
                    "block"
                  ],
                  "query": [
                    {
                      "key": "userId",
                      "value": "{{maxNumber}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "005 - addBlockedUser space",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "65362a94-d2f9-4b8e-ad53-009063bc509a",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Required Long parameter 'userId' is not present\", function () {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"Required Long parameter 'userId' is not present\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"006 - addBlockedUser incorrect format\")\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "0aae6181-d86f-49c0-9e7d-c5e7a7c2904e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}/common-service/api/v1/profile/block?userId=   ",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "common-service",
                    "api",
                    "v1",
                    "profile",
                    "block"
                  ],
                  "query": [
                    {
                      "key": "userId",
                      "value": "   "
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "006 - addBlockedUser incorrect format",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d6725499-3490-4e24-a3bc-e058dadf8050",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Failed to convert value of type\", function () {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"Failed to convert value of type\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - profile details Update\")\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "7192a23e-0582-49d9-a4e8-0be1fd091fb5",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "POST",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/common-service/api/v1/profile/block?userId=test",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "common-service",
                    "api",
                    "v1",
                    "profile",
                    "block"
                  ],
                  "query": [
                    {
                      "key": "userId",
                      "value": "test"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "909a74f2-3ca9-44f1-b82e-615d0e864873",
          "_postman_isSubFolder": true
        },
        {
          "name": "002 - profile details Update",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b6e1753c-f6c7-427e-90b0-ca801e5b2980",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "\tpm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - change Email\")",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "80517564-8c86-4cd0-a72f-4e09678e697d",
                "exec": [
                  "let Ufname = pm.variables.replaceIn('{{$randomFirstName}}')\r",
                  "let Ulname = pm.variables.replaceIn('{{$randomLastName}}')\r",
                  "let personalId = Math.round(Math.random() * (99999999999 - 00000000001) + 00000000001)\r",
                  "function randomDate(start, end) { return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())); }\r",
                  "let birthdate = randomDate(new Date(1, 01, 2000), new Date()).toLocaleDateString()\r",
                  "pm.collectionVariables.set(\"fname\", Ufname)\r",
                  "pm.collectionVariables.set(\"lname\", Ulname)\r",
                  "pm.collectionVariables.set(\"personalID\", personalId)\r",
                  "pm.collectionVariables.set(\"birthDate\", \"1/11/1111\")"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "3820b36e-4b50-47c4-8fc1-a6a53b3bda80",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"birthdate\": \"{{birthDate}}\",\r\n  \"firstname\": \"{{fname}}\",\r\n  \"lastname\": \"{{lname}}\",\r\n  \"personalId\": \"{{personalID}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{base_url}}/common-service/api/v1/profile/details"
          },
          "response": []
        },
        {
          "name": "003 - change Email",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "f05a199f-221c-4848-8dbd-dc1eeb5833ea",
                "exec": [
                  "let mailName = pm.variables.replaceIn('{{$randomFirstName}}')\r",
                  "pm.collectionVariables.set(\"emailName\", mailName)\r",
                  "var mail = \"jgw8f.{{emailName}}@inbox.testmail.app\";\r",
                  "pm.collectionVariables.set(\"email\", mail)\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "7451681a-001a-4724-a196-ac43c4373ca4",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "\tpm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - change Email VerifySms\")\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "b65f0f18-2dc1-431c-8f01-0f0363f58ad8",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"email\": \"{{email}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{base_url}}/common-service/api/v1/profile/send-email"
          },
          "response": []
        },
        {
          "name": "004 - change Email VerifySms",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c2d8f232-379d-4ee3-85ac-50215f6ad6a5",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "\tpm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "let body = JSON.parse(responseBody)\r",
                  "\r",
                  "setTimeout(function(){}, 2000)\r",
                  "\r",
                  "if(body.count > 0){\r",
                  "    let verify = body.emails[0].html\r",
                  "\r",
                  "    let verifySMS = verify.substr(verify.length - 6)\r",
                  "\r",
                  "    pm.collectionVariables.set(\"mailVerificationCode\", verifySMS)\r",
                  "\r",
                  "    pm.collectionVariables.set(\"next_request_after_verify_sms\", \"005 - change Email verify-email\")\r",
                  "    \r",
                  "}else{\r",
                  "    setTimeout(function(){}, 2000)\r",
                  "    postman.setNextRequest(\"004 - change Email VerifySms\")\r",
                  "}\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "cc00561d-8329-4151-90da-e122c4862daf",
                "exec": [
                  "setTimeout(function(){}, 2000)"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "f530c7a5-5d41-486b-a98a-a8ae3a5d5e23",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "Bearer 534e376a-2568-4450-95f5-c29da838575b"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://api.testmail.app/api/json?apikey=534e376a-2568-4450-95f5-c29da838575b&namespace=jgw8f&pretty=true&tag={{emailName}}&limit=1",
              "protocol": "https",
              "host": [
                "api",
                "testmail",
                "app"
              ],
              "path": [
                "api",
                "json"
              ],
              "query": [
                {
                  "key": "apikey",
                  "value": "534e376a-2568-4450-95f5-c29da838575b"
                },
                {
                  "key": "namespace",
                  "value": "jgw8f"
                },
                {
                  "key": "pretty",
                  "value": "true"
                },
                {
                  "key": "tag",
                  "value": "{{emailName}}"
                },
                {
                  "key": "limit",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "005 - change Email verify-email",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ac5761a3-47de-4c92-8d6e-56315625489a",
                "exec": [
                  "pm.test(\"Status code is 202\", function () {\r",
                  "    pm.response.to.have.status(202);\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"005 - change Email already registered\")\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "b997e1bf-eaf3-44f5-8053-11077dde217b",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "71492f33-e0b6-42d0-9448-3536a7b6cfb6",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"code\": \"{{mailVerificationCode}}\",\r\n  \"email\": \"jgw8f.{{emailName}}@inbox.testmail.app\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{base_url}}/common-service/api/v1/profile/verify-email"
          },
          "response": []
        },
        {
          "name": "005 - change Email already registered",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2ef3f34e-9b93-4ac2-b821-d216dcfce64c",
                "exec": [
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 409\", function () {\r",
                  "\tpm.response.to.have.status(409);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Error message must contain text: \\\"409 CONFLICT \\\"User with email already exist!\\\"\\\"\", () => {\r",
                  "\tpm.expect(jsonData.message).to.contains(\"409 CONFLICT \")\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"006 - send sms changeNum\")\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "58c655e5-459f-4771-8acf-854f26811611",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"email\": \"jgw8f.{{emailName}}@inbox.testmail.app\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{base_url}}/common-service/api/v1/profile/send-email"
          },
          "response": []
        },
        {
          "name": "006 - send sms changeNum",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "9debcb6f-826f-4231-86a9-251a2151beeb",
                "exec": [
                  "let updatedNumber = Math.round(Math.random() * (999999999 - 000000001) + 000000001)",
                  "pm.collectionVariables.set(\"updatedRegNumber\", updatedNumber)",
                  "pm.collectionVariables.set(\"send_sms_type\", \"PHONE_CHANGE\")"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e3789888-b9be-4368-bf4e-74b82b82ab82",
                "exec": [
                  "pm.test(\"Status is 201\", () => {",
                  "\tpm.expect(\"Status code is 201\", () => {",
                  "\t\tpm.response.to.have.status(201);",
                  "\t});",
                  "});",
                  "",
                  "pm.collectionVariables.set(\"send_sms_type\", \"LOGIN\")",
                  "",
                  "",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"007 - verify sms changeNum\")",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "ed608e0b-52c5-4e19-b99d-ee549a828475",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"countryCode\": \"996\",\n  \"otphash\": \"string\",\n  \"phone\": \"{{updatedRegNumber}}\",\n  \"smsType\": \"{{send_sms_type}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{base_url}}/common-service/api/v1/auth/send-sms",
            "description": "## Send SMS\n\n### Purpose\n\nThis request is used to generate OTP for the user.\n\nGenerated OTP is requested for:\n\n- Login (LOGIN)\n- Password reset (PASSWORD_RESET)\n- Phone change (PHONE_CHANGE)\n- Registration (REGISTRATION)\n\n### Parameters\n\n`send-sms` request needs four parameters:\n\n1. `countryCode` - is set to `996` to make process automation possible. Using '996' makes possible to use `123456` as OTP wherever it is required.\n2. `otphash` - we are passing any string here.\n3. `phone` - the value for this parameter is set in collection variables. For registration it is randomly generated. \n4. `smsType` - the value for this parameter is set in collection variables. Its default value is `REGISTRATION`. Its value is changed dynamically during the test run.\n\n\n\nAfter generating OTP, it must be verified by \n`verify-sms` request."
          },
          "response": []
        },
        {
          "name": "007 - verify sms changeNum",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "194eafb3-bde3-4f0e-81f3-35b675d634f3",
                "exec": [
                  "pm.test(\"Status is 202\", () => {",
                  "\tpm.expect(\"Status code is 202\", () => {",
                  "\t\tpm.response.to.have.status(202);",
                  "\t});",
                  "});",
                  "",
                  "// Get smsID from response",
                  "let smsID = responseBody",
                  "",
                  "// Set smsID in collection variables",
                  "pm.collectionVariables.set(\"smsID\", smsID)",
                  "",
                  "// Check smsID length to be 36 symbols",
                  "pm.test(\"Test smsID length is 36\", function(){",
                  "\tpm.expect(smsID.length).to.be.equal(36)",
                  "});",
                  "",
                  "",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"008 - change phone number\")",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "c8d0e757-75eb-4642-b719-c84ec0503f33",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"code\": \"123456\",\n  \"countryCode\": \"996\",\n  \"phone\": \"{{updatedRegNumber}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{base_url}}/common-service/api/v1/auth/verify-sms",
            "description": "## Verify SMS\n\n### Purpose\n\nThis request is used to verify sent OTP and generate `SMSID`.\n\n### Parameters\n\n`verify-sms` request requires three parameters to pass:\n\n1. `code` - OTP code sent via `send-sms` request.\n2. `countryCode` - for what country it was sent. For us, it is `996`.\n3. `phone` - for what number OTP was generated for. The value of this parameter is from the collection variables.\n\n### Tests\n\nAfter the response is received\n\n-  `smsID` is set at collection variables.\n- The length of returned smsid is checked.\n- The next request is set from collection variables."
          },
          "response": []
        },
        {
          "name": "008 - change phone number",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "85a04416-db99-4a2a-8a19-825c60c5462f",
                "exec": [
                  "pm.test(\"Status code is 205\", function () {\r",
                  "\tpm.response.to.have.status(205);\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"009 - profile details Updated\")\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "3e9ed7d0-500a-4516-9faf-4c81df70e6fc",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "4c4a8416-ad7d-4193-816a-7f6701863b0c",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"userSMSId\": \"{{smsID}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{base_url}}/common-service/api/v1/profile/phone"
          },
          "response": []
        },
        {
          "name": "009 - profile details Updated",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "abc83698-7d6a-4ac0-9e3d-3f8232277228",
                "exec": [
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "c_fname = pm.collectionVariables.get(\"fname\")\r",
                  "c_lname = pm.collectionVariables.get(\"lname\")\r",
                  "//c_birthdate = pm.collectionVariables.get(\"birthDate\")\r",
                  "c_personalId = pm.collectionVariables.get(\"personalID\").toString();\r",
                  "c_email = pm.collectionVariables.get(\"emailName\")\r",
                  "c_phone = pm.collectionVariables.get(\"updatedRegNumber\").toString();\r",
                  "\r",
                  "let fname = jsonData.firstname\r",
                  "let lname = jsonData.lastname\r",
                  "let birthdate = jsonData.birthdate\r",
                  "let personalId = jsonData.personalId\r",
                  "let email = jsonData.email\r",
                  "let phone = jsonData.phoneNumber\r",
                  "\r",
                  "const schema = {\r",
                  "\t\"type\": \"object\",\r",
                  "\t\"properties\": {\r",
                  "\t\t\"firstname\":{\r",
                  "\t\t\t\"type\": \"string\"\r",
                  "\t\t},\r",
                  "\t\t\"lastname\":{\r",
                  "\t\t\t\"type\": \"string\"\r",
                  "\t\t},\r",
                  "\t\t\"birthdate\":{\r",
                  "\t\t\t\"type\": \"string\"\r",
                  "\t\t},\r",
                  "\t\t\"personalId\":{\r",
                  "\t\t\t\"type\": \"string\"\r",
                  "\t\t},\r",
                  "\t\t\"email\":{\r",
                  "\t\t\t\"type\": \"string\"\r",
                  "\t\t},\r",
                  "\t\t\"phone\":{\r",
                  "\t\t\t\"type\": \"string\"\r",
                  "\t\t}\r",
                  "\t}\r",
                  "}\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"010 - upload image\")\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validating schema\", () => {\r",
                  "\tpm.response.to.have.jsonSchema(schema)\r",
                  "})\r",
                  "pm.test(\"Test user first name\", function () {\r",
                  "\tpm.expect(fname).to.eql(c_fname);\r",
                  "});\r",
                  "pm.test(\"Test user last name\", function () {\r",
                  "\tpm.expect(lname).to.eql(c_lname);\r",
                  "});pm.test(\"Test user birthDate\", function () {\r",
                  "\tpm.expect(birthdate).to.eql(\"1111-11-01\");\r",
                  "});\r",
                  "pm.test(\"Test user personalId\", function () {\r",
                  "\tpm.expect(personalId).to.eql(c_personalId)\r",
                  "});\r",
                  "pm.test(\"Test user email\", function () {\r",
                  "\tpm.expect(email).to.contain(c_email);\r",
                  "});\r",
                  "pm.test(\"Test user phone\", function () {\r",
                  "\tpm.expect(phone).to.eql(c_phone);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "abfae0d5-5ea9-42d7-8c9e-ec14f534362e",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "8eb6a982-e96d-40e6-b293-9d33902af0c1",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{base_url}}/common-service/api/v1/profile/details"
          },
          "response": []
        },
        {
          "name": "010 - upload image",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4bd54520-5c71-4ad8-abb0-c2cae0d5f435",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "\tpm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"011 - addBlockedUser\")\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "4148295a-441c-45f1-92ef-890b12d6e236",
                "exec": [
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "811093ec-db80-4a08-9d2c-32fba8084284",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "/C:/Users/levan/OneDrive/Desktop/image.jpeg",
                  "disabled": true
                },
                {
                  "key": "file",
                  "type": "file",
                  "src": "IMG_20211206_120819.png"
                }
              ],
              "options": {
                "formdata": {}
              }
            },
            "url": "{{base_url}}/common-service/api/v1/profile/image"
          },
          "response": []
        },
        {
          "name": "011 - get uploaded img",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f9e1cf26-e1cd-450f-9c59-d2572b7d3bd1",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "\tpm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"012 - addBlockedUser\")\r",
                  "\r",
                  "c_fname = pm.collectionVariables.get(\"fname\")\r",
                  "c_loggedId = pm.collectionVariables.get(\"loggedId\")\r",
                  "\r",
                  "let loggedId = jsonData.id\r",
                  "let profileImage = jsonData.profileImage\r",
                  "\r",
                  "pm.test(\"Test user  profileImage\", function () {\r",
                  "\tpm.expect(loggedId).to.eql(c_loggedId);\r",
                  "});\r",
                  "pm.test(\"Test user  profileImage\", function () {\r",
                  "\tpm.expect(profileImage).to.contain(\"profile-images\");\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "b86a8eab-6761-441d-88e4-01dba7fe763e",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/common-service/api/v1/profile"
          },
          "response": []
        },
        {
          "name": "012 - addBlockedUser",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "34dfd683-5732-440f-8336-5add7341fd1a",
                "exec": [
                  "pm.test(\"Status code is 205\", function () {\r",
                  "\tpm.response.to.have.status(205);\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"012 - addBlockedUser yourself\")\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "0d9e9600-692e-443b-a439-1684f1c1e1ec",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/common-service/api/v1/profile/block?userId=155",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "common-service",
                "api",
                "v1",
                "profile",
                "block"
              ],
              "query": [
                {
                  "key": "userId",
                  "value": "155"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "013 - getBlockedUser",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f5c6b2d4-6e32-49ed-ab1e-2157a214d1e6",
                "exec": [
                  "let jsonData = pm.response.json()[0];\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "\tpm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "let id = jsonData.id\r",
                  "let fname = jsonData.firstname\r",
                  "let lname = jsonData.lastname\r",
                  "\r",
                  "const schema = {\r",
                  "\t\"type\": \"array\",\r",
                  "\t\"properties\": {\r",
                  "\t\t\"id\":{\r",
                  "\t\t\t\"type\": \"number\"\r",
                  "\t\t},\r",
                  "\t\t\"firstname\":{\r",
                  "\t\t\t\"type\": \"string\"\r",
                  "\t\t},\r",
                  "\t\t\"lastname\":{\r",
                  "\t\t\t\"type\": \"string\"\r",
                  "\t\t},\r",
                  "\t\t\"profileImage\":{\r",
                  "\t\t\t\"type\": \"string\"\r",
                  "\t\t}\r",
                  "\t}\r",
                  "}\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"014 - unblockUser\")\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validating schema\", () => {\r",
                  "\tpm.response.to.have.jsonSchema(schema)\r",
                  "})\r",
                  "pm.test(\"Test user id\", function () {\r",
                  "\tpm.expect(id).to.eql(155);\r",
                  "});\r",
                  "pm.test(\"Test user firstname\", function () {\r",
                  "\tpm.expect(fname).to.eql(\"Caleb\");\r",
                  "    \r",
                  "});pm.test(\"Test user lastname\", function () {\r",
                  "\tpm.expect(lname).to.eql(\"Donnelly\");\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "f5f8e1fa-2dce-457c-88d9-d04d8a611fc3",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{base_url}}/common-service/api/v1/profile/blocked-users"
          },
          "response": []
        },
        {
          "name": "014 - unblockUser",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "95e39bba-1c64-4c1d-a9e8-c7274e647ca1",
                "exec": [
                  "pm.test(\"Status code is 205\", function () {\r",
                  "\tpm.response.to.have.status(205);\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"015 - getBlockedUser after unblock\")\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "3aa7f491-9d08-49e8-a100-11463af513bb",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/common-service/api/v1/profile/unblock?userId=155",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "common-service",
                "api",
                "v1",
                "profile",
                "unblock"
              ],
              "query": [
                {
                  "key": "userId",
                  "value": "155"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "015 - getBlockedUser after unblock",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "633a31c0-4a3b-461a-a119-f615434f15f0",
                "exec": [
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "\tpm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"data is null\", function () {\r",
                  "\tpm.expect(jsonData.length).to.eql(0);\r",
                  "});\r",
                  "\r",
                  "const schema = {\r",
                  "\t\"type\": \"array\"\r",
                  "}\r",
                  "\r",
                  "pm.test(\"Validating schema\", () => {\r",
                  "\tpm.response.to.have.jsonSchema(schema)\r",
                  "})\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - add merchant empty categoryID\")\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "9bdb6e83-0ba3-4597-ad38-5c7f8d66a422",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/common-service/api/v1/profile/blocked-users"
          },
          "response": []
        }
      ],
      "_postman_id": "a8cfaf03-589d-43af-90a0-778543e9a952"
    },
    {
      "name": "004 - merchant - branches",
      "item": [
        {
          "name": "004 - 002 - add/update/delete  merchant negative",
          "item": [
            {
              "name": "002 - add merchant empty categoryID",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "732ec3ba-2f39-4065-a1b9-468be74cbcd0",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Test Wrong categoryId. Must not be null\", function(){\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"Wrong categoryId. Must not be null\")\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - add merchant wrong categoryID\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "0b9a4fc7-b01f-4988-8c2a-70509dfefcbb",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"categoryId\": \"\",\r\n  \"name\": \"1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/merchant"
              },
              "response": []
            },
            {
              "name": "003 - add merchant wrong categoryID",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "be26434b-de7d-4919-9a2d-95d6ff2a3634",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "\tpm.response.to.have.status(404);\r",
                      "});\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Test 404 NOT_FOUND \\\"Category with given id not found\\\"\", function(){\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"404 NOT_FOUND \\\"Category with given id not found\\\"\")\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - add merchant incorect format categoryID\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "5409f4d5-fac7-4168-b110-d149ffc55cc7",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"categoryId\": -1,\r\n  \"name\": \"test\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/merchant"
              },
              "response": []
            },
            {
              "name": "004 - add merchant incorect format categoryID",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8d66dafd-1ecd-4a98-89ac-fe03f4bb537d",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Test test can't be parsed to Long.\", function(){\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"test can't be parsed to Long.\")\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"005 - add merchant max categoryID\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "2f2eb643-3f3a-4854-9dce-38b7d9a5b9cd",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"categoryId\": \"test\",\r\n  \"name\": \"test\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/merchant"
              },
              "response": []
            },
            {
              "name": "005 - add merchant max categoryID",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2e9ad96b-859f-418a-9fd6-ad79afed0bf6",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Test can't be parsed to Long.\", function(){\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"can't be parsed to Long.\")\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"006 - update merchant max  merchID\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "978ad6ca-4f30-4303-a15d-32a484c4baff",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"categoryId\": \"{{maxNumber}}\",\r\n  \"name\": \"test\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/merchant"
              },
              "response": []
            },
            {
              "name": "006 - update merchant max  merchID",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9d3a543a-c554-499e-8fe9-96db21db8326",
                    "exec": [
                      "//let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"008 - update merchant max  categoryID\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "19cf24b3-334d-4051-a58f-09080141a243",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"cashBack\": 1,\r\n  \"categoryId\": 1,\r\n  \"name\": \"test\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/merchant/{{maxNumber}}"
              },
              "response": []
            },
            {
              "name": "008 - update merchant max  categoryID",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "951bb687-8e6e-4ae5-bd9f-0029fd3f8f85",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Test JSON parse error: Numeric value\", function(){\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"JSON parse error: Numeric value\")\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"009 - update merchant wrong  merchID\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "9e96a25f-0d88-4ce7-aae2-946c3ba6ef61",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"cashBack\": 1,\r\n  \"categoryId\": {{maxNumber}},\r\n  \"name\": \"test\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/merchant/5"
              },
              "response": []
            },
            {
              "name": "009 - update merchant wrong  merchID",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "038eaf44-fefe-49e5-a4e9-ffb1c32a6823",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "\tpm.response.to.have.status(404);\r",
                      "});\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"404 NOT_FOUND \\\"merchant with given id not found\\\"\", function(){\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"404 NOT_FOUND \\\"merchant with given id not found\\\"\")\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"011 - update merchant incorrect  format categoryID\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "06dc43d9-f8be-4016-8307-6b2811a5a7fe",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"cashBack\": 1,\r\n  \"categoryId\": 1,\r\n  \"name\": \"test\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/merchant/-1"
              },
              "response": []
            },
            {
              "name": "011 - update merchant incorrect  format categoryID",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bf159eaf-8f81-455f-9a6b-fc704f7a3082",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Test test can't be parsed to Long.\", function(){\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"test can't be parsed to Long.\")\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"012 - update merchant incorrect  format cashBack\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "941a86d9-af60-45e0-b6c6-db3daeef4f3f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"cashBack\": 1,\r\n  \"categoryId\": \"test\",\r\n  \"name\": \"test\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/merchant/5"
              },
              "response": []
            },
            {
              "name": "012 - update merchant incorrect  format cashBack",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9cc5d434-17bf-4889-acd1-052cae6b57e6",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Test test can't be parsed to Double.\", function(){\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"test can't be parsed to Double.\")\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"013 - update merchant incorrect  format merchID\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "68d68a3b-3b59-4c68-8ffc-60f16379bb58",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"cashBack\": \"test\",\r\n  \"categoryId\": 1,\r\n  \"name\": \"test\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/merchant/5"
              },
              "response": []
            },
            {
              "name": "013 - update merchant incorrect  format merchID",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8ccde73f-5245-43d8-a779-bdc8a65c44cb",
                    "exec": [
                      "//let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"014 - delete merchant max parameter\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "e35b0e27-7d21-4af7-94e9-5d0fd2341cca",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"cashBack\": 1,\r\n  \"categoryId\": 1,\r\n  \"name\": \"test\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/merchant/test"
              },
              "response": []
            },
            {
              "name": "014 - delete merchant max parameter",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3fa41ae6-5f2b-4cc4-9117-bb4dd335846e",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Failed to convert value of type\", function(){\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"Failed to convert value of type\")\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"015 - delete merchant wrong parameter\")\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "04ee267c-ae3c-4c78-9b8b-9d2b1393f814",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": "{{base_url}}/common-service/api/v1/merchant/{{maxNumber}}"
              },
              "response": []
            },
            {
              "name": "015 - delete merchant wrong parameter",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22183a26-3b58-4059-a66c-e9d1440ce0f4",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "\tpm.response.to.have.status(404);\r",
                      "});\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Test 404 NOT_FOUND \\\"merchant with given id not found\\\"\", function(){\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"404 NOT_FOUND \\\"merchant with given id not found\\\"\")\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"017 - delete merchant incorrect format parameter\")\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "5c01f314-0ea1-4fad-80aa-934d20d71258",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": "{{base_url}}/common-service/api/v1/merchant/-1"
              },
              "response": []
            },
            {
              "name": "017 - delete merchant incorrect format parameter",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "abb4b0a3-3455-4cdf-9050-3795e8e48633",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Failed to convert value of type\", function(){\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"Failed to convert value of type\")\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - add branch max longitude\")\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "d8516348-053f-41f2-bbd4-ee490177744f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": "{{base_url}}/common-service/api/v1/merchant/test"
              },
              "response": []
            }
          ],
          "_postman_id": "09d2f6ee-421c-434b-b7a3-eae52ef1c450",
          "_postman_isSubFolder": true
        },
        {
          "name": "004 - 003 - add/update/delete branch negative",
          "item": [
            {
              "name": "003 - add branch max longitude",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cdea2536-7860-44de-b3ea-46e7234517e3",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"JSON parse error\", () => {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"JSON parse error: Unrecognized token\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - add branch max latitude\")"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "7d41d862-771a-43d1-881a-8aac9773c7a4",
                    "exec": [
                      "let bname = pm.variables.replaceIn('{{$randomWord}}')\r",
                      "pm.collectionVariables.set(\"branchName\", bname)\r",
                      "let Lat = pm.variables.replaceIn('{{$randomLatitude}}')\r",
                      "pm.collectionVariables.set(\"latitude\", Lat)\r",
                      "let Long = pm.variables.replaceIn('{{$randomLongitude}}')\r",
                      "pm.collectionVariables.set(\"longitude\", Long)\r",
                      "let addres = pm.variables.replaceIn('{{$randomCity}}')\r",
                      "pm.collectionVariables.set(\"address\", addres)"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "34ea2989-5182-4b55-a8f6-9d592c9a2f13",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"cashBack\": 5,\r\n  \"latitude\": {{latitude}},\r\n  \"longitude\": {{refresh_token}},\r\n  \"merchantId\": 5,\r\n  \"name\": \"{{branchName}}\",\r\n  \"address\": \"{{address}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/branch"
              },
              "response": []
            },
            {
              "name": "004 - add branch max latitude",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22358e4a-354b-45f7-8aa1-3af1d2b77805",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"JSON parse error\", () => {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"JSON parse error: Unrecognized token\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"005 - add branch max merchantID\")"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "636eb056-3328-4161-949e-f3b718a3f249",
                    "exec": [
                      "let bname = pm.variables.replaceIn('{{$randomWord}}')\r",
                      "pm.collectionVariables.set(\"branchName\", bname)\r",
                      "let Lat = pm.variables.replaceIn('{{$randomLatitude}}')\r",
                      "pm.collectionVariables.set(\"latitude\", Lat)\r",
                      "let Long = pm.variables.replaceIn('{{$randomLongitude}}')\r",
                      "pm.collectionVariables.set(\"longitude\", Long)\r",
                      "let addres = pm.variables.replaceIn('{{$randomCity}}')\r",
                      "pm.collectionVariables.set(\"address\", addres)"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "fb74cef0-fb8c-44c4-8bb0-c8169adc1df3",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"cashBack\": 5,\r\n  \"latitude\": {{refresh_token}},\r\n  \"longitude\": {{longitude}},\r\n  \"merchantId\": 5,\r\n  \"name\": \"{{branchName}}\",\r\n  \"address\": \"{{address}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/branch"
              },
              "response": []
            },
            {
              "name": "005 - add branch max merchantID",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5bf47b2c-dbc7-4e64-9835-49320a3e8719",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"JSON parse error\", () => {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"JSON parse error: Numeric value\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"006 - add branch wrong merchantID\")"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "fd15d3ef-9479-4deb-aed4-8dfbac7429b8",
                    "exec": [
                      "let bname = pm.variables.replaceIn('{{$randomWord}}')\r",
                      "pm.collectionVariables.set(\"branchName\", bname)\r",
                      "let Lat = pm.variables.replaceIn('{{$randomLatitude}}')\r",
                      "pm.collectionVariables.set(\"latitude\", Lat)\r",
                      "let Long = pm.variables.replaceIn('{{$randomLongitude}}')\r",
                      "pm.collectionVariables.set(\"longitude\", Long)\r",
                      "let addres = pm.variables.replaceIn('{{$randomCity}}')\r",
                      "pm.collectionVariables.set(\"address\", addres)"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "109a5749-0804-433b-b07c-4ee42a9d8a40",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"cashBack\": 5,\r\n  \"latitude\": {{latitude}},\r\n  \"longitude\": {{longitude}},\r\n  \"merchantId\": {{maxNumber}},\r\n  \"name\": \"{{branchName}}\",\r\n  \"address\": \"{{address}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/branch"
              },
              "response": []
            },
            {
              "name": "006 - add branch wrong merchantID",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b3a56cd5-ab99-4555-b345-29d29c62f359",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 404\", function () {\r",
                      "\tpm.response.to.have.status(404);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"404 NOT_FOUND \\\"merchant with given id not found\\\"\", () => {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"404 NOT_FOUND \\\"merchant with given id not found\\\"\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"007 - add branch empty merchID\")"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9b180a0a-5207-4e9c-a348-327c6ece813c",
                    "exec": [
                      "let bname = pm.variables.replaceIn('{{$randomWord}}')\r",
                      "pm.collectionVariables.set(\"branchName\", bname)\r",
                      "let Lat = pm.variables.replaceIn('{{$randomLatitude}}')\r",
                      "pm.collectionVariables.set(\"latitude\", Lat)\r",
                      "let Long = pm.variables.replaceIn('{{$randomLongitude}}')\r",
                      "pm.collectionVariables.set(\"longitude\", Long)\r",
                      "let addres = pm.variables.replaceIn('{{$randomCity}}')\r",
                      "pm.collectionVariables.set(\"address\", addres)"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "f8232f20-4371-489f-80f8-3a1b8d35d3d7",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"cashBack\": 5,\r\n  \"latitude\": {{latitude}},\r\n  \"longitude\": {{longitude}},\r\n  \"merchantId\": -1,\r\n  \"name\": \"{{branchName}}\",\r\n  \"address\": \"{{address}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/branch"
              },
              "response": []
            },
            {
              "name": "007 - add branch empty merchID",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cbfd0759-9fb1-460f-8400-71d518ce91b3",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"[Wrong merchantId. Must not be null]\", () => {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"[Wrong merchantId. Must not be null]\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"008 - add branch empty longitude\")"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b15845fc-7dba-412d-9a3e-96344727352f",
                    "exec": [
                      "let bname = pm.variables.replaceIn('{{$randomWord}}')\r",
                      "pm.collectionVariables.set(\"branchName\", bname)\r",
                      "let Lat = pm.variables.replaceIn('{{$randomLatitude}}')\r",
                      "pm.collectionVariables.set(\"latitude\", Lat)\r",
                      "let Long = pm.variables.replaceIn('{{$randomLongitude}}')\r",
                      "pm.collectionVariables.set(\"longitude\", Long)\r",
                      "let addres = pm.variables.replaceIn('{{$randomCity}}')\r",
                      "pm.collectionVariables.set(\"address\", addres)"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "f5a677a1-a350-4bc1-82c5-318ae9c0ab77",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"cashBack\": 5,\r\n  \"latitude\": {{latitude}},\r\n  \"longitude\": {{longitude}},\r\n  \"merchantId\": \"\",\r\n  \"name\": \"{{branchName}}\",\r\n  \"address\": \"{{address}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/branch"
              },
              "response": []
            },
            {
              "name": "008 - add branch empty longitude",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f3fec586-f627-45d6-bc60-a0bd98bf4c12",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"[Wrong longitude. Must not be null]\", () => {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"[Wrong longitude. Must not be null]\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"009 - add branch empty latitude\")"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b0d52c0b-1432-4455-bfaf-568991b872a7",
                    "exec": [
                      "let bname = pm.variables.replaceIn('{{$randomWord}}')\r",
                      "pm.collectionVariables.set(\"branchName\", bname)\r",
                      "let Lat = pm.variables.replaceIn('{{$randomLatitude}}')\r",
                      "pm.collectionVariables.set(\"latitude\", Lat)\r",
                      "let Long = pm.variables.replaceIn('{{$randomLongitude}}')\r",
                      "pm.collectionVariables.set(\"longitude\", Long)\r",
                      "let addres = pm.variables.replaceIn('{{$randomCity}}')\r",
                      "pm.collectionVariables.set(\"address\", addres)"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "1a3b9d0a-4bc8-470f-9bfe-d06ef2457b53",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"cashBack\": 5,\r\n  \"latitude\": {{latitude}},\r\n  \"longitude\": \"\",\r\n  \"merchantId\": 5,\r\n  \"name\": \"{{branchName}}\",\r\n  \"address\": \"{{address}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/branch"
              },
              "response": []
            },
            {
              "name": "009 - add branch empty latitude",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7f37b3f8-2f9e-416e-9d21-23d7a3a299ce",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"[Wrong latitude. Must not be null]\", () => {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"[Wrong latitude. Must not be null]\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"010 - add branch empty adress\")"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e19cc192-8ddb-4b37-8b32-a08597dd6782",
                    "exec": [
                      "let bname = pm.variables.replaceIn('{{$randomWord}}')\r",
                      "pm.collectionVariables.set(\"branchName\", bname)\r",
                      "let digit = pm.variables.replaceIn('{{$randomdigit}}')\r",
                      "pm.collectionVariables.set(\"branchName\", bname)\r",
                      "let Lat = pm.variables.replaceIn('{{$randomLatitude}}')\r",
                      "pm.collectionVariables.set(\"latitude\", Lat)\r",
                      "let Long = pm.variables.replaceIn('{{$randomLongitude}}')\r",
                      "pm.collectionVariables.set(\"longitude\", Long)\r",
                      "let addres = pm.variables.replaceIn('{{$randomCity}}')\r",
                      "pm.collectionVariables.set(\"address\", addres)"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "24d7922c-6fa4-4122-b552-f2af33afd094",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"cashBack\": 5,\r\n  \"latitude\": \"\",\r\n  \"longitude\": {{longitude}},\r\n  \"merchantId\": 5,\r\n  \"name\": \"{{branchName}}\",\r\n  \"address\": \"{{address}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/branch"
              },
              "response": []
            },
            {
              "name": "010 - add branch empty adress",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fbbb537c-a07f-4a41-b18b-35a5200a2a2d",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"[Wrong address. Length must be between 1 and 2147483647]\", () => {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"[Wrong address. Length must be between 1 and 2147483647]\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"011 - add branch space latitude\")"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "11233d55-bc22-4fb2-8d8c-59d482e37fe5",
                    "exec": [
                      "let bname = pm.variables.replaceIn('{{$randomWord}}')\r",
                      "pm.collectionVariables.set(\"branchName\", bname)\r",
                      "let digit = pm.variables.replaceIn('{{$randomdigit}}')\r",
                      "pm.collectionVariables.set(\"branchName\", bname)\r",
                      "let Lat = pm.variables.replaceIn('{{$randomLatitude}}')\r",
                      "pm.collectionVariables.set(\"latitude\", Lat)\r",
                      "let Long = pm.variables.replaceIn('{{$randomLongitude}}')\r",
                      "pm.collectionVariables.set(\"longitude\", Long)\r",
                      "let addres = pm.variables.replaceIn('{{$randomCity}}')\r",
                      "pm.collectionVariables.set(\"address\", addres)"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "3f3e82bb-af3d-4039-91e1-d920bf1ed9fd",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"cashBack\": 5,\r\n  \"latitude\": {{latitude}},\r\n  \"longitude\": {{longitude}},\r\n  \"merchantId\": 5,\r\n  \"name\": \"{{branchName}}\",\r\n  \"address\": \"\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/branch"
              },
              "response": []
            },
            {
              "name": "011 - add branch space latitude",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "582c9f75-c2ad-496d-a98e-fad83cf371ee",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"[Wrong latitude. Must not be null]\", () => {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"[Wrong latitude. Must not be null]\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"012 - add branch space longitude\")"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "11ba06aa-71fc-4389-ab97-5f4dd5257733",
                    "exec": [
                      "let bname = pm.variables.replaceIn('{{$randomWord}}')\r",
                      "pm.collectionVariables.set(\"branchName\", bname)\r",
                      "let digit = pm.variables.replaceIn('{{$randomdigit}}')\r",
                      "pm.collectionVariables.set(\"branchName\", bname)\r",
                      "let Lat = pm.variables.replaceIn('{{$randomLatitude}}')\r",
                      "pm.collectionVariables.set(\"latitude\", Lat)\r",
                      "let Long = pm.variables.replaceIn('{{$randomLongitude}}')\r",
                      "pm.collectionVariables.set(\"longitude\", Long)\r",
                      "let addres = pm.variables.replaceIn('{{$randomCity}}')\r",
                      "pm.collectionVariables.set(\"address\", addres)"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "c1615a9c-a329-42ca-b173-d607a587d532",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"cashBack\": 5,\r\n  \"latitude\": \"  \",\r\n  \"longitude\": {{longitude}},\r\n  \"merchantId\": 5,\r\n  \"name\": \"{{branchName}}\",\r\n  \"address\": \"{{address}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/branch"
              },
              "response": []
            },
            {
              "name": "012 - add branch space longitude",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "909676ef-45de-4553-b34b-ea6942e0c2f0",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"[Wrong longitude. Must not be null]\", () => {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"[Wrong longitude. Must not be null]\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"013 - add branch spacemerchantID\")"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "777aefd0-629d-4583-8c86-38d261e7cd63",
                    "exec": [
                      "let bname = pm.variables.replaceIn('{{$randomWord}}')\r",
                      "pm.collectionVariables.set(\"branchName\", bname)\r",
                      "let digit = pm.variables.replaceIn('{{$randomdigit}}')\r",
                      "pm.collectionVariables.set(\"branchName\", bname)\r",
                      "let Lat = pm.variables.replaceIn('{{$randomLatitude}}')\r",
                      "pm.collectionVariables.set(\"latitude\", Lat)\r",
                      "let Long = pm.variables.replaceIn('{{$randomLongitude}}')\r",
                      "pm.collectionVariables.set(\"longitude\", Long)\r",
                      "let addres = pm.variables.replaceIn('{{$randomCity}}')\r",
                      "pm.collectionVariables.set(\"address\", addres)"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "d2a213c4-6595-49c6-bb92-5eaa0f9e2786",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"cashBack\": 5,\r\n  \"latitude\": {{latitude}},\r\n  \"longitude\": \"  \",\r\n  \"merchantId\": 5,\r\n  \"name\": \"{{branchName}}\",\r\n  \"address\": \"{{address}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/branch"
              },
              "response": []
            },
            {
              "name": "013 - add branch spacemerchantID",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61c06ec-061f-422f-bcd0-3c21d771849e",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"[Wrong merchantId. Must not be null]\", () => {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"[Wrong merchantId. Must not be null]\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"014 - add branch incorrect format merchId\")"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "fef7a4e9-054f-446a-a089-a260a2d4ed8a",
                    "exec": [
                      "let bname = pm.variables.replaceIn('{{$randomWord}}')\r",
                      "pm.collectionVariables.set(\"branchName\", bname)\r",
                      "let digit = pm.variables.replaceIn('{{$randomdigit}}')\r",
                      "pm.collectionVariables.set(\"branchName\", bname)\r",
                      "let Lat = pm.variables.replaceIn('{{$randomLatitude}}')\r",
                      "pm.collectionVariables.set(\"latitude\", Lat)\r",
                      "let Long = pm.variables.replaceIn('{{$randomLongitude}}')\r",
                      "pm.collectionVariables.set(\"longitude\", Long)\r",
                      "let addres = pm.variables.replaceIn('{{$randomCity}}')\r",
                      "pm.collectionVariables.set(\"address\", addres)"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "d01ed06c-6a3e-4352-b3e7-5cf749aed2be",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"cashBack\": 5,\r\n  \"latitude\": {{latitude}},\r\n  \"longitude\": {{longitude}},\r\n  \"merchantId\": \"  \",\r\n  \"name\": \"{{branchName}}\",\r\n  \"address\": \"{{address}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/branch"
              },
              "response": []
            },
            {
              "name": "014 - add branch incorrect format merchId",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d1630f1a-1d76-447c-8592-bda8eb20eefd",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"test can't be parsed to Long.\", () => {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"test can't be parsed to Long.\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"015 - add branch incorrect format longitude\")"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e71edf49-a616-45dd-86ed-28a1dd925a35",
                    "exec": [
                      "let bname = pm.variables.replaceIn('{{$randomWord}}')\r",
                      "pm.collectionVariables.set(\"branchName\", bname)\r",
                      "let digit = pm.variables.replaceIn('{{$randomdigit}}')\r",
                      "pm.collectionVariables.set(\"branchName\", bname)\r",
                      "let Lat = pm.variables.replaceIn('{{$randomLatitude}}')\r",
                      "pm.collectionVariables.set(\"latitude\", Lat)\r",
                      "let Long = pm.variables.replaceIn('{{$randomLongitude}}')\r",
                      "pm.collectionVariables.set(\"longitude\", Long)\r",
                      "let addres = pm.variables.replaceIn('{{$randomCity}}')\r",
                      "pm.collectionVariables.set(\"address\", addres)"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "f95b1ef4-01e6-4491-ab07-f20d544a8d33",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"cashBack\": 5,\r\n  \"latitude\": {{latitude}},\r\n  \"longitude\": {{longitude}},\r\n  \"merchantId\": \"test\",\r\n  \"name\": \"{{branchName}}\",\r\n  \"address\": \"{{address}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/branch"
              },
              "response": []
            },
            {
              "name": "015 - add branch incorrect format longitude",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9c105f56-fb38-4446-8c47-ecaeba7bc3b3",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"test can't be parsed to Double.\", () => {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"test can't be parsed to Double.\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"016 - add branch incorrect format latitude\")"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ad6b5310-c907-4c94-a6b7-650d21428def",
                    "exec": [
                      "let bname = pm.variables.replaceIn('{{$randomWord}}')\r",
                      "pm.collectionVariables.set(\"branchName\", bname)\r",
                      "let digit = pm.variables.replaceIn('{{$randomdigit}}')\r",
                      "pm.collectionVariables.set(\"branchName\", bname)\r",
                      "let Lat = pm.variables.replaceIn('{{$randomLatitude}}')\r",
                      "pm.collectionVariables.set(\"latitude\", Lat)\r",
                      "let Long = pm.variables.replaceIn('{{$randomLongitude}}')\r",
                      "pm.collectionVariables.set(\"longitude\", Long)\r",
                      "let addres = pm.variables.replaceIn('{{$randomCity}}')\r",
                      "pm.collectionVariables.set(\"address\", addres)"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "24a4fd03-6dd6-4d06-918d-2b32a0f39255",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"cashBack\": 5,\r\n  \"latitude\": {{latitude}},\r\n  \"longitude\": \"test\",\r\n  \"merchantId\": 5,\r\n  \"name\": \"{{branchName}}\",\r\n  \"address\": \"{{address}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/branch"
              },
              "response": []
            },
            {
              "name": "016 - add branch incorrect format latitude",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a89caf5-5b56-4cf4-aefe-4c1d96ab06cd",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"test can't be parsed to Double.\", () => {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"test can't be parsed to Double.\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"017 - add branch incorrect format cashback\")"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5489a961-b4a8-4da1-b957-9a96efffb5ff",
                    "exec": [
                      "let bname = pm.variables.replaceIn('{{$randomWord}}')\r",
                      "pm.collectionVariables.set(\"branchName\", bname)\r",
                      "let digit = pm.variables.replaceIn('{{$randomdigit}}')\r",
                      "pm.collectionVariables.set(\"branchName\", bname)\r",
                      "let Lat = pm.variables.replaceIn('{{$randomLatitude}}')\r",
                      "pm.collectionVariables.set(\"latitude\", Lat)\r",
                      "let Long = pm.variables.replaceIn('{{$randomLongitude}}')\r",
                      "pm.collectionVariables.set(\"longitude\", Long)\r",
                      "let addres = pm.variables.replaceIn('{{$randomCity}}')\r",
                      "pm.collectionVariables.set(\"address\", addres)"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "f72781fb-8fde-4c83-9d24-4a9b7a45140b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"cashBack\": 5,\r\n  \"latitude\": \"test\",\r\n  \"longitude\": {{longitude}},\r\n  \"merchantId\": 5,\r\n  \"name\": \"{{branchName}}\",\r\n  \"address\": \"{{address}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/branch"
              },
              "response": []
            },
            {
              "name": "017 - add branch incorrect format cashback",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "32fe0eea-a66e-4f65-97da-6d37d12361bf",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"test can't be parsed to Double.\", () => {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"test can't be parsed to Double.\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"019 - update branch max  adress\")"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "56b28339-a72c-46ef-a9d2-41e49a205a9f",
                    "exec": [
                      "let bname = pm.variables.replaceIn('{{$randomWord}}')\r",
                      "pm.collectionVariables.set(\"branchName\", bname)\r",
                      "let digit = pm.variables.replaceIn('{{$randomdigit}}')\r",
                      "pm.collectionVariables.set(\"branchName\", bname)\r",
                      "let Lat = pm.variables.replaceIn('{{$randomLatitude}}')\r",
                      "pm.collectionVariables.set(\"latitude\", Lat)\r",
                      "let Long = pm.variables.replaceIn('{{$randomLongitude}}')\r",
                      "pm.collectionVariables.set(\"longitude\", Long)\r",
                      "let addres = pm.variables.replaceIn('{{$randomCity}}')\r",
                      "pm.collectionVariables.set(\"address\", addres)"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "db4ac459-27c0-4fd5-bcc9-d78b3875e921",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"cashBack\": \"test\",\r\n  \"latitude\": {{latitude}},\r\n  \"longitude\": {{longitude}},\r\n  \"merchantId\": 5,\r\n  \"name\": \"{{branchName}}\",\r\n  \"address\": \"{{address}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/branch"
              },
              "response": []
            },
            {
              "name": "019 - update branch max  adress",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9bbfd8e9-ce97-4b77-879b-876fc31f6877",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"test can't be parsed to Double.\", () => {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"JSON parse error: Unrecognized token\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"022 - update branch wrong data\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "351afbcf-a51f-4199-af14-a14d72d2e4a8",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"address\": {{refresh_token}},\r\n  \"cashBack\": 0,\r\n  \"name\": \"string\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/branch/11"
              },
              "response": []
            },
            {
              "name": "020 - update branch max  b-Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3871a3fd-4374-41b4-be38-e9a80d598c36",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Failed to convert value of type\", () => {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"Failed to convert value of type\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"021 - update branch space b-ID\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "7e454697-6705-40c3-99be-2c07e6b51ba8",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"address\": \"string\",\r\n  \"cashBack\": 0,\r\n  \"name\": \"string\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/branch/{{maxNumber}}"
              },
              "response": []
            },
            {
              "name": "022 - update branch wrong data",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4babf49f-c3e5-4336-b2cc-4621af0824a7",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 404\", function () {\r",
                      "\tpm.response.to.have.status(404);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"404 NOT_FOUND \\\"Branch with given id not found\\\"\", () => {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"404 NOT_FOUND \\\"Branch with given id not found\\\"\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"023 - update branch incorrect data\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "a4fb28b2-5808-4360-8dcd-f14bc82db788",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"address\": \"string\",\r\n  \"cashBack\": 0,\r\n  \"name\": \"string\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/branch/-1"
              },
              "response": []
            },
            {
              "name": "023 - update branch incorrect data",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "58203e40-b4ef-4ea3-9c22-57013ef570be",
                    "exec": [
                      "//let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"025 - delete branch max parameter\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "c1e0f1a4-ac73-4776-9ca7-588d0c00cdb9",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"address\": \"string\",\r\n  \"cashBack\": 0,\r\n  \"name\": \"string\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/branch/test"
              },
              "response": []
            },
            {
              "name": "025 - delete branch max parameter",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac1d7420-9fdd-4060-9cbc-8d45430febe8",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"026 - delete branch incorrect  parameter\")\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "b4f7663f-7d4c-44e6-8633-9ec3ddc5d329",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": "{{base_url}}/common-service/api/v1/branch/{{maxNumber}}"
              },
              "response": []
            },
            {
              "name": "026 - delete branch incorrect  parameter",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ef65925f-d8f5-4ff2-831d-94127feca852",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"027 - delete branch wrong  parameter\")\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "d041267a-54a1-4312-ba15-a1bf72af9989",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": "{{base_url}}/common-service/api/v1/branch/test"
              },
              "response": []
            },
            {
              "name": "027 - delete branch wrong  parameter",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7d1b33cb-7563-445a-aa7b-02b2e7447be7",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "\tpm.response.to.have.status(404);\r",
                      "});\r",
                      "\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"404 NOT_FOUND \\\"Branch with given id not found\\\"\", () => {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"404 NOT_FOUND \\\"Branch with given id not found\\\"\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - add Category\")\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "89785496-8055-43b4-b1c4-8a2cf2b09f8f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": "{{base_url}}/common-service/api/v1/branch/-1"
              },
              "response": []
            }
          ],
          "_postman_id": "e7d9ac85-04fc-4b43-a089-61255692e462",
          "_postman_isSubFolder": true
        },
        {
          "name": "001 - add Category",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "345836ca-abb6-4853-ac5e-f1b7af94cf60",
                "exec": [
                  "let Ncategory = pm.variables.replaceIn('{{$randomDepartment}}')\r",
                  "pm.collectionVariables.set(\"categoryName\", Ncategory)\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "fb8b6fcf-f2c2-4ff5-9ea9-803c0fd27b6e",
                "exec": [
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 201\", function () {\r",
                  "\tpm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "let ucategoryid = jsonData.id\r",
                  "pm.collectionVariables.set(\"categoryid\", ucategoryid)\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - get category\")"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "856f8d0c-95ab-40b6-ac01-69de124fd59a",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "{{base_url}}/common-service/api/v1/merchant/category?name={{categoryName}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "common-service",
                "api",
                "v1",
                "merchant",
                "category"
              ],
              "query": [
                {
                  "key": "name",
                  "value": "{{categoryName}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "002 - get category",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "9b1aa612-5e8c-4d18-b92c-ef5ffd7d522f",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e4617c0d-bd08-4350-82b6-000f95c26c6a",
                "exec": [
                  "let jsonData = pm.response.json()[0];\r",
                  "\r",
                  "pm.test(\"Status code is 206\", function () {\r",
                  "\tpm.response.to.have.status(206);\r",
                  "});\r",
                  "\r",
                  "const schema = {\r",
                  "\t\"type\": \"array\",\r",
                  "\t\"properties\": {\r",
                  "\t\t\"databaseId\":{\r",
                  "\t\t\t\"type\": \"number\"\r",
                  "\t\t},\r",
                  "\t\t\"name\":{\r",
                  "\t\t\t\"type\": \"string\"\r",
                  "\t\t}\r",
                  "    }\r",
                  "}\r",
                  "\r",
                  "c_dataid = pm.collectionVariables.get(\"categoryid\")\r",
                  "c_cname = pm.collectionVariables.get(\"categoryName\")\r",
                  "\r",
                  "let dataid = jsonData.databaseId\r",
                  "let cname = jsonData.name\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - add Merchant\")\r",
                  "\r",
                  "pm.test(\"Test  dataid\", function () {\r",
                  "\tpm.expect(dataid).to.equal(dataid);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test  cname\", function () {\r",
                  "\tpm.expect(cname).to.contain(c_cname)\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Validating schema\", () => {\r",
                  "\tpm.response.to.have.jsonSchema(schema)\r",
                  "})"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "6485a5ae-9e95-4388-bb1d-84fdf01dc4ad",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/common-service/api/v1/merchant/category/?limit=1&term={{categoryName}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "common-service",
                "api",
                "v1",
                "merchant",
                "category",
                ""
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "1"
                },
                {
                  "key": "term",
                  "value": "{{categoryName}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "003 - add Merchant",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b8bb5b1f-6110-4b04-99a5-f4676809baf0",
                "exec": [
                  "let Mname = pm.variables.replaceIn('{{$randomWord}}')\r",
                  "pm.collectionVariables.set(\"merchantName\", Mname)"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d5c01aec-65bd-4aa4-93cd-c2ae7d75f9b2",
                "exec": [
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 201\", function () {\r",
                  "\tpm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "let merchantDataId = jsonData.databaseId\r",
                  "pm.collectionVariables.set(\"merchantDataId\", merchantDataId)\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"005 - get Merchant\")\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "1b2d56c3-b6d9-47ff-a68e-728a93abd38d",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"categoryId\": \"{{categoryid}}\",\r\n  \"name\": \"{{merchantName}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{base_url}}/common-service/api/v1/merchant"
          },
          "response": []
        },
        {
          "name": "005 - get Merchant",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8bcc7165-4b85-4f40-ab6c-7cbc9aa8624a",
                "exec": [
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "\tpm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "const schema = {\r",
                  "\t\"type\": \"object\",\r",
                  "\t\"properties\": {\r",
                  "\t\t\"databaseId\":{\r",
                  "\t\t\t\"type\": \"number\"\r",
                  "\t\t},\r",
                  "\t\t\"name\":{\r",
                  "\t\t\t\"type\": \"string\"\r",
                  "\t\t},\r",
                  "\t\t\"rating\":{\r",
                  "\t\t\t\"type\": \"null\"\r",
                  "\t\t},\r",
                  "\t\t\"category\":{\r",
                  "\t\t\t\"type\": \"string\"\r",
                  "\t\t},\r",
                  "\t\t\"branchDTOSet\":{\r",
                  "\t\t\t\"type\": \"array\"\r",
                  "\t\t}\r",
                  "    }\r",
                  "}\r",
                  "\r",
                  "c_mdataid = pm.collectionVariables.get(\"merchantDataId\")\r",
                  "c_mname = pm.collectionVariables.get(\"merchantName\")\r",
                  "c_cname = pm.collectionVariables.get(\"categoryName\")\r",
                  "c_cashback = pm.collectionVariables.get(\"cashback\")\r",
                  "\r",
                  "let cashBack = jsonData.cashBack\r",
                  "let mdataid = jsonData.databaseId\r",
                  "let mname = jsonData.name\r",
                  "let cname = jsonData.category\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"006 - update merchant\")\r",
                  "\r",
                  "pm.test(\"Test  dataid\", function () {\r",
                  "\tpm.expect(mdataid).to.equal(c_mdataid);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test  cname\", function () {\r",
                  "\tpm.expect(mname).to.contain(c_mname)\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test  cname\", function () {\r",
                  "\tpm.expect(cname).to.contain(c_cname)\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test  cashBack\", function () {\r",
                  "\tpm.expect(cashBack).to.equal(cashBack)\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Validating schema\", () => {\r",
                  "\tpm.response.to.have.jsonSchema(schema)\r",
                  "})"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "f671a1cc-a058-4a13-8245-39327bb2a8bf",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {}
              }
            },
            "url": "{{base_url}}/common-service/api/v1/merchant/{{merchantDataId}}"
          },
          "response": []
        },
        {
          "name": "006 - update merchant",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c46c4328-e102-4d12-a905-9fbf33a7387e",
                "exec": [
                  "\r",
                  "pm.test(\"Status code is 205\", function () {\r",
                  "\tpm.response.to.have.status(205);\r",
                  "});\r",
                  "\r",
                  "let mName = pm.collectionVariables.get(\"merchantName\")\r",
                  "\r",
                  "pm.collectionVariables.set(\"updatedMerchantName\", \"updated\"+ mName)\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"007 - get updated Merchant\")\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "ed5ece73-59c5-417d-865c-2bf08771e4cf",
                "exec": [
                  "let cashback = pm.variables.replaceIn('{{$randomInt}}')\r",
                  "pm.collectionVariables.set(\"cashback\", cashback)"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "46ea560f-28af-462a-9b0d-af4150fc7d20",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"cashBack\": {{cashback}},\r\n  \"categoryId\": {{categoryid}},\r\n  \"name\": \"updated{{merchantName}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{base_url}}/common-service/api/v1/merchant/{{merchantDataId}}"
          },
          "response": []
        },
        {
          "name": "007 - get updated Merchant",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "63f38c3d-8dc1-4058-ba16-b4a3173e3c98",
                "exec": [
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "\tpm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "const schema = {\r",
                  "\t\"type\": \"object\",\r",
                  "\t\"properties\": {\r",
                  "\t\t\"databaseId\":{\r",
                  "\t\t\t\"type\": \"number\"\r",
                  "\t\t},\r",
                  "\t\t\"name\":{\r",
                  "\t\t\t\"type\": \"string\"\r",
                  "\t\t},\r",
                  "\t\t\"rating\":{\r",
                  "\t\t\t\"type\": \"null\"\r",
                  "\t\t},\r",
                  "\t\t\"category\":{\r",
                  "\t\t\t\"type\": \"string\"\r",
                  "\t\t},\r",
                  "\t\t\"branchDTOSet\":{\r",
                  "\t\t\t\"type\": \"array\"\r",
                  "\t\t}\r",
                  "    }\r",
                  "}\r",
                  "\r",
                  "c_mdataid = pm.collectionVariables.get(\"merchantDataId\")\r",
                  "c_mname = pm.collectionVariables.get(\"updatedMerchantName\")\r",
                  "c_cname = pm.collectionVariables.get(\"categoryName\")\r",
                  "\r",
                  "let mdataid = jsonData.databaseId\r",
                  "let mname = jsonData.name\r",
                  "let cname = jsonData.category\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"008 - add branch\")\r",
                  "\r",
                  "pm.test(\"Test  dataid\", function () {\r",
                  "\tpm.expect(mdataid).to.equal(c_mdataid);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test  mname\", function () {\r",
                  "\tpm.expect(mname).to.contain(c_mname)\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test  cname\", function () {\r",
                  "\tpm.expect(cname).to.contain(c_cname)\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Validating schema\", () => {\r",
                  "\tpm.response.to.have.jsonSchema(schema)\r",
                  "})"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "df554f44-6fcc-4d09-a077-55249fc8f9d6",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/common-service/api/v1/merchant/{{merchantDataId}}"
          },
          "response": []
        },
        {
          "name": "008 - add branch",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "50be5a36-f838-4437-8510-1f6e544b157f",
                "exec": [
                  "let bname = pm.variables.replaceIn('{{$randomWord}}')\r",
                  "pm.collectionVariables.set(\"branchName\", bname)\r",
                  "let digit = pm.variables.replaceIn('{{$randomdigit}}')\r",
                  "pm.collectionVariables.set(\"branchName\", bname)\r",
                  "let Lat = pm.variables.replaceIn('{{$randomLatitude}}')\r",
                  "pm.collectionVariables.set(\"latitude\", Lat)\r",
                  "let Long = pm.variables.replaceIn('{{$randomLongitude}}')\r",
                  "pm.collectionVariables.set(\"longitude\", Long)\r",
                  "let addres = pm.variables.replaceIn('{{$randomCity}}')\r",
                  "pm.collectionVariables.set(\"address\", addres)"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "ff371752-a2c5-41f5-9471-47af7c31587f",
                "exec": [
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 201\", function () {\r",
                  "\tpm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "let branchId = jsonData.databaseId\r",
                  "\r",
                  "pm.collectionVariables.set(\"branchDataId\", branchId)\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"009 - get branch\")\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "5860f292-2dc8-4648-9a4c-3a8554d6dea3",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"cashBack\": {{cashback}},\r\n  \"latitude\": {{latitude}},\r\n  \"longitude\": {{longitude}},\r\n  \"merchantId\": {{merchantDataId}},\r\n  \"name\": \"{{branchName}}\",\r\n  \"address\": \"{{address}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{base_url}}/common-service/api/v1/branch"
          },
          "response": []
        },
        {
          "name": "009 - get branch",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "94f5587b-2c1f-471c-b39d-e1f1afcc2876",
                "exec": [
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "\tpm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "const schema = {\r",
                  "\t\"type\": \"object\",\r",
                  "\t\"properties\": {\r",
                  "\t\t\"databaseId\":{\r",
                  "\t\t\t\"type\": \"number\"\r",
                  "\t\t},\r",
                  "\t\t\"merchantId\":{\r",
                  "\t\t\t\"type\": \"number\"\r",
                  "\t\t},\r",
                  "\t\t\"name\":{\r",
                  "\t\t\t\"type\": \"string\"\r",
                  "\t\t},\r",
                  "\t\t\"cashBack\":{\r",
                  "\t\t\t\"type\": \"number\"\r",
                  "\t\t},\r",
                  "\t\t\"rating\":{\r",
                  "\t\t\t\"type\": \"null\"\r",
                  "\t\t}\r",
                  "    }\r",
                  "}\r",
                  "\r",
                  "c_branchDataId = pm.collectionVariables.get(\"branchDataId\").toNumber()\r",
                  "c_merchantDataId = pm.collectionVariables.get(\"merchantDataId\")\r",
                  "c_branchName = pm.collectionVariables.get(\"branchName\")\r",
                  "c_cashback = pm.collectionVariables.get(\"cashback\").toNumber()\r",
                  "c_address = pm.collectionVariables.get(\"address\")\r",
                  "\r",
                  "let databaseId = jsonData.databaseId\r",
                  "let merchantId = jsonData.merchantId\r",
                  "let name = jsonData.name\r",
                  "let cashBack = jsonData.cashBack\r",
                  "let address = jsonData.address\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"010 - update Merchant Cashback\")\r",
                  "\r",
                  "pm.test(\"Test  databaseId\", function () {\r",
                  "\tpm.expect(databaseId).to.equal(c_branchDataId);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test  merchantId\", function () {\r",
                  "\tpm.expect(merchantId).to.equal(c_merchantDataId)\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test  name\", function () {\r",
                  "\tpm.expect(name).to.contain(c_branchName)\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test  address\", function () {\r",
                  "\tpm.expect(address).to.contain(c_address )\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test  cashBack\", function () {\r",
                  "\tpm.expect(cashBack).to.equal(c_cashback)\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Validating schema\", () => {\r",
                  "\tpm.response.to.have.jsonSchema(schema)\r",
                  "})"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "40d81b03-eb98-4c5c-9999-6643c05f4267",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "ca1793c6-4e89-41b3-914b-ee8c6d6d38fb",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/common-service/api/v1/branch/{{branchDataId}}"
          },
          "response": []
        },
        {
          "name": "010 - update Merchant Cashback",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "726e562c-66d9-4e60-af02-47c3c9be0fda",
                "exec": [
                  "let cashBack = pm.collectionVariables.get(\"cashback\").toNumber()\r",
                  "\r",
                  "let uCashBack = cashBack + 5.1;\r",
                  "\r",
                  "pm.collectionVariables.set(\"updatedCashBack\",uCashBack)"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3b6d8094-df32-4ec1-b35e-4d5909a17ec0",
                "exec": [
                  "pm.test(\"Status code is 205\", function () {\r",
                  "\tpm.response.to.have.status(205);\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"011 - get updated Merchant cashback\")\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "9a35d47c-0f33-4a06-b2a0-85c77c2f2e4b",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{base_url}}/common-service/api/v1/branch/update-cashbacks?cashBack={{updatedCashBack}}&merchantId={{merchantDataId}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "common-service",
                "api",
                "v1",
                "branch",
                "update-cashbacks"
              ],
              "query": [
                {
                  "key": "cashBack",
                  "value": "{{updatedCashBack}}"
                },
                {
                  "key": "merchantId",
                  "value": "{{merchantDataId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "011 - get updated Merchant cashback",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c777eef1-7a31-4426-a159-960dfc1a81fc",
                "exec": [
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "\tpm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "const schema = {\r",
                  "\t\"type\": \"object\",\r",
                  "\t\"properties\": {\r",
                  "\t\t\"databaseId\":{\r",
                  "\t\t\t\"type\": \"number\"\r",
                  "\t\t},\r",
                  "\t\t\"name\":{\r",
                  "\t\t\t\"type\": \"string\"\r",
                  "\t\t},\r",
                  "\t\t\"rating\":{\r",
                  "\t\t\t\"type\": \"null\"\r",
                  "\t\t},\r",
                  "\t\t\"category\":{\r",
                  "\t\t\t\"type\": \"string\"\r",
                  "\t\t},\r",
                  "\t\t\"branchDTOSet\":{\r",
                  "\t\t\t\"type\": \"array\"\r",
                  "\t\t}\r",
                  "    }\r",
                  "}\r",
                  "\r",
                  "c_mdataid = pm.collectionVariables.get(\"merchantDataId\")\r",
                  "c_mname = pm.collectionVariables.get(\"updatedMerchantName\")\r",
                  "c_cname = pm.collectionVariables.get(\"categoryName\")\r",
                  "c_cashback = pm.collectionVariables.get(\"updatedCashBack\").toNumber()\r",
                  "\r",
                  "let cashBack = jsonData.branchDTOSet[0].cashBack\r",
                  "let mdataid = jsonData.databaseId\r",
                  "let mname = jsonData.name\r",
                  "let cname = jsonData.category\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"012 - update branch\")\r",
                  "\r",
                  "pm.test(\"Test  dataid\", function () {\r",
                  "\tpm.expect(mdataid).to.equal(c_mdataid);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test  mname\", function () {\r",
                  "\tpm.expect(mname).to.contain(c_mname)\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test  cname\", function () {\r",
                  "\tpm.expect(cname).to.contain(c_cname)\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test  cashBack\", function () {\r",
                  "\tpm.expect(cashBack).to.equal(c_cashback)\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Validating schema\", () => {\r",
                  "\tpm.response.to.have.jsonSchema(schema)\r",
                  "})"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "010e33f3-49d3-4040-8c07-6ca558b6dbc0",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {}
              }
            },
            "url": "{{base_url}}/common-service/api/v1/merchant/{{merchantDataId}}"
          },
          "response": []
        },
        {
          "name": "012 - update branch",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2c553df4-7a4c-4df1-a912-581d0c9d1858",
                "exec": [
                  "\r",
                  "pm.test(\"Status code is 205\", function () {\r",
                  "\tpm.response.to.have.status(205);\r",
                  "});\r",
                  "\r",
                  "let bName = pm.collectionVariables.get(\"branchName\")\r",
                  "\r",
                  "pm.collectionVariables.set(\"updatedMerchantName\", \"updated\" + bName)\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"013 - put branch rate-comment\")\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "c6daa944-8119-4917-b5e9-c0d687f5ce5b",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "c8054e82-8e56-452e-85fc-35bb67380da2",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"cashBack\": {{updatedCashBack}},\r\n  \"name\": \"updated{{branchName}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{base_url}}/common-service/api/v1/branch/{{branchDataId}}"
          },
          "response": []
        },
        {
          "name": "013 - put branch rate-comment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b0500997-ab64-428a-8ef7-aaf53ced8e39",
                "exec": [
                  "\r",
                  "pm.test(\"Status code is 205\", function () {\r",
                  "\tpm.response.to.have.status(205);\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"014 - get updated branch\")\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "c1c53598-77fb-4018-8bf0-9d2993ee68dd",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"comment\": \"commentBranchTest\",\r\n  \"rating\": 5\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{base_url}}/common-service/api/v1/branch/{{branchDataId}}/rate"
          },
          "response": []
        },
        {
          "name": "014 - get updated branch",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "05b097f7-a5f8-4071-a3a9-ffd9b6ec45d4",
                "exec": [
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "\tpm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "const schema = {\r",
                  "\t\"type\": \"object\",\r",
                  "\t\"properties\": {\r",
                  "\t\t\"databaseId\":{\r",
                  "\t\t\t\"type\": \"number\"\r",
                  "\t\t},\r",
                  "\t\t\"merchantId\":{\r",
                  "\t\t\t\"type\": \"number\"\r",
                  "\t\t},\r",
                  "\t\t\"name\":{\r",
                  "\t\t\t\"type\": \"string\"\r",
                  "\t\t},\r",
                  "\t\t\"cashBack\":{\r",
                  "\t\t\t\"type\": \"number\"\r",
                  "\t\t},\r",
                  "\t\t\"rating\":{\r",
                  "\t\t\t\"type\": \"number\"\r",
                  "\t\t}\r",
                  "    }\r",
                  "}\r",
                  "\r",
                  "c_branchDataId = pm.collectionVariables.get(\"branchDataId\").toNumber()\r",
                  "c_merchantDataId = pm.collectionVariables.get(\"merchantDataId\")\r",
                  "c_branchName = pm.collectionVariables.get(\"branchName\")\r",
                  "c_cashback = pm.collectionVariables.get(\"updatedCashBack\").toNumber()\r",
                  "c_address = pm.collectionVariables.get(\"address\")\r",
                  "\r",
                  "let databaseId = jsonData.databaseId\r",
                  "let merchantId = jsonData.merchantId\r",
                  "let name = jsonData.name\r",
                  "let cashBack = jsonData.cashBack\r",
                  "let address = jsonData.address\r",
                  "let rating = jsonData.rating\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"015 - find-closest branch\")\r",
                  "\r",
                  "pm.test(\"Test  databaseId\", function () {\r",
                  "\tpm.expect(databaseId).to.equal(c_branchDataId);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test  merchantId\", function () {\r",
                  "\tpm.expect(merchantId).to.equal(c_merchantDataId)\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test  name\", function () {\r",
                  "\tpm.expect(name).to.contain(c_branchName)\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test  address\", function () {\r",
                  "\tpm.expect(address).to.contain(c_address )\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test  cashBack\", function () {\r",
                  "\tpm.expect(cashBack).to.equal(c_cashback)\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test  cashBack\", function () {\r",
                  "\tpm.expect(rating).to.equal(5)\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Validating schema\", () => {\r",
                  "\tpm.response.to.have.jsonSchema(schema)\r",
                  "})"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "239edbd8-f0c8-4ad7-bf08-ddca363536a5",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "ac4cb2e1-c0f1-4c6d-93fe-e32d6d58a71d",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{base_url}}/common-service/api/v1/branch/{{branchDataId}}"
          },
          "response": []
        },
        {
          "name": "015 - find-closest branch",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "626f90c8-583c-4a8c-bc28-8d8cf45a49ef",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "4cf4519a-88c1-412e-b728-7d40dca983dc",
                "exec": [
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 206\", function () {\r",
                  "\tpm.response.to.have.status(206);\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"016 - fget-category-branches-by-rating\")\r",
                  "\r",
                  "c_branchDataId = pm.collectionVariables.get(\"branchDataId\").toNumber()\r",
                  "c_merchantDataId = pm.collectionVariables.get(\"merchantDataId\").toNumber()\r",
                  "\r",
                  "let databaseId = jsonData.content[0].databaseId\r",
                  "let merchantId = jsonData.content[0].merchantId\r",
                  "\r",
                  "pm.test(\"Test  databaseId\", function () {\r",
                  "\tpm.expect(databaseId).to.equal(c_branchDataId)\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test  databaseId\", function () {\r",
                  "\tpm.expect(merchantId).to.equal(c_merchantDataId )\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "00f17af7-67e1-4171-9bce-34b5a32f16a0",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"location\": {\r\n    \"latitude\": {{latitude}},\r\n    \"longitude\": {{longitude}}\r\n  },\r\n  \"pageIdx\": 0,\r\n  \"pageSize\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{base_url}}/common-service/api/v1/branch/find-closest"
          },
          "response": []
        },
        {
          "name": "016 - fget-category-branches-by-rating",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6be1ad08-f03b-4b07-8466-67a130ba44fb",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d2d646ca-d617-4f4f-b427-616a0be7ce87",
                "exec": [
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "\tpm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"017 - find-in-radius\")\r",
                  "\r",
                  "c_catId = pm.collectionVariables.get(\"categoryid\").toNumber()\r",
                  "c_merchantDataId = pm.collectionVariables.get(\"merchantDataId\")\r",
                  "c_branchid = pm.collectionVariables.get(\"branchDataId\")\r",
                  "\r",
                  "let categoryId = jsonData.content[0].categoryId\r",
                  "let merchantId = jsonData.content[0].merchantId\r",
                  "let id = jsonData.content[0].id\r",
                  "\r",
                  "pm.test(\"Test  id\", function () {\r",
                  "\tpm.expect(id).to.equal(c_branchid)\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test  categoryId\", function () {\r",
                  "\tpm.expect(categoryId).to.equal(c_catId)\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test  merchantId\", function () {\r",
                  "\tpm.expect(merchantId).to.equal(c_merchantDataId)\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "1a0829f0-3683-4565-a5fd-1ecc8a9779e9",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"categoryId\": {{categoryid}},\r\n  \"pageIdx\": 0,\r\n  \"pageSize\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{base_url}}/common-service/api/v1/branch/get-category-branches-by-rating"
          },
          "response": []
        },
        {
          "name": "017 - find-in-radius",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "89c5d2ae-4f2f-43d0-a0c1-b69b80f37f7e",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "180796e2-6401-45cc-a7af-38deee215b61",
                "exec": [
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 206\", function () {\r",
                  "\tpm.response.to.have.status(206);\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"017 - get merchant-branches\")\r",
                  "\r",
                  "c_merchantDataId = pm.collectionVariables.get(\"merchantDataId\")\r",
                  "c_branchid = pm.collectionVariables.get(\"branchDataId\")\r",
                  "\r",
                  "let merchantId = jsonData.content[0].merchantId\r",
                  "let id = jsonData.content[0].databaseId\r",
                  "\r",
                  "pm.test(\"Test  id\", function () {\r",
                  "\tpm.expect(id).to.equal(c_branchid)\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test  merchantId\", function () {\r",
                  "\tpm.expect(merchantId).to.equal(c_merchantDataId)\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "afa3f51e-4bba-452a-b182-a0e9d7a0662b",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"distance\": 1,\r\n  \"location\": {\r\n    \"latitude\": {{latitude}},\r\n    \"longitude\": {{longitude}}\r\n  },\r\n  \"pageIdx\": 0,\r\n  \"pageSize\": 1\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{base_url}}/common-service/api/v1/branch/find-in-radius"
          },
          "response": []
        },
        {
          "name": "017 - get merchant-branches",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "4c8e8bca-4c0a-4f31-bc2d-aec808960447",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "c35f7233-7049-4f8d-b81b-37572bfd8d18",
                "exec": [
                  "let jsonData = pm.response.json()[0];\r",
                  "\r",
                  "pm.test(\"Status code is 206\", function () {\r",
                  "\tpm.response.to.have.status(206);\r",
                  "});\r",
                  "\r",
                  "const schema = {\r",
                  "\t\"type\": \"array\",\r",
                  "\t\"properties\": {\r",
                  "\t\t\"databaseId\":{\r",
                  "\t\t\t\"type\": \"number\"\r",
                  "\t\t},\r",
                  "\t\t\"merchantId\":{\r",
                  "\t\t\t\"type\": \"number\"\r",
                  "\t\t},\r",
                  "\t\t\"name\":{\r",
                  "\t\t\t\"type\": \"string\"\r",
                  "\t\t},\r",
                  "\t\t\"cashBack\":{\r",
                  "\t\t\t\"type\": \"number\"\r",
                  "\t\t},\r",
                  "\t\t\"rating\":{\r",
                  "\t\t\t\"type\": \"number\"\r",
                  "\t\t}\r",
                  "    }\r",
                  "}\r",
                  "\r",
                  "c_branchDataId = pm.collectionVariables.get(\"branchDataId\").toNumber()\r",
                  "c_merchantDataId = pm.collectionVariables.get(\"merchantDataId\")\r",
                  "c_branchName = pm.collectionVariables.get(\"branchName\")\r",
                  "c_cashback = pm.collectionVariables.get(\"updatedCashBack\").toNumber()\r",
                  "c_address = pm.collectionVariables.get(\"address\")\r",
                  "\r",
                  "let databaseId = jsonData.databaseId\r",
                  "let merchantId = jsonData.merchantId\r",
                  "let name = jsonData.name\r",
                  "let cashBack = jsonData.cashBack\r",
                  "let address = jsonData.address\r",
                  "let rating = jsonData.rating\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"018 - delete branch\")\r",
                  "\r",
                  "pm.test(\"Test  databaseId\", function () {\r",
                  "\tpm.expect(databaseId).to.equal(c_branchDataId);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test  merchantId\", function () {\r",
                  "\tpm.expect(merchantId).to.equal(c_merchantDataId)\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test  name\", function () {\r",
                  "\tpm.expect(name).to.contain(c_branchName)\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test  address\", function () {\r",
                  "\tpm.expect(address).to.contain(c_address )\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test  cashBack\", function () {\r",
                  "\tpm.expect(cashBack).to.equal(c_cashback)\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test  cashBack\", function () {\r",
                  "\tpm.expect(rating).to.equal(5)\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Validating schema\", () => {\r",
                  "\tpm.response.to.have.jsonSchema(schema)\r",
                  "})"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "f3812e1f-5f0c-471e-af1d-b832717a0b2d",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"branchIds\": [\r\n    {{branchDataId}}\r\n  ],\r\n  \"merchantId\": {{merchantDataId}}\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{base_url}}/common-service/api/v1/branch/merchant-branches"
          },
          "response": []
        },
        {
          "name": "018 - delete branch",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fc8fb954-9b6a-4b7f-b377-de6ac8e39054",
                "exec": [
                  "pm.test(\"Status code is 204\", function () {\r",
                  "\tpm.response.to.have.status(204);\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"019 - delete merchant id\")\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "bef6c307-9111-4d9b-a4c0-fc6ceb1670c8",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "DELETE",
            "header": [],
            "url": "{{base_url}}/common-service/api/v1/branch/{{branchDataId}}"
          },
          "response": []
        },
        {
          "name": "019 - delete merchant id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bf9fd241-c4fd-46a7-9995-e7cecc32146e",
                "exec": [
                  "pm.test(\"Status code is 204\", function () {\r",
                  "\tpm.response.to.have.status(204);\r",
                  "});\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"020 - get deleted merchant id\")\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "4218be02-0af6-4f60-bd33-42d851a56e6f",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "DELETE",
            "header": [],
            "url": "{{base_url}}/common-service/api/v1/merchant/{{merchantDataId}}"
          },
          "response": []
        },
        {
          "name": "020 - get deleted merchant id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9b78b94e-f31e-4c63-8ca9-0282212ad3b2",
                "exec": [
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 404\", function () {\r",
                  "\tpm.response.to.have.status(404);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"404 NOT_FOUND\", () => {\r",
                  "\tpm.expect(jsonData.message).to.contain(\"404 NOT_FOUND \\\"merchant with given id not found\\\"\");\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"021 - get deleted branch\")\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "61361fe5-193f-42a5-9d22-229910d5ccd7",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/common-service/api/v1/merchant/{{merchantDataId}}"
          },
          "response": []
        },
        {
          "name": "021 - get deleted branch",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "164a2a20-2a23-4478-bbb5-f83ee0e7f13d",
                "exec": [
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 404\", function () {\r",
                  "\tpm.response.to.have.status(404);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"404 NOT_FOUND\", () => {\r",
                  "\tpm.expect(jsonData.message).to.contain(\"404 NOT_FOUND \\\"Branch Location with given id not found\\\"\");\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - get new user settings\")\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "f470b11e-e484-494d-b531-be1e27e41165",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "fd6cb3b0-e82c-4fd0-b0ae-d57928e2a29a",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{base_url}}/common-service/api/v1/branch/{{branchDataId}}"
          },
          "response": []
        }
      ],
      "_postman_id": "63d2f0c9-c174-471e-9225-9bc228829387"
    },
    {
      "name": "005 - profile-settings",
      "item": [
        {
          "name": "005 - 001 - notification settings negative",
          "item": [
            {
              "name": "001 - get new user settings",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8b1577c7-510d-40ad-b7d8-3312ae2b6ed0",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "\tpm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Test user receivePayments\", function () {\r",
                      "\tpm.expect(jsonData.notification.receivePayments).to.be.false;\r",
                      "});\r",
                      "pm.test(\"Test user receivePaymentRequest\", function () {\r",
                      "\tpm.expect(jsonData.notification.receivePaymentRequest).to.be.false;\r",
                      "});\r",
                      "pm.test(\"Test user promotions\", function () {\r",
                      "\tpm.expect(jsonData.notification.promotions).to.be.false;\r",
                      "});\r",
                      "pm.test(\"Test user emailNotification\", function () {\r",
                      "\tpm.expect(jsonData.notification.emailNotification).to.be.false;\r",
                      "});\r",
                      "pm.test(\"Test user useSecondBalance\", function () {\r",
                      "\tpm.expect(jsonData.payment.useSecondBalance).to.be.false;\r",
                      "});\r",
                      "pm.test(\"Test user incognito_mode\", function () {\r",
                      "\tpm.expect(jsonData.payment.incognito_mode).to.be.false;\r",
                      "});\r",
                      "pm.test(\"Test user locationServices\", function () {\r",
                      "\tpm.expect(jsonData.privacy.locationServices).to.be.false;\r",
                      "});\r",
                      "pm.test(\"Test user contacts\", function () {\r",
                      "\tpm.expect(jsonData.privacy.contacts).to.be.false;\r",
                      "});\r",
                      "pm.test(\"Test user photos\", function () {\r",
                      "\tpm.expect(jsonData.privacy.photos).to.be.false;\r",
                      "});\r",
                      "pm.test(\"Test user hideMobile\", function () {\r",
                      "\tpm.expect(jsonData.privacy.hideMobile).to.be.false;\r",
                      "});\r",
                      "pm.test(\"Test user hideTransactionAmount\", function () {\r",
                      "\tpm.expect(jsonData.privacy.hideTransactionAmount).to.be.false;\r",
                      "});\r",
                      "pm.test(\"Test user defaultFeedPrivacy\", function () {\r",
                      "\tpm.expect(jsonData.privacy.defaultFeedPrivacy).to.contain(\"PRIVATE\");\r",
                      "});\r",
                      "pm.test(\"Test user loginWithTouchID\", function () {\r",
                      "\tpm.expect(jsonData.security.loginWithTouchID).to.be.false;\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - notification settings update emptyParameters\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "6e058d7a-f389-4561-a04f-e4abab70931e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "GET",
                "header": [],
                "url": "{{base_url}}/common-service/api/v1/profile/settings"
              },
              "response": []
            },
            {
              "name": "002 - notification settings update emptyParameters",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6b3fbfe6-1c8b-488e-9fd5-e5c2241a4e19",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Test user receivePayments\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"Wrong emailNotification. Must not be null\");\r",
                      "});\r",
                      "pm.test(\"Test user receivePayments\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"Wrong receivePaymentRequest. Must not be null\");\r",
                      "});\r",
                      "pm.test(\"Test user receivePayments\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"Wrong receivePayments. Must not be null\");\r",
                      "});\r",
                      "pm.test(\"Test user receivePayments\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"Wrong promotions. Must not be null\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - notification settings update emptyParameter emailNotification\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "f22ae3e2-9013-435b-815b-e425dfd34c3b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"emailNotification\": \"\",\r\n  \"promotions\": \"\",\r\n  \"receivePaymentRequest\": \"\",\r\n  \"receivePayments\": \"\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/notification"
              },
              "response": []
            },
            {
              "name": "003 - notification settings update emptyParameter emailNotification",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3c4ac3a7-b1a7-45ab-9313-aad2eb1a79fe",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Test user emailNotification\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"Wrong emailNotification. Must not be null\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - notification settings update emptyParameter promotions\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "1abc80fe-92ec-4679-9681-7866460a7143",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"emailNotification\": \"\",\r\n  \"promotions\": false,\r\n  \"receivePaymentRequest\": false,\r\n  \"receivePayments\": false\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/notification"
              },
              "response": []
            },
            {
              "name": "004 - notification settings update emptyParameter promotions",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1ed1b545-c0c1-4400-83cb-8d65e1be63cb",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Test user promotions\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"Wrong promotions. Must not be null\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - notification settings update emptyParameter promotions Copy\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "f53c0a98-831f-48ad-949d-41097f8c1b74",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"emailNotification\": false,\r\n  \"promotions\": \"\",\r\n  \"receivePaymentRequest\": false,\r\n  \"receivePayments\": false\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/notification"
              },
              "response": []
            },
            {
              "name": "004 - notification settings update emptyParameter promotions Copy",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "30cfa349-6422-40c8-9b1a-12fb996cd66b",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Test user receivePaymentRequest\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"Wrong receivePaymentRequest. Must not be null\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - notification settings update emptyParameter promotions Copy 2\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "e0018da2-cfe3-48c1-9ec1-5df005cd072d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"emailNotification\": false,\r\n  \"promotions\": false,\r\n  \"receivePaymentRequest\": \"\",\r\n  \"receivePayments\": false\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/notification"
              },
              "response": []
            },
            {
              "name": "004 - notification settings update emptyParameter promotions Copy 2",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fad3d071-fea7-4cb1-a738-7f7cd950415f",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Test user receivePayments\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"Wrong receivePayments. Must not be null\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"005 - notification settings update incorrectParameters\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "df72c584-c999-488c-961a-708cc229d5aa",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"emailNotification\": false,\r\n  \"promotions\": false,\r\n  \"receivePaymentRequest\": false,\r\n  \"receivePayments\": \"\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/notification"
              },
              "response": []
            },
            {
              "name": "005 - notification settings update incorrectParameters",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f56728e9-9008-460a-a8ff-24895ed777fc",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Test can't be parsed to Boolean\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"t can't be parsed to Boolean\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"006 - notification settings update incorrectParameter emailNotification\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "09d6da53-df03-4605-bde0-a47b1874f014",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"emailNotification\": \"t\",\r\n  \"promotions\": \"t\",\r\n  \"receivePaymentRequest\": \"t\",\r\n  \"receivePayments\": \"t\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/notification"
              },
              "response": []
            },
            {
              "name": "006 - notification settings update incorrectParameter emailNotification",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f1d6fd5b-6d62-44c7-8ae8-edcd755c0e98",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Test can't be parsed to Boolean\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"t can't be parsed to Boolean\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - profile details Update empty parameters\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "d394962a-9683-4749-8713-f2ca7cdaca33",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"emailNotification\": \"t\",\r\n  \"promotions\": false,\r\n  \"receivePaymentRequest\": false,\r\n  \"receivePayments\": false\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/notification"
              },
              "response": []
            },
            {
              "name": "007 - notification settings update incorrectParameter promotions",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83d24432-fcd9-434e-8917-1517beb4f013",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Test can't be parsed to Boolean\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"t can't be parsed to Boolean\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"007 - notification settings update incorrectParameter promotions\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "0cfc0413-a4b9-40fa-9f87-35e617243643",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"emailNotification\": false,\r\n  \"promotions\": \"t\",\r\n  \"receivePaymentRequest\": false,\r\n  \"receivePayments\": false\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/notification"
              },
              "response": []
            },
            {
              "name": "008 - notification settings update incorrectParameter receivePaymentRequest",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95f6c7f3-a7aa-44af-9ee2-0d99633f3843",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Test can't be parsed to Boolean\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"t can't be parsed to Boolean\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"009 - notification settings update incorrectParameter receivePayments\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "d4748584-8349-46c0-b34c-94d8a173c550",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"emailNotification\": false,\r\n  \"promotions\": false,\r\n  \"receivePaymentRequest\": \"t\",\r\n  \"receivePayments\": false\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/notification"
              },
              "response": []
            },
            {
              "name": "009 - notification settings update incorrectParameter receivePayments",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "57b251dd-6843-4d72-90e0-f098b2e017c2",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Test can't be parsed to Boolean\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"t can't be parsed to Boolean\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"010 - notification settings update moreParameters\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "df82370a-8dcc-414c-afb1-dff220d92539",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"emailNotification\": false,\r\n  \"promotions\": false,\r\n  \"receivePaymentRequest\": false,\r\n  \"receivePayments\": \"t\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/notification"
              },
              "response": []
            },
            {
              "name": "010 - notification settings update moreParameters",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8afad3b2-ae0b-4c3b-88a1-02b33f67d460",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Test BAD_REQUEST\", function () {\r",
                      "\tpm.expect(jsonData.status).to.be.contain(\"BAD_REQUEST\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"011 - notification settings update moreParameter emailNotification\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "644feeef-9ed3-4ce1-b82e-4e767d6fd865",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"emailNotification\": \"{{access_token}}\",\r\n  \"promotions\": \"{{access_token}}\",\r\n  \"receivePaymentRequest\": \"{{access_token}}\",\r\n  \"receivePayments\": \"{{access_token}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/notification"
              },
              "response": []
            },
            {
              "name": "011 - notification settings update moreParameter emailNotification",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "66906eb4-b5a0-4696-815e-cf58b97d56f4",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Test user emailNotification\", function () {\r",
                      "\tpm.expect(jsonData.status).to.be.contain(\"BAD_REQUEST\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"012 - notification settings update moreParameter promotions\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "dc3ff31b-fe66-4856-b6c4-4b52d014a120",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"emailNotification\": \"{{access_token}}\",\r\n  \"promotions\": false,\r\n  \"receivePaymentRequest\": false,\r\n  \"receivePayments\": false\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/notification"
              },
              "response": []
            },
            {
              "name": "012 - notification settings update moreParameter promotions",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f1810475-4498-4281-a5d0-245c4a47f18f",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Test user promotions\", function () {\r",
                      "\tpm.expect(jsonData.error).to.be.contain(\"Bad Request\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"013 - notification settings update moreParameter receivePaymentRequest\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "5b5c9815-a978-4600-a2e3-17ac057f3b04",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"emailNotification\": false,\r\n  \"promotions\": {{access_token}},\r\n  \"receivePaymentRequest\": false,\r\n  \"receivePayments\": false\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/notification"
              },
              "response": []
            },
            {
              "name": "013 - notification settings update moreParameter receivePaymentRequest",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b33df813-47ca-4f83-ad9f-361cf23c6a53",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Test user receivePaymentRequest\", function () {\r",
                      "\tpm.expect(jsonData.status).to.be.contain(\"BAD_REQUEST\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"014 - notification settings update moreParameter receivePayments\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "e87906c0-b9e1-40d6-a456-7cff3e218b11",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"emailNotification\": false,\r\n  \"promotions\": false,\r\n  \"receivePaymentRequest\": \"{{access_token}}\",\r\n  \"receivePayments\": false\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/notification"
              },
              "response": []
            },
            {
              "name": "014 - notification settings update moreParameter receivePayments",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0533e015-4b69-4210-8d7c-0f6fefc8918c",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test(\"Test user receivePayments\", function () {\r",
                      "\tpm.expect(jsonData.status).to.be.contain(\"BAD_REQUEST\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - payment settings update emptyParameters\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "84606b1a-6426-431d-a040-cce521edc4fa",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"emailNotification\": false,\r\n  \"promotions\": false,\r\n  \"receivePaymentRequest\": false,\r\n  \"receivePayments\": \"{{access_token}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/notification"
              },
              "response": []
            }
          ],
          "_postman_id": "81ffcb10-cd09-4a97-b64b-69aeeb361717",
          "_postman_isSubFolder": true
        },
        {
          "name": "005 - 002 - payment settings negative",
          "item": [
            {
              "name": "001 - payment settings update emptyParameters",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e8da17ab-fd92-4878-b9ac-126c9d389d9a",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Test user useSecondBalance\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"Wrong useSecondBalance. Must not be null\");\r",
                      "});\r",
                      "pm.test(\"Test user incognito_mode\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"Wrong incognito_mode. Must not be null\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - notification settings update emptyParameters\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "63087209-6ced-4cf9-85cf-31e11d5d0d7d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"incognito_mode\": \"\",\r\n  \"useSecondBalance\": \"\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/payment"
              },
              "response": []
            },
            {
              "name": "002 - payment settings update emptyParameter incognito_mode",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8c077709-9379-4282-9e6a-cc2a6df25962",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Test user incognito_mode\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"Wrong incognito_mode. Must not be null\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - notification settings update emptyParameters\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "10e11462-8524-4f05-aa34-51e4ff20aa1d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"incognito_mode\": \"\",\r\n  \"useSecondBalance\": false\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/payment"
              },
              "response": []
            },
            {
              "name": "003 - payment settings update emptyParamete useSecondBalance",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "280232d4-aca8-44ef-8d8d-37e2cbcddefc",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Test user useSecondBalance\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"Wrong useSecondBalance. Must not be null\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - notification settings update emptyParameters\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "da5cf05c-ce90-475f-a3bd-c7cae233bacd",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"incognito_mode\": false,\r\n  \"useSecondBalance\": \"\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/payment"
              },
              "response": []
            },
            {
              "name": "004 - payment settings update incorrectParameters",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "31e65b4d-b7b7-4ebb-a6d1-1c9f6e8d3e2d",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Test user useSecondBalance\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"can't be parsed to Boolean\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - notification settings update emptyParameters\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "df43fd3f-3701-46a8-85e2-141531a1d6cd",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"incognito_mode\": \"t\",\r\n  \"useSecondBalance\": \"t\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/payment"
              },
              "response": []
            },
            {
              "name": "005 - payment settings update incorrectParameter incognito_mode",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "783d0ce9-ebce-4c1b-bef0-db5caeae16af",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Test user incognito_mode\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"can't be parsed to Boolean\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - notification settings update emptyParameters\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "370e8df9-0a71-4e3c-8efc-529913a77c94",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"incognito_mode\": \"t\",\r\n  \"useSecondBalance\": false\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/payment"
              },
              "response": []
            },
            {
              "name": "006 - payment settings update incorrectParameter useSecondBalance",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "03eff9fc-ad39-4325-a217-23b32bda51ed",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Test user useSecondBalance\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"can't be parsed to Boolean\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - notification settings update emptyParameters\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "523d729f-6ac7-42cc-9645-5b57f31ebc71",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"incognito_mode\": false,\r\n  \"useSecondBalance\": \"t\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/payment"
              },
              "response": []
            },
            {
              "name": "007 - payment settings update moreParameters",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8911c2b9-d03e-4f2c-a16d-06c6c708e1cd",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Test user useSecondBalance\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"can't be parsed to Boolean\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - notification settings update emptyParameters\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "a1855a9a-85fc-46e8-becc-8b988f0f7974",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"incognito_mode\": \"{{access_token}}\",\r\n  \"useSecondBalance\": \"{{access_token}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/payment"
              },
              "response": []
            },
            {
              "name": "008 - payment settings update moreParameter incognito_mode",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "da38d478-909a-4962-ae6b-9ed2c3c59a9a",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Test user incognito_mode\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"can't be parsed to Boolean\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - notification settings update emptyParameters\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "8336680c-1e6a-4d52-9cfe-2d2bdce08ed2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"incognito_mode\": \"{{access_token}}\",\r\n  \"useSecondBalance\": false\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/payment"
              },
              "response": []
            },
            {
              "name": "009 - payment settings update moreParameters useSecondBalance",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "321f5277-cac6-4b45-9535-28f2afaa3679",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Test user useSecondBalance\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"can't be parsed to Boolean\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - notification settings update emptyParameters\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "133aaf29-2104-4e29-bf6d-2bd24141cf7a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"incognito_mode\": false,\r\n  \"useSecondBalance\": \"{{access_token}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/payment"
              },
              "response": []
            }
          ],
          "_postman_id": "d5a580a8-9cb1-45b5-bad2-278c7b449eb6",
          "_postman_isSubFolder": true
        },
        {
          "name": "005 - 003 - privacy settings negative",
          "item": [
            {
              "name": "001 - privacy settings update emptyParameters",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a1e60af2-4e19-4d74-88d7-b5582da3d3ad",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Test user hideTransactionAmount\", function () {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong hideTransactionAmount. Must not be null\");\r",
                      "});\r",
                      "pm.test(\"Test user locationServices\", function () {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong locationServices. Must not be null\");\r",
                      "});\r",
                      "pm.test(\"Test user defaultFeedPrivacy\", function () {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong defaultFeedPrivacy. Must not be null\");\r",
                      "});\r",
                      "pm.test(\"Test user contacts\", function () {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong contacts. Must not be null\");\r",
                      "});\r",
                      "pm.test(\"Test user photos\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"Wrong photos. Must not be null\");\r",
                      "});\r",
                      "pm.test(\"Test user hideMobile\", function () {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong hideMobile. Must not be null\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - privacy settings update emptyParameter contacts\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "d825db70-7551-40db-99de-6232f9384cb3",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"contacts\": \"\",\r\n  \r\n  \"hideMobile\": \"\",\r\n  \"hideTransactionAmount\": \"\",\r\n  \"locationServices\": \"\",\r\n  \"photos\": \"\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/privacy"
              },
              "response": []
            },
            {
              "name": "002 - privacy settings update emptyParameter contacts",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7eb22cff-7ed4-45f4-aa84-815d8482ff05",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Test user contacts\", function () {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong contacts. Must not be null\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - privacy settings update emptyParameter defaultFeedPrivacy\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "63d54f04-91df-44a4-9b2e-1c9cca73dd7c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"contacts\": \"\",\r\n  \"defaultFeedPrivacy\": \"PRIVATE\",\r\n  \"hideMobile\": false,\r\n  \"hideTransactionAmount\": false,\r\n  \"locationServices\": false,\r\n  \"photos\": false\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/privacy"
              },
              "response": []
            },
            {
              "name": "003 - privacy settings update emptyParameter defaultFeedPrivacy",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fbaac5d0-b9a1-462b-86ec-8f5a5b2fb562",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Test user defaultFeedPrivacy\", function () {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong defaultFeedPrivacy. Must not be null\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - privacy settings update emptyParameter hideMobile\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "1ed1e187-63a5-45bd-b3be-8a9da9ecc4df",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"contacts\": \"false\",\r\n  \r\n  \"hideMobile\": false,\r\n  \"hideTransactionAmount\": false,\r\n  \"locationServices\": false,\r\n  \"photos\": false\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/privacy"
              },
              "response": []
            },
            {
              "name": "004 - privacy settings update emptyParameter hideMobile",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "623518b5-9418-4073-8b9f-15b5281a3d7f",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Test user hideMobile\", function () {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong hideMobile. Must not be null\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"005 - privacy settings update emptyParameter hideTransactionAmount\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "eff0a15a-b652-4f90-9697-61218ecee8b4",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"contacts\": false,\r\n  \"defaultFeedPrivacy\": \"PRIVATE\",\r\n  \"hideMobile\": \"\",\r\n  \"hideTransactionAmount\": false,\r\n  \"locationServices\": false,\r\n  \"photos\": false\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/privacy"
              },
              "response": []
            },
            {
              "name": "005 - privacy settings update emptyParameter hideTransactionAmount",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8966282f-fec6-4c12-aa1f-7ee67d43218c",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Test user hideTransactionAmount\", function () {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong hideTransactionAmount. Must not be null\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"006 - privacy settings update emptyParameter locationServices\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "b0b054af-802c-49f4-8e59-c08dcc94ab16",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"contacts\": false,\r\n  \"defaultFeedPrivacy\": \"PRIVATE\",\r\n  \"hideMobile\": false,\r\n  \"hideTransactionAmount\": \"\",\r\n  \"locationServices\": false,\r\n  \"photos\": false\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/privacy"
              },
              "response": []
            },
            {
              "name": "006 - privacy settings update emptyParameter locationServices",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0f6d6954-1a50-42b0-9538-3cfb6abbae22",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Test user locationServices\", function () {\r",
                      "\tpm.expect(jsonData.message).to.contain(\"Wrong locationServices. Must not be null\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"007 - privacy settings update emptyParameter photos\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "50ca9284-fd8b-4ecf-86ea-79a23c8c4ea2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"contacts\": false,\r\n  \"defaultFeedPrivacy\": \"PRIVATE\",\r\n  \"hideMobile\": false,\r\n  \"hideTransactionAmount\": false,\r\n  \"locationServices\": \"\",\r\n  \"photos\": false\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/privacy"
              },
              "response": []
            },
            {
              "name": "007 - privacy settings update emptyParameter photos",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a64a6848-7e1a-4bdd-b752-6c0d09829265",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Test user photos\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"Wrong photos. Must not be null\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"008 - privacy settings update incorrectParameters\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "44df3ab3-6b9a-4aea-a253-67516096c1c2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"contacts\": false,\r\n  \"defaultFeedPrivacy\": \"PRIVATE\",\r\n  \"hideMobile\": false,\r\n  \"hideTransactionAmount\": false,\r\n  \"locationServices\": false,\r\n  \"photos\": \"\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/privacy"
              },
              "response": []
            },
            {
              "name": "008 - privacy settings update incorrectParameters",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6f58d4dd-a6ce-4635-b9e0-efb3743e5d79",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Test privacy\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"can't be parsed to Boolean\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"009 - privacy settings update incorrectParameter contacts\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "8eb838ca-53c7-4847-b70a-815f06073340",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"contacts\": \"t\",\r\n  \"defaultFeedPrivacy\": \"t\",\r\n  \"hideMobile\": \"t\",\r\n  \"hideTransactionAmount\": \"t\",\r\n  \"locationServices\": \"t\",\r\n  \"photos\": \"t\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/privacy"
              },
              "response": []
            },
            {
              "name": "009 - privacy settings update incorrectParameter contacts",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8c31930b-ca19-4509-ae3a-35e2ed186dc7",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Test contacts\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"can't be parsed to Boolean\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"010 - privacy settings update incorrectParameter defaultFeedPrivacy\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "81bf2be0-c3d4-4c20-a967-c43b510c6f26",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"contacts\": \"t\",\r\n  \"defaultFeedPrivacy\": \"PRIVATE\",\r\n  \"hideMobile\": false,\r\n  \"hideTransactionAmount\": false,\r\n  \"locationServices\": false,\r\n  \"photos\": false\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/privacy"
              },
              "response": []
            },
            {
              "name": "010 - privacy settings update incorrectParameter defaultFeedPrivacy",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83d339df-0173-4cb5-9d92-094852e98baa",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Test defaultFeedPrivacy\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"can't be parsed to MessagePrivacy.MessagePrivacy must be one of this: PUBLIC, FRIEND, PRIVATE, NOT_PUBLISH\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"011 - privacy settings update incorrectParameter hideMobile\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "da086c16-c0d2-4cc6-8593-1d27ce75618c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"contacts\": false,\r\n  \"defaultFeedPrivacy\": \"t\",\r\n  \"hideMobile\": false,\r\n  \"hideTransactionAmount\": false,\r\n  \"locationServices\": false,\r\n  \"photos\": false\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/privacy"
              },
              "response": []
            },
            {
              "name": "011 - privacy settings update incorrectParameter hideMobile",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2542e4e1-be57-4a2f-aaba-fcb1d9625ff6",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Test hideMobile\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"can't be parsed to Boolean\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"012 - privacy settings update incorrectParameter hideTransactionAmount\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "fbb96684-1d16-4ab9-8b95-866e2fda2176",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"contacts\": false,\r\n  \"defaultFeedPrivacy\": \"PRIVATE\",\r\n  \"hideMobile\": \"t\",\r\n  \"hideTransactionAmount\": false,\r\n  \"locationServices\": false,\r\n  \"photos\": false\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/privacy"
              },
              "response": []
            },
            {
              "name": "012 - privacy settings update incorrectParameter hideTransactionAmount",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0bf79437-431b-4ecd-8ba3-ac4f606bf059",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Test hideTransactionAmount\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"can't be parsed to Boolean\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"013 - privacy settings update incorrectParameter locationServices\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "dbe50b0d-eadc-481f-b08f-df809a738d2f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"contacts\": false,\r\n  \"defaultFeedPrivacy\": \"PRIVATE\",\r\n  \"hideMobile\": false,\r\n  \"hideTransactionAmount\": \"t\",\r\n  \"locationServices\": false,\r\n  \"photos\": false\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/privacy"
              },
              "response": []
            },
            {
              "name": "013 - privacy settings update incorrectParameter locationServices",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "96301d47-9224-48b3-ab32-078164081e0e",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Test locationServices\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"can't be parsed to Boolean\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"014 - privacy settings update incorrectParameter photos\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "12782433-23e7-4333-a51a-6ea4420b8c41",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"contacts\": false,\r\n  \"defaultFeedPrivacy\": \"PRIVATE\",\r\n  \"hideMobile\": false,\r\n  \"hideTransactionAmount\": false,\r\n  \"locationServices\": \"t\",\r\n  \"photos\": false\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/privacy"
              },
              "response": []
            },
            {
              "name": "014 - privacy settings update incorrectParameter photos",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "141a5ec7-3073-49cf-8f52-f522c604f2b0",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Test photos\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"can't be parsed to Boolean\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"015 - privacy settings update maxParameters\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "04f877e7-6c8e-4a89-8168-e38f4783a97a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"contacts\": false,\r\n  \"defaultFeedPrivacy\": \"PRIVATE\",\r\n  \"hideMobile\": false,\r\n  \"hideTransactionAmount\": false,\r\n  \"locationServices\": false,\r\n  \"photos\": \"t\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/privacy"
              },
              "response": []
            },
            {
              "name": "015 - privacy settings update maxParameters",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fc11e1a0-028e-4179-bbb9-853a96913497",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Test privacy\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"JSON parse error: Unrecognized token\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"016 - privacy settings update maxParameter contacts\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "763b08b6-343c-4e3a-9e2e-55b182dd2b26",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"contacts\": {{access_token}},\r\n  \"defaultFeedPrivacy\": {{access_token}},\r\n  \"hideMobile\": {{access_token}},\r\n  \"hideTransactionAmount\": {{access_token}},\r\n  \"locationServices\": {{access_token}},\r\n  \"photos\": {{access_token}}\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/privacy"
              },
              "response": []
            },
            {
              "name": "016 - privacy settings update maxParameter contacts",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "11d66aeb-2cd6-40d4-a5dc-a8db198517a9",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Test contacts\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"JSON parse error: Unrecognized token\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"017 - privacy settings update maxParameter defaultFeedPrivacy\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "4091f436-18ea-4942-8360-acba9c768dcb",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"contacts\": {{access_token}},\r\n  \"defaultFeedPrivacy\": \"PRIVATE\",\r\n  \"hideMobile\": false,\r\n  \"hideTransactionAmount\": false,\r\n  \"locationServices\": false,\r\n  \"photos\": false\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/privacy"
              },
              "response": []
            },
            {
              "name": "017 - privacy settings update maxParameter defaultFeedPrivacy",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "16dee815-5fea-47ff-a760-352d15c93877",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Test defaultFeedPrivacy\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"JSON parse error: Unrecognized token\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"018 - privacy settings update maxParameter hideMobile\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "2b17c051-7530-4e65-ba04-bf40b107670f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"contacts\": false,\r\n  \"defaultFeedPrivacy\": {{access_token}},\r\n  \"hideMobile\": false,\r\n  \"hideTransactionAmount\": false,\r\n  \"locationServices\": false,\r\n  \"photos\": false\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/privacy"
              },
              "response": []
            },
            {
              "name": "018 - privacy settings update maxParameter hideMobile",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac94d438-c9c5-411e-9a21-5dce6759b4ac",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Test hideMobile\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"JSON parse error: Unrecognized token\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"019 - privacy settings update maxParameter hideTransactionAmount\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "9df55f28-3ab9-4e65-ba8f-f0b156b0d04f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"contacts\": false,\r\n  \"defaultFeedPrivacy\": \"PRIVATE\",\r\n  \"hideMobile\": {{access_token}},\r\n  \"hideTransactionAmount\": false,\r\n  \"locationServices\": false,\r\n  \"photos\": false\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/privacy"
              },
              "response": []
            },
            {
              "name": "019 - privacy settings update maxParameter hideTransactionAmount",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2514b583-d332-429f-97b8-3d364a6f3d4c",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Test hideTransactionAmount\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"JSON parse error: Unrecognized token\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"020 - privacy settings update maxParameter locationServices\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "d61a6462-23d5-48d2-9110-03f15f09d009",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"contacts\": false,\r\n  \"defaultFeedPrivacy\": \"PRIVATE\",\r\n  \"hideMobile\": false,\r\n  \"hideTransactionAmount\": {{access_token}},\r\n  \"locationServices\": false,\r\n  \"photos\": false\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/privacy"
              },
              "response": []
            },
            {
              "name": "020 - privacy settings update maxParameter locationServices",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c4d696f3-5493-429f-b545-f62ea205b4eb",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Test locationServices\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"JSON parse error: Unrecognized token\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"021 - privacy settings update maxParameter photos\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "6a5d134b-4797-48c5-8aaf-e0e714e003a4",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"contacts\": false,\r\n  \"defaultFeedPrivacy\": \"PRIVATE\",\r\n  \"hideMobile\": false,\r\n  \"hideTransactionAmount\": false,\r\n  \"locationServices\": {{access_token}},\r\n  \"photos\": false\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/privacy"
              },
              "response": []
            },
            {
              "name": "021 - privacy settings update maxParameter photos",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6da2a603-bf8b-44c8-bfe2-1c3411faec9a",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Test photos\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"JSON parse error: Unrecognized token\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - get security settings emptyParameter\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "5f96f200-31ad-49ca-bedc-ed9cab22ac89",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"contacts\": false,\r\n  \"defaultFeedPrivacy\": \"PRIVATE\",\r\n  \"hideMobile\": false,\r\n  \"hideTransactionAmount\": false,\r\n  \"locationServices\": false,\r\n  \"photos\": {{access_token}}\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/privacy"
              },
              "response": []
            }
          ],
          "_postman_id": "a8bab332-67cb-473b-873a-25f4fd2391ef",
          "_postman_isSubFolder": true
        },
        {
          "name": "005 - 004 - security settings negative",
          "item": [
            {
              "name": "001 - get security settings emptyParameter",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "593f70f9-1c50-4058-a2dd-b4b09a753814",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Test user loginWithTouchID\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"Wrong loginWithTouchID. Must not be null\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - get security settings incorrectParameter\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "c1509823-ddb7-49f7-9e32-cd9ea90d2724",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"loginWithTouchID\": \"\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/security"
              },
              "response": []
            },
            {
              "name": "002 - get security settings incorrectParameter",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8335816c-2773-42a7-8e59-072259c0d40f",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Test user loginWithTouchID\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"can't be parsed to Boolean\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - get security settings moreParameter\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "1ea5047b-1023-441e-8121-c2ef35b0e975",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"loginWithTouchID\": \"t\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/security"
              },
              "response": []
            },
            {
              "name": "003 - get security settings moreParameter",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "560248bd-cc47-4e25-8066-c5040a7f97b5",
                    "exec": [
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "\tpm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Test user loginWithTouchID\", function () {\r",
                      "\tpm.expect(jsonData.message).to.be.contain(\"can't be parsed to Boolean\");\r",
                      "});\r",
                      "\r",
                      "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - notification settings update\")"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "cc113948-6f33-4455-b49f-8749318d79b2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"loginWithTouchID\": \"{{access_token}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{base_url}}/common-service/api/v1/profile/settings/security"
              },
              "response": []
            }
          ],
          "_postman_id": "416f135f-1a65-4c2e-9b50-d5a896580f68",
          "_postman_isSubFolder": true
        },
        {
          "name": "001 - notification settings update",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b2699869-03da-4f81-a8a5-694c765ae137",
                "exec": [
                  "pm.test(\"Status code is 205\", function () {\r",
                  "\tpm.response.to.have.status(205);\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - notification settings\")"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "bb40ff70-6c20-4a8b-a6b0-a308d3dea8c2",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"emailNotification\": true,\r\n  \"promotions\": true,\r\n  \"receivePaymentRequest\": true,\r\n  \"receivePayments\": true\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{base_url}}/common-service/api/v1/profile/settings/notification"
          },
          "response": []
        },
        {
          "name": "002 - notification settings",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ac2ca615-6ec1-4943-89f5-3951c909fb84",
                "exec": [
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "\tpm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Test user receivePayments\", function () {\r",
                  "\tpm.expect(jsonData.receivePayments).to.be.true;\r",
                  "});\r",
                  "pm.test(\"Test user receivePaymentRequest\", function () {\r",
                  "\tpm.expect(jsonData.receivePaymentRequest).to.be.true;\r",
                  "});\r",
                  "pm.test(\"Test user promotions\", function () {\r",
                  "\tpm.expect(jsonData.promotions).to.be.true;\r",
                  "});\r",
                  "pm.test(\"Test user emailNotification\", function () {\r",
                  "\tpm.expect(jsonData.emailNotification).to.be.true;\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - payment settings update\")"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "a6af5f3f-bb38-4f6c-b8f2-acc91e02fd54",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/common-service/api/v1/profile/settings/notification"
          },
          "response": []
        },
        {
          "name": "003 - payment settings update",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a93f13ba-b83e-420e-b835-cded2bfd5e6a",
                "exec": [
                  "pm.test(\"Status code is 205\", function () {\r",
                  "\tpm.response.to.have.status(205);\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - get payment settings\")"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "2ec38ee0-1d36-4742-b58a-717c79a55b01",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"incognito_mode\": true,\r\n  \"useSecondBalance\": true\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{base_url}}/common-service/api/v1/profile/settings/payment"
          },
          "response": []
        },
        {
          "name": "004 - get payment settings",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e4a6ff97-aa38-45ee-b7f0-043c49c0f19a",
                "exec": [
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "\tpm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Test user useSecondBalance\", function () {\r",
                  "\tpm.expect(jsonData.useSecondBalance).to.be.true;\r",
                  "});\r",
                  "pm.test(\"Test user incognito_mode\", function () {\r",
                  "\tpm.expect(jsonData.incognito_mode).to.be.true;\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"005 - privacy settings update\")"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "48ec0dca-9e82-44bc-a3c4-11b1fa914da1",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/common-service/api/v1/profile/settings/payment"
          },
          "response": []
        },
        {
          "name": "005 - privacy settings update",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "40668f79-6e4a-406f-bdbd-046f1960544b",
                "exec": [
                  "pm.test(\"Status code is 205\", function () {\r",
                  "\tpm.response.to.have.status(205);\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"006 - get privacy settings\")"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "6aa4539e-3a20-432e-a144-e5ad87103d9a",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"contacts\": true,\r\n  \"defaultFeedPrivacy\": \"FRIEND\",\r\n  \"hideMobile\": true,\r\n  \"hideTransactionAmount\": true,\r\n  \"locationServices\": true,\r\n  \"photos\": true\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{base_url}}/common-service/api/v1/profile/settings/privacy"
          },
          "response": []
        },
        {
          "name": "006 - get privacy settings",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8677b656-b00f-4660-839d-eae0b1d126a0",
                "exec": [
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "\tpm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Test user locationServices\", function () {\r",
                  "\tpm.expect(jsonData.locationServices).to.be.true;\r",
                  "});\r",
                  "pm.test(\"Test user contacts\", function () {\r",
                  "\tpm.expect(jsonData.contacts).to.be.true;\r",
                  "});\r",
                  "pm.test(\"Test user photos\", function () {\r",
                  "\tpm.expect(jsonData.photos).to.be.true;\r",
                  "});\r",
                  "pm.test(\"Test user hideMobile\", function () {\r",
                  "\tpm.expect(jsonData.hideMobile).to.be.true;\r",
                  "});\r",
                  "pm.test(\"Test user hideTransactionAmount\", function () {\r",
                  "\tpm.expect(jsonData.hideTransactionAmount).to.be.true;\r",
                  "});\r",
                  "pm.test(\"Test user defaultFeedPrivacy\", function () {\r",
                  "\tpm.expect(jsonData.defaultFeedPrivacy).to.contain(\"FRIEND\");\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"007 - privacy settings update defaultFeedPrivacy\")"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "a99ad8f4-c01b-4d0d-965d-9dbfb8a0ef7e",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/common-service//api/v1/profile/settings/privacy"
          },
          "response": []
        },
        {
          "name": "007 - privacy settings update defaultFeedPrivacy",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5eb14226-170e-44e1-a744-04f8b38d17ed",
                "exec": [
                  "pm.test(\"Status code is 205\", function () {\r",
                  "\tpm.response.to.have.status(205);\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"008 - get privacy settings\")"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "0fec3b5d-e4a6-443c-a582-d25c4bce21d2",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"contacts\": true,\r\n  \"defaultFeedPrivacy\": \"PUBLIC\",\r\n  \"hideMobile\": true,\r\n  \"hideTransactionAmount\": true,\r\n  \"locationServices\": true,\r\n  \"photos\": true\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{base_url}}/common-service/api/v1/profile/settings/privacy"
          },
          "response": []
        },
        {
          "name": "008 - get privacy settings",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f6bd6523-c07e-4d7a-9217-a5da48f7e99e",
                "exec": [
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "\tpm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Test user locationServices\", function () {\r",
                  "\tpm.expect(jsonData.locationServices).to.be.true;\r",
                  "});\r",
                  "pm.test(\"Test user contacts\", function () {\r",
                  "\tpm.expect(jsonData.contacts).to.be.true;\r",
                  "});\r",
                  "pm.test(\"Test user photos\", function () {\r",
                  "\tpm.expect(jsonData.photos).to.be.true;\r",
                  "});\r",
                  "pm.test(\"Test user hideMobile\", function () {\r",
                  "\tpm.expect(jsonData.hideMobile).to.be.true;\r",
                  "});\r",
                  "pm.test(\"Test user hideTransactionAmount\", function () {\r",
                  "\tpm.expect(jsonData.hideTransactionAmount).to.be.true;\r",
                  "});\r",
                  "pm.test(\"Test user defaultFeedPrivacy\", function () {\r",
                  "\tpm.expect(jsonData.defaultFeedPrivacy).to.contain(\"PUBLIC\");\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"009 - privacy settings update defaultFeedPrivacy\")"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "4abdd694-c4ff-4bd4-8363-8bf7f62a96b4",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/common-service//api/v1/profile/settings/privacy"
          },
          "response": []
        },
        {
          "name": "009 - privacy settings update defaultFeedPrivacy",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8454f211-7d69-4051-9895-ca25290133d2",
                "exec": [
                  "pm.test(\"Status code is 205\", function () {\r",
                  "\tpm.response.to.have.status(205);\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"010 - get privacy settings\")"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "0ba51770-03d0-49bf-97dc-bb74c9120951",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"contacts\": true,\r\n  \"defaultFeedPrivacy\": \"NOT_PUBLISH\",\r\n  \"hideMobile\": true,\r\n  \"hideTransactionAmount\": true,\r\n  \"locationServices\": true,\r\n  \"photos\": true\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{base_url}}/common-service/api/v1/profile/settings/privacy"
          },
          "response": []
        },
        {
          "name": "010 - get privacy settings",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bda44667-32ca-4df9-9698-5e3463eaed03",
                "exec": [
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "\tpm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Test user locationServices\", function () {\r",
                  "\tpm.expect(jsonData.locationServices).to.be.true;\r",
                  "});\r",
                  "pm.test(\"Test user contacts\", function () {\r",
                  "\tpm.expect(jsonData.contacts).to.be.true;\r",
                  "});\r",
                  "pm.test(\"Test user photos\", function () {\r",
                  "\tpm.expect(jsonData.photos).to.be.true;\r",
                  "});\r",
                  "pm.test(\"Test user hideMobile\", function () {\r",
                  "\tpm.expect(jsonData.hideMobile).to.be.true;\r",
                  "});\r",
                  "pm.test(\"Test user hideTransactionAmount\", function () {\r",
                  "\tpm.expect(jsonData.hideTransactionAmount).to.be.true;\r",
                  "});\r",
                  "pm.test(\"Test user defaultFeedPrivacy\", function () {\r",
                  "\tpm.expect(jsonData.defaultFeedPrivacy).to.contain(\"NOT_PUBLISH\");\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"011 - get security settings\")"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "b96738ca-52ac-4124-98fc-f401857bb6d4",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/common-service//api/v1/profile/settings/privacy"
          },
          "response": []
        },
        {
          "name": "011 - get security settings",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c4c5ca1b-4cce-476a-b6a3-2e947270e99b",
                "exec": [
                  "pm.test(\"Status code is 205\", function () {\r",
                  "\tpm.response.to.have.status(205);\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"012 - get security settings\")"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "157ae10d-923d-408f-a1dd-530a22ff4568",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"loginWithTouchID\": true\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{base_url}}/common-service/api/v1/profile/settings/security"
          },
          "response": []
        },
        {
          "name": "012 - get security settings",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9e70a16b-8a39-43ae-b1a1-8ee70ebba9f4",
                "exec": [
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "\tpm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Test user loginWithTouchID\", function () {\r",
                  "\tpm.expect(jsonData.loginWithTouchID).to.be.true;\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"log out\")"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "b0b76963-5e3c-4279-8cab-41c1cdb9f820",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/common-service/api/v1/profile/settings/security"
          },
          "response": []
        },
        {
          "name": "log out",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "567c2b1f-e9c4-42c2-8799-477da02bca36",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "\tpm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"log out after log out\")"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "62bd2d84-841b-4dc8-8c59-6875d7125579",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "POST",
            "header": [],
            "url": "{{base_url}}/common-service/api/v1/profile/logout/{{sessionId}}"
          },
          "response": []
        },
        {
          "name": "log out after log out",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "68079cc2-2dcd-41fc-9a50-9ab60820bdfa",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "\tpm.response.to.have.status(404);\r",
                  "});\r",
                  "\r",
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"NOT_FOUND\", () => {\r",
                  "\tpm.expect(jsonData.message).to.contains(\"404 NOT_FOUND \\\"Session with id\")\r",
                  "});\r",
                  "\r",
                  "pm.collectionVariables.set(\"next_request_after_verify_sms\", \"verify sms expiredPhoneNumber\")"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "ef42abe0-25f9-4aa3-8022-c60e0c7833da",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "POST",
            "header": [],
            "url": "{{base_url}}/common-service/api/v1/profile/logout/{{sessionId}}"
          },
          "response": []
        },
        {
          "name": "verify sms expiredPhoneNumber",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3bc82f8e-b172-4d40-8aa9-8f533ada927f",
                "exec": [
                  "let jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 410\", function () {",
                  "\tpm.response.to.have.status(410);",
                  "});",
                  "",
                  "pm.test(\"Error message must contain text: \\\"410 GONE \\\"\", () => {",
                  "\tpm.expect(jsonData.message).to.contains(\"expired\")",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "1b929469-dd5c-4ad8-a1af-5f224d37d54d",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{access_token}}"
              }
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"code\": \"123456\",\n  \"countryCode\": \"996\",\n  \"phone\": \"{{registration_number}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{base_url}}/common-service/api/v1/auth/verify-sms",
            "description": "## Verify SMS\n\n### Purpose\n\nThis request is used to verify sent OTP and generate `SMSID`.\n\n### Parameters\n\n`verify-sms` request requires three parameters to pass:\n\n1. `code` - OTP code sent via `send-sms` request.\n2. `countryCode` - for what country it was sent. For us, it is `996`.\n3. `phone` - for what number OTP was generated for. The value of this parameter is from the collection variables.\n\n### Tests\n\nAfter the response is received\n\n-  `smsID` is set at collection variables.\n- The length of returned smsid is checked.\n- The next request is set from collection variables."
          },
          "response": []
        }
      ],
      "_postman_id": "6dc8a366-4855-4b1b-8f8e-33cddb181944"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "63c15bf4-0c6b-47ca-8733-94b09b512746",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "887bd99d-518d-4971-8940-db69ff7019a9",
        "type": "text/javascript",
        "exec": [
          "pm.test(\"Status code is [200, 201, 202, 204, 205, 400, 401, 404, 406, 206, 409,410, 413, 415,428]\", function () {",
          "\tpm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204, 205, 206, 400, 401, 404, 406, 409,410, 413, 415,428])",
          "});"
        ]
      }
    }
  ],
  "variable": [
    {
      "id": "a6cc5480-8342-4afc-a784-0231890304a8",
      "key": "base_url",
      "value": "http://wallet-dev.sweeftdigital.com:8888",
      "type": "string"
    },
    {
      "id": "98a1310e-8a75-4b5c-9d37-6b6e41bb4487",
      "key": "smsID",
      "value": "",
      "type": "string"
    },
    {
      "id": "4bb71a75-a11e-41ab-808a-f0105912d33f",
      "key": "access_token",
      "value": "",
      "type": "string"
    },
    {
      "id": "c8d6ab28-8637-4974-90b7-590c57bcc1e9",
      "key": "refresh_token",
      "value": "",
      "type": "string"
    },
    {
      "id": "df26f02c-f928-4bca-aae8-bc8e1b41901e",
      "key": "fname",
      "value": "",
      "type": "string"
    },
    {
      "id": "cc17e69a-6861-4462-b106-f2881e44d9fe",
      "key": "registration_number",
      "value": "",
      "type": "string"
    },
    {
      "id": "4f4ddd6c-8b88-4c2c-a05d-35ec202330ae",
      "key": "lname",
      "value": "",
      "type": "string"
    },
    {
      "id": "08ff20fd-c0c9-4326-b56a-417f36949e61",
      "key": "send_sms_type",
      "value": "REGISTRATION",
      "type": "string"
    },
    {
      "id": "71bb5cc8-1ca8-4962-b5d8-f4a967e9f537",
      "key": "generate_new_user",
      "value": "true",
      "type": "string"
    },
    {
      "id": "2789c8c6-9666-4696-9ebd-a21bbcfd8473",
      "key": "next_request",
      "value": "",
      "type": "string"
    },
    {
      "id": "53b29b4f-a8a3-494a-a90d-691dd96dd43c",
      "key": "next_request_after_verify_sms",
      "value": "",
      "type": "string"
    },
    {
      "id": "9ebceba1-2370-4520-85ad-d9094d669311",
      "key": "personalID",
      "value": "",
      "type": "string"
    },
    {
      "id": "eedbed8b-e967-40fa-8457-a67ac0ea97fb",
      "key": "birthDate",
      "value": "",
      "type": "string"
    },
    {
      "id": "8bc1206b-453d-45ea-825f-027ee1712aa9",
      "key": "updatedRegNumber",
      "value": "",
      "type": "string"
    },
    {
      "id": "8ec89c4c-6f6b-4a3b-9bfe-4b136779009e",
      "key": "email",
      "value": "",
      "type": "string"
    },
    {
      "id": "3b4268e1-01be-4d54-9418-b94cf5571366",
      "key": "emailName",
      "value": "",
      "type": "string"
    },
    {
      "id": "2e59153f-0fee-415d-9149-15beae704cb5",
      "key": "mailVerificationCode",
      "value": "",
      "type": "string"
    },
    {
      "id": "ec167aab-53da-492e-a609-40a4b40a172c",
      "key": "categoryName",
      "value": "",
      "type": "string"
    },
    {
      "id": "d4bb4d97-6106-4215-9c77-df106316971f",
      "key": "categoryid",
      "value": "",
      "type": "string"
    },
    {
      "id": "b307c7ab-9e7e-4076-af80-0bf385c46520",
      "key": "merchantName",
      "value": "",
      "type": "string"
    },
    {
      "id": "3d744dfa-8fb0-46a6-b5d9-065c4c5136fe",
      "key": "resetedPassword",
      "value": "",
      "type": "string"
    },
    {
      "id": "0da51e33-2907-4856-823d-b2decbaa8fab",
      "key": "password",
      "value": "",
      "type": "string"
    },
    {
      "id": "a3128e6f-8dff-442c-beba-26e279f9f0ed",
      "key": "merchantDataId",
      "value": "",
      "type": "string"
    },
    {
      "id": "0b8695c9-cc23-4d4b-9fa6-a4db6f30a37d",
      "key": "branchName",
      "value": "",
      "type": "string"
    },
    {
      "id": "f9beec82-63e0-4b41-aaf8-c4b225b47421",
      "key": "branchDataId",
      "value": "",
      "type": "string"
    },
    {
      "id": "fcbeec15-9cee-4875-ac90-d57e9bf7150b",
      "key": "cashback",
      "value": "",
      "type": "string"
    },
    {
      "id": "d4562f7d-bb98-44d7-9649-3e370d589e43",
      "key": "updatedCashBack",
      "value": "",
      "type": "string"
    },
    {
      "id": "dee6f708-bd5e-4efc-8732-8c5a1ec1bfc7",
      "key": "updatedbranchName",
      "value": "",
      "type": "string"
    },
    {
      "id": "3e659898-4a53-4ecb-bd94-18e44c28087d",
      "key": "updatedMerchantName",
      "value": "",
      "type": "string"
    },
    {
      "id": "a0c77c48-381e-4081-970a-b8f93c69af33",
      "key": "latitude",
      "value": "",
      "type": "string"
    },
    {
      "id": "1a0962ce-7813-4ca6-9f9c-117df933f964",
      "key": "longitude",
      "value": "",
      "type": "string"
    },
    {
      "id": "a2760841-dc49-49b0-a59b-d3f0af1860d3",
      "key": "address",
      "value": "",
      "type": "string"
    },
    {
      "id": "3fd19246-fabf-40db-b4fc-d3417a86cae5",
      "key": "loggedId",
      "value": "",
      "type": "string"
    },
    {
      "id": "3b5a9acf-fae8-4a33-b8a8-29a70cb1135a",
      "key": "sessionId",
      "value": "",
      "type": "string"
    },
    {
      "id": "50c5e5dd-4c5b-43f3-93be-70471c43246f",
      "key": "maxNumber",
      "value": "",
      "type": "string"
    }
  ]
}