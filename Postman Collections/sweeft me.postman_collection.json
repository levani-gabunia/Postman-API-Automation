{
	"info": {
		"_postman_id": "d5a8bf47-b0a9-40d3-b3f0-b283027d402a",
		"name": "sweeft me",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "common-service",
			"item": [
				{
					"name": "000 - send and verify sms",
					"item": [
						{
							"name": "001 - send sms",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Get SMS type from collection variables",
											"let sms_type = pm.collectionVariables.get(\"send_sms_type\")",
											"let gen_user = pm.collectionVariables.get(\"generate_new_user\")",
											"",
											"// Check SMS type and if it is \"REGISTRATION\" generate random number",
											"if(sms_type == \"REGISTRATION\" && gen_user == \"true\"){",
											"\tlet registration_number = Math.round(Math.random() * (999999999 - 000000001) + 000000001)",
											"\tpm.collectionVariables.set(\"registration_number\", registration_number)",
											"}",
											"",
											"let user = pm.collectionVariables.get(\"registration_number\")",
											"console.info(user)",
											"console.info(gen_user)",
											"console.info(sms_type)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"\tpm.response.to.have.status(200);",
											"});",
											"",
											"// Check response status and if it is 409 set next request self",
											"if(pm.response.status == 409){",
											"\tpostman.setNextRequest(\"001 - send sms\")",
											"}",
											"",
											"// Get next request from collection variables",
											"if(pm.collectionVariables.has(\"next_request\")){",
											"\tlet next = pm.collectionVariables.get(\"next_request\")",
											"",
											"\t// If collection variable is set, set it as next request",
											"\tif(next.length > 0){",
											"\t\tpostman.setNextRequest(next)",
											"\t}",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"countryCode\": \"996\",\n  \"otphash\": \"string\",\n  \"phone\": \"{{registration_number}}\",\n  \"smsType\": \"{{send_sms_type}}\"\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/auth/send-sms",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"auth",
										"send-sms"
									]
								},
								"description": "## Send SMS\n\n### Purpose\n\nThis request is used to generate OTP for the user.\n\nGenerated OTP is requested for:\n\n- Login (LOGIN)\n- Password reset (PASSWORD_RESET)\n- Phone change (PHONE_CHANGE)\n- Registration (REGISTRATION)\n\n### Parameters\n\n`send-sms` request needs four parameters:\n\n1. `countryCode` - is set to `996` to make process automation possible. Using '996' makes possible to use `123456` as OTP wherever it is required.\n2. `otphash` - we are passing any string here.\n3. `phone` - the value for this parameter is set in collection variables. For registration it is randomly generated. \n4. `smsType` - the value for this parameter is set in collection variables. Its default value is `REGISTRATION`. Its value is changed dynamically during the test run.\n\n\n\nAfter generating OTP, it must be verified by \n`verify-sms` request."
							},
							"response": []
						},
						{
							"name": "002 - verify sms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 202\", () => {",
											"\tpm.expect(\"Status code is 202\", () => {",
											"\t\tpm.response.to.have.status(202);",
											"\t});",
											"});",
											"",
											"// Get smsID from response",
											"let smsID = responseBody",
											"",
											"// Set smsID in collection variables",
											"pm.collectionVariables.set(\"smsID\", smsID)",
											"",
											"// Check smsID length to be 36 symbols",
											"pm.test(\"Test smsID length is 36\", function(){",
											"\tpm.expect(smsID.length).to.be.equal(36)",
											"});",
											"",
											"if(pm.collectionVariables.has(\"next_request\")){",
											"\t// Get next request from collection variables to be use after sms verification",
											"\tlet next = pm.collectionVariables.get(\"next_request_after_verify_sms\")",
											"",
											"\t// If next request is set for sms verification use it as next request",
											"\tif(next.length > 0){",
											"\t\tpostman.setNextRequest(next)",
											"\t}",
											"}",
											"// Clear next request in collection variables",
											"pm.collectionVariables.set(\"next_request\", \"\")",
											"// Clear next request for sms verification in collection variables",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"123456\",\n  \"countryCode\": \"996\",\n  \"phone\": \"{{registration_number}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/auth/verify-sms",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"auth",
										"verify-sms"
									]
								},
								"description": "## Verify SMS\n\n### Purpose\n\nThis request is used to verify sent OTP and generate `SMSID`.\n\n### Parameters\n\n`verify-sms` request requires three parameters to pass:\n\n1. `code` - OTP code sent via `send-sms` request.\n2. `countryCode` - for what country it was sent. For us, it is `996`.\n3. `phone` - for what number OTP was generated for. The value of this parameter is from the collection variables.\n\n### Tests\n\nAfter the response is received\n\n-  `smsID` is set at collection variables.\n- The length of returned smsid is checked.\n- The next request is set from collection variables."
							},
							"response": []
						}
					]
				},
				{
					"name": "001 - registration",
					"item": [
						{
							"name": "001-01 - registration - miss single parameter",
							"item": [
								{
									"name": "001 - empty parameters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - empty first name\")",
													"pm.collectionVariables.set(\"generate_new_user\", \"false\")",
													"",
													"pm.test(\"Wrong firstname\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong firstname\");",
													"});",
													"",
													"pm.test(\"Wrong lastname\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong lastname\");",
													"});",
													"",
													"pm.test(\"Wrong userSMSId\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong userSMSId\");",
													"});",
													"",
													"pm.test(\"Invalid Password\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Invalid Password\");",
													"});",
													"",
													"pm.test(\"Wrong deviceToken\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong deviceToken\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"deviceToken\": \"\",\n\t\"firstname\": \"\",\n\t\"lastname\": \"\",\n\t\"mobileName\": \"\",\n\t\"password\": \"\",\n\t\"userSMSId\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/registration",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"registration"
											]
										},
										"description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
									},
									"response": []
								},
								{
									"name": "002 - empty first name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"// empty last name",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - empty last name\")",
													"",
													"pm.test(\"Wrong firstname\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong firstname\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"deviceToken\": \"someDUMMYtoken\",\n\t\"firstname\": \"\",\n\t\"lastname\": \"{{lname}}\",\n\t\"mobileName\": \"myMobile\",\n\t\"mobileOS\": \"UNKNOWN\",\n\t\"password\": \"magariParoli1\",\n\t\"userSMSId\": \"{{smsID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/registration",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"registration"
											]
										},
										"description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
									},
									"response": []
								},
								{
									"name": "003 - empty last name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"// empty password",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - empty password\")",
													"",
													"pm.test(\"Wrong laststname\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong lastname\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"deviceToken\": \"someDUMMYtoken\",\n\t\"firstname\": \"{{fname}}\",\n\t\"lastname\": \"\",\n\t\"mobileName\": \"myMobile\",\n\t\"mobileOS\": \"UNKNOWN\",\n\t\"password\": \"magariParoli1\",\n\t\"userSMSId\": \"{{smsID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/registration",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"registration"
											]
										},
										"description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
									},
									"response": []
								},
								{
									"name": "004 - empty password",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"// empty OTP",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"005 - empty OTP\")",
													"",
													"pm.test(\"Invalid Password\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Invalid Password\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"deviceToken\": \"someDUMMYtoken\",\n\t\"firstname\": \"{{fname}}\",\n\t\"lastname\": \"{{lname}}\",\n\t\"mobileName\": \"myMobile\",\n\t\"mobileOS\": \"UNKNOWN\",\n\t\"password\": \"\",\n\t\"userSMSId\": \"{{smsID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/registration",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"registration"
											]
										},
										"description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
									},
									"response": []
								},
								{
									"name": "005 - empty OTP",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"// only first name",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"006 - only first and last name\")",
													"",
													"pm.test(\"Wrong userSMSId\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong userSMSId\");",
													"});",
													"",
													"pm.test(\"Must not be blank\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Must not be blank\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"deviceToken\": \"someDUMMYtoken\",\n\t\"firstname\": \"{{fname}}\",\n\t\"lastname\": \"{{lname}}\",\n\t\"mobileName\": \"myMobile\",\n\t\"mobileOS\": \"UNKNOWN\",\n\t\"password\": \"magariParoli1\",\n\t\"userSMSId\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/registration",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"registration"
											]
										},
										"description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
									},
									"response": []
								},
								{
									"name": "006 - only first and last name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"// only first name and password",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"007 - only first name and password\")",
													"",
													"pm.test(\"Wrong userSMSId\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong userSMSId\");",
													"});",
													"",
													"pm.test(\"userSMSId Must not be blank\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Must not be blank\");",
													"});",
													"",
													"pm.test(\"Invalid Password\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Invalid Password\");",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstname\": \"{{fname}}\",\n    \"lastname\": \"{{lname}}\",\n    \"password\": \"\",\n    \"userSMSId\": \"\",\n    \"deviceToken\": \"someDUMMYtoken\",\n    \"mobileName\": \"myMobile\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/registration",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"registration"
											]
										},
										"description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
									},
									"response": []
								},
								{
									"name": "007 - only first name and password",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"// only first name and OTP",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"008 - only first name and OTP\")",
													"",
													"pm.test(\"Wrong lastname\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong lastname\");",
													"});",
													"",
													"pm.test(\"Wrong userSMSId\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong userSMSId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstname\": \"{{fname}}\",\n  \"lastname\": \"\",\n  \"password\": \"magariParoli1\",\n  \"userSMSId\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/registration",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"registration"
											]
										},
										"description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
									},
									"response": []
								},
								{
									"name": "008 - only first name and OTP",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"// only last name and password",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"009 - only last name and passwrod\")",
													"",
													"pm.test(\"Check message to contain Wrong lastname\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong lastname\");",
													"});",
													"",
													"pm.test(\"Check message to contain Invalid Password\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Invalid Password\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"firstname\": \"{{lname}}\",\r\n  \"lastname\": \"\",\r\n  \"password\": \"\",\r\n  \"userSMSId\": \"smsID\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/registration",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"registration"
											]
										},
										"description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
									},
									"response": []
								},
								{
									"name": "009 - only last name and passwrod",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"// only last name and OTP",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"010 - only last name and OTP\")",
													"",
													"pm.test(\"Check message to contain Wrong firstname\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong firstname\");",
													"});",
													"",
													"pm.test(\"Check message to contain Wrong userSMSId\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong userSMSId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstname\": \"\",\n  \"lastname\": \"{{lname}}\",\n  \"password\": \"magariParoli1\",\n  \"userSMSId\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/registration",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"registration"
											]
										},
										"description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
									},
									"response": []
								},
								{
									"name": "010 - only last name and OTP",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"// only password and OTP",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"011 - only password and OTP\")",
													"",
													"pm.test(\"Check message to contain Wrong firstname\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong firstname\");",
													"});",
													"",
													"pm.test(\"Check message to contain Invalid Password\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Invalid Password\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstname\": \"\",\n  \"lastname\": \"{{lname}}\",\n  \"password\": \"\",\n  \"userSMSId\": \"smsID\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/registration",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"registration"
											]
										},
										"description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
									},
									"response": []
								},
								{
									"name": "011 - only password and OTP",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"// registration",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - only first name\")",
													"",
													"pm.test(\"Check message to contain Wrong firstname\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong firstname\");",
													"});",
													"",
													"pm.test(\"Check message to contain Wrong lastname\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong lastname\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"firstname\": \"\",\n  \"lastname\": \"\",\n  \"password\": \"magariParoli1\",\n  \"userSMSId\": \"smsID\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/registration",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"registration"
											]
										},
										"description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"let fname = pm.variables.replaceIn('{{$randomFirstName}}')",
											"let lname = pm.variables.replaceIn('{{$randomLastName}}')",
											"pm.collectionVariables.set(\"fname\", fname)",
											"pm.collectionVariables.set(\"lname\", lname)"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Set data to collection variables",
											"pm.collectionVariables.set(\"send_sms_type\", \"REGISTRATION\")",
											"pm.collectionVariables.set(\"generate_new_user\", \"false\")",
											"// verify sms",
											"pm.collectionVariables.set(\"next_request\", \"002 - verify sms\")",
											"// Set next request to be send-sms",
											"postman.setNextRequest(\"001 - send sms\")"
										]
									}
								}
							]
						},
						{
							"name": "001-02 - registration - send only one parameter",
							"item": [
								{
									"name": "001 - only first name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"// only last name",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - only last name\")",
													"",
													"pm.test(\"Wrong lastname\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong lastname\");",
													"});",
													"",
													"pm.test(\"Invalid Password\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Invalid Password\");",
													"});",
													"",
													"pm.test(\"Wrong userSMSId\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong userSMSId\");",
													"});",
													"",
													"pm.test(\"Wrong deviceToken\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong deviceToken\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"deviceToken\": \"\",\n\t\"firstname\": \"{{fname}}\",\n\t\"lastname\": \"\",\n\t\"mobileName\": \"\",\n\t\"mobileOS\": \"UNKNOWN\",\n\t\"password\": \"\",\n\t\"userSMSId\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/registration",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"registration"
											]
										},
										"description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
									},
									"response": []
								},
								{
									"name": "002 - only last name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"// only password",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - only password\")",
													"",
													"pm.test(\"Wrong firstname\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong firstname\");",
													"});",
													"",
													"pm.test(\"Check message to contain Invalid Password\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Invalid Password\");",
													"});",
													"",
													"pm.test(\"Wrong userSMSId\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong userSMSId\");",
													"});",
													"",
													"pm.test(\"Wrong deviceToken\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong deviceToken\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"deviceToken\": \"\",\n\t\"firstname\": \"\",\n\t\"lastname\": \"{{lname}}\",\n\t\"mobileName\": \"\",\n\t\"mobileOS\": \"UNKNOWN\",\n\t\"password\": \"\",\n\t\"userSMSId\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/registration",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"registration"
											]
										},
										"description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
									},
									"response": []
								},
								{
									"name": "003 - only password",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"// only password",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - only OTP\")",
													"",
													"pm.test(\"Wrong firstname\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong firstname\");",
													"});",
													"",
													"pm.test(\"Wrong lastname\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong lastname\");",
													"});",
													"",
													"pm.test(\"Wrong userSMSId\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong userSMSId\");",
													"});",
													"",
													"pm.test(\"Wrong deviceToken\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong deviceToken\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"deviceToken\": \"\",\n\t\"firstname\": \"\",\n\t\"lastname\": \"\",\n\t\"mobileName\": \"\",\n\t\"mobileOS\": \"UNKNOWN\",\n\t\"password\": \"magariParoli1\",\n\t\"userSMSId\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/registration",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"registration"
											]
										},
										"description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
									},
									"response": []
								},
								{
									"name": "004 - only OTP",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"// only first and last name",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - registration\")",
													"",
													"pm.test(\"Wrong firstname\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong firstname\");",
													"});",
													"",
													"pm.test(\"Wrong lastname\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong lastname\");",
													"});",
													"",
													"pm.test(\"Wrong Password\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong password\");",
													"});",
													"",
													"pm.test(\"Wrong deviceToken\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong deviceToken\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"deviceToken\": \"\",\n\t\"firstname\": \"\",\n\t\"lastname\": \"\",\n\t\"mobileName\": \"\",\n\t\"mobileOS\": \"UNKNOWN\",\n\t\"password\": \"\",\n\t\"userSMSId\": \"{{smsID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/registration",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"registration"
											]
										},
										"description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Set data to collection variables",
											"pm.collectionVariables.set(\"send_sms_type\", \"REGISTRATION\")",
											"pm.collectionVariables.set(\"generate_new_user\", \"false\")",
											"// verify sms",
											"pm.collectionVariables.set(\"next_request\", \"002 - verify sms\")",
											"// Set next request to be send-sms",
											"postman.setNextRequest(\"001 - send sms\")"
										]
									}
								}
							]
						},
						{
							"name": "001-03 - registration - incorrect data",
							"item": [
								{
									"name": "001 - first name - less than allowed",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let fname = pm.variables.replaceIn('{{$randomFirstName}}')",
													"let lname = pm.variables.replaceIn('{{$randomLastName}}')",
													"pm.collectionVariables.set(\"fname\", fname)",
													"pm.collectionVariables.set(\"lname\", lname)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"// empty last name",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - first name - more than allowed\")",
													"",
													"pm.test(\"Wrong firstname\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong firstname\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstname\": \"I\",\n    \"lastname\": \"{{lname}}\",\n    \"password\": \"magariParoli1\",\n    \"userSMSId\": \"{{smsID}}\",\n    \"mobileOS\": \"UNKNOWN\",\n    \"deviceToken\": \"token\",\n\t\"mobileName\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/registration",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"registration"
											]
										},
										"description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
									},
									"response": []
								},
								{
									"name": "002 - first name - more than allowed",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let fname = pm.variables.replaceIn('{{$randomFirstName}}')",
													"let lname = pm.variables.replaceIn('{{$randomLastName}}')",
													"pm.collectionVariables.set(\"fname\", fname)",
													"pm.collectionVariables.set(\"lname\", lname)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"// empty last name",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - first name - disallowed chars\")",
													"",
													"",
													"pm.test(\"Wrong firstname\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong firstname\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstname\": \"Pablo Diego José Francisco de Paula Juan Nepomuceno\",\n    \"lastname\": \"{{lname}}\",\n    \"password\": \"magariParoli1\",\n    \"userSMSId\": \"{{smsID}}\",\n    \"mobileOS\": \"UNKNOWN\",\n    \"deviceToken\": \"token\",\n    \"mobileName\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/registration",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"registration"
											]
										},
										"description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
									},
									"response": []
								},
								{
									"name": "003 - first name - disallowed chars",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let fname = \"ლენსტალბერი\"",
													"let lname = pm.variables.replaceIn('{{$randomLastName}}')",
													"pm.collectionVariables.set(\"fname\", fname)",
													"pm.collectionVariables.set(\"lname\", lname)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"// empty last name",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - last name - less than allowed\")",
													"",
													"pm.test(\"Wrong lastname\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong firstname\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstname\": \"{{fname}}\",\n    \"lastname\": \"{{lname}}\",\n    \"password\": \"magariParoli1\",\n    \"userSMSId\": \"{{smsID}}\",\n    \"mobileOS\": \"UNKNOWN\",\n    \"deviceToken\": \"token\",\n    \"mobileName\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/registration",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"registration"
											]
										},
										"description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
									},
									"response": []
								},
								{
									"name": "004 - last name - less than allowed",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let fname = pm.variables.replaceIn('{{$randomFirstName}}')",
													"let lname = pm.variables.replaceIn('{{$randomLastName}}')",
													"pm.collectionVariables.set(\"fname\", fname)",
													"pm.collectionVariables.set(\"lname\", lname)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"// empty last name",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"005 - last name - more than allowed\")",
													"",
													"pm.test(\"Wrong lastname\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong lastname\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstname\": \"{{fname}}\",\n    \"lastname\": \"I\",\n    \"password\": \"magariParoli1\",\n    \"userSMSId\": \"{{smsID}}\",\n    \"mobileOS\": \"UNKNOWN\",\n    \"deviceToken\": \"token\",\n    \"mobileName\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/registration",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"registration"
											]
										},
										"description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
									},
									"response": []
								},
								{
									"name": "005 - last name - more than allowed",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let fname = pm.variables.replaceIn('{{$randomFirstName}}')",
													"let lname = pm.variables.replaceIn('{{$randomLastName}}')",
													"pm.collectionVariables.set(\"fname\", fname)",
													"pm.collectionVariables.set(\"lname\", lname)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"// empty last name",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"006 - last name - disallowed chars\")",
													"",
													"pm.test(\"Wrong lastname\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong lastname\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstname\": \"{{fname}}\",\n    \"lastname\": \"Remedios Cipriano de la Santísima Trinidad Ruiz y Picasso\",\n    \"password\": \"magariParoli1\",\n    \"userSMSId\": \"{{smsID}}\",\n    \"mobileOS\": \"UNKNOWN\",\n    \"deviceToken\": \"token\",\n    \"mobileName\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/registration",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"registration"
											]
										},
										"description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
									},
									"response": []
								},
								{
									"name": "006 - last name - disallowed chars",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let fname = pm.variables.replaceIn('{{$randomFirstName}}')",
													"let lname = \"ჯამჭურჭელაშვილი\"",
													"pm.collectionVariables.set(\"fname\", fname)",
													"pm.collectionVariables.set(\"lname\", lname)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"// empty last name",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - registration\")",
													"",
													"pm.test(\"Wrong lastname\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong lastname\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstname\": \"{{fname}}\",\n    \"lastname\": \"{{lname}}\",\n    \"password\": \"magariParoli1\",\n    \"userSMSId\": \"{{smsID}}\",\n    \"mobileOS\": \"UNKNOWN\",\n    \"deviceToken\": \"token\",\n    \"mobileName\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/registration",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"registration"
											]
										},
										"description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Set data to collection variables",
											"pm.collectionVariables.set(\"send_sms_type\", \"REGISTRATION\")",
											"pm.collectionVariables.set(\"generate_new_user\", \"false\")",
											"// verify sms",
											"pm.collectionVariables.set(\"next_request\", \"002 - verify sms\")",
											"",
											"// Set next request to be send-sms",
											"postman.setNextRequest(\"001 - send sms\")",
											"",
											"pm.collectionVariables.set(\"fname\", \"\")",
											"pm.collectionVariables.set(\"lname\", \"\")"
										]
									}
								}
							]
						},
						{
							"name": "003 - registration",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let fname = pm.variables.replaceIn('{{$randomFirstName}}')",
											"let lname = pm.variables.replaceIn('{{$randomLastName}}')",
											"pm.collectionVariables.set(\"fname\", fname)",
											"pm.collectionVariables.set(\"lname\", lname)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Get data from collection variables",
											"pm.collectionVariables.set(\"send_sms_type\", \"PASSWORD_RESET\")",
											"//password",
											"pm.collectionVariables.set(\"password\", \"magariParoli1!\")",
											"// verify sms",
											"pm.collectionVariables.set(\"next_request\", \"002 - verify sms\")",
											"// login",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - same password\")",
											"// Set next request to be send-sms",
											"postman.setNextRequest(\"001 - send sms\")",
											"",
											"pm.collectionVariables.set(\"generate_new_user\", \"false\")",
											"",
											"let jsonData = pm.response.json();",
											"",
											"const schema = {",
											"\t\"type\": \"object\",",
											"\t\"properties\": {",
											"\t\t\"access_token\":{",
											"\t\t\t\"type\": \"string\"",
											"\t\t}",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"\tpm.response.to.have.status(201);",
											"}); ",
											"",
											"pm.test(\"Validating schema\", () => {",
											"\tpm.response.to.have.jsonSchema(schema)",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"deviceToken\": \"string\",\n  \"firstname\": \"{{fname}}\",\n  \"lastname\": \"{{lname}}\",\n  \"password\": \"magariParoli1!\",\n  \"mobileName\": \"string\",\n  \"mobileOS\": \"ANDROID\",\n  \"userSMSId\": \"{{smsID}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/auth/registration",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"auth",
										"registration"
									]
								},
								"description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
							},
							"response": []
						}
					]
				},
				{
					"name": "002 - resetPassword",
					"item": [
						{
							"name": "002-001 - reset password negative",
							"item": [
								{
									"name": "001 - same password",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//let jsonData = pm.response.json();",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - empty fields\")",
													"",
													"pm.test(\"Status code is 205\", function () {",
													"\tpm.response.to.have.status(205);",
													"}); ",
													"//pm.test(\"Wrong userSMSId\", () => {",
													"//\tpm.expect(jsonData.message).to.contain(\"Wrong password. Invalid Password\");",
													"//});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"{{password}}\",\n  \"userSMSId\": \"{{smsID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/reset-password",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"reset-password"
											]
										},
										"description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
									},
									"response": []
								},
								{
									"name": "002 - empty fields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - empty password\")",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"}); ",
													"",
													"pm.test(\"Wrong userSMSId\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong userSMSId\");",
													"});",
													"",
													"pm.test(\"Wrong userSMSId\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Invalid Password\");",
													"});",
													"",
													"pm.test(\"Invalid Password\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Must not be blank\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"\",\n  \"userSMSId\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/reset-password",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"reset-password"
											]
										},
										"description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
									},
									"response": []
								},
								{
									"name": "003 - empty password",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - empty userSms\")",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"}); ",
													"pm.test(\"Wrong userSMSId\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong password\");",
													"});",
													"",
													"pm.test(\"Wrong userSMSId\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Invalid Password\");",
													"});",
													"",
													"pm.test(\"Invalid Password\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Must not be blank\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"\",\n  \"userSMSId\": \"{{smsID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/reset-password",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"reset-password"
											]
										},
										"description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
									},
									"response": []
								},
								{
									"name": "004 - empty userSms",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"005 - wrong userSMS\")",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"}); ",
													"pm.test(\"Wrong userSMSId\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong userSMSId\");",
													"});",
													"",
													"pm.test(\"Invalid Password\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Must not be blank\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"{{password}}\",\n  \"userSMSId\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/reset-password",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"reset-password"
											]
										},
										"description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
									},
									"response": []
								},
								{
									"name": "005 - wrong userSMS",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"006 - password without upperCase\")",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"\tpm.response.to.have.status(404);",
													"}); ",
													"pm.test(\"Wrong userSMSId\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"404 NOT_FOUND \\\"Sms not send with id 196129129 \\\"\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"{{password}}\",\n  \"userSMSId\": \"196129129\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/reset-password",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"reset-password"
											]
										},
										"description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
									},
									"response": []
								},
								{
									"name": "006 - password without upperCase",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"007 - password less length\")",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"}); ",
													"pm.test(\"Wrong userSMSId\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong password. Invalid Password\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"magariparoli12\",\n  \"userSMSId\": \"{{smsID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/reset-password",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"reset-password"
											]
										},
										"description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
									},
									"response": []
								},
								{
									"name": "007 - password less length",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"008 - password max length\")",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"}); ",
													"pm.test(\"Wrong userSMSId\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong password. Invalid Password\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"Paroli1\",\n  \"userSMSId\": \"{{smsID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/reset-password",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"reset-password"
											]
										},
										"description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
									},
									"response": []
								},
								{
									"name": "008 - password max length",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"009 - password without digit\")",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"}); ",
													"pm.test(\"Wrong userSMSId\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong password. Invalid Password\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJPeUU1bUN2N3did0tZTjVLOHdCaW1OZlB6UjJMQVRjN1dfSU1uVXcwU1JrIn0.eyJleHAiOjE2NDA3NDg2NTUsImlhdCI6MTY0MDcxMjY1NSwianRpIjoiZjg2M2JhMGYtM2FjZC00ZDJlLWI0ZmUtYTMzMGNiM2Y5ZDgyIiwiaXNzIjoiaHR0cHM6Ly9rZXljbG9hay5kZXYuc3dlZWZ0ZGlnaXRhbC5jb206ODA4MC9hdXRoL3JlYWxtcy9zd2VlZnQiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiN2RhZGQ5OWEtZTI0MC00MzUyLWExNTktNmRhNTU2YWU0YTI5IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoic3dlZWZ0LWFwaS1nYXRld2F5Iiwic2Vzc2lvbl9zdGF0ZSI6IjIyYWU4NTRkLWY1ZTQtNGVhMS05ZWQxLTJiYTMzNzQ0MWM5OCIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsiZGVmYXVsdC1yb2xlcy1zd2VlZnQiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvZmZsaW5lX2FjY2VzcyBwcm9maWxlIGVtYWlsIHRlc3QiLCJzaWQiOiIyMmFlODU0ZC1mNWU0LTRlYTEtOWVkMS0yYmEzMzc0NDFjOTgiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsImRhdGFiYXNlX2lkIjoxMjAsIm5hbWUiOiJFbWVseSBCZWNrZXIiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiI5OTY1MTAyODgwNzMiLCJnaXZlbl9uYW1lIjoiRW1lbHkiLCJmYW1pbHlfbmFtZSI6IkJlY2tlciJ9.M3X5_F82f4o7Iw5j1ln2xZNt9dNykkUIUyjBsB1HRDAFY769fY3ymI2JplAMVxgj3N5AePb5O1uxmPvRlc1c-pVvM8x2A3-kAtdUoevE_kdor3kvAI4EXb88xm4qmlAfy1M7u47y1EBIpK7cY5iy8X2FUy4ACXXIgt9h_mdswO7fxG8nicj4Q_eNhS1WV5hArUDgTtCM4W_AqtFXA2PQaq5Q3WdsZhSoYWlz02KdgaIygS1geJ7jKANQHo7fVsPwGFqmH4Kc4622FXI2iBgGjyP6JGgyzQmHeaJWo9W8irZ4anFrDXscwM9-UlPc5TYyXGQbglgmqdINV-YQBa9Gvw\",\n  \"userSMSId\": \"{{smsID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/reset-password",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"reset-password"
											]
										},
										"description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
									},
									"response": []
								},
								{
									"name": "009 - password without digit",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - reset password\")",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"}); ",
													"pm.test(\"Wrong userSMSId\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong password. Invalid Password\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"magariParoli\",\n  \"userSMSId\": \"{{smsID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/reset-password",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"reset-password"
											]
										},
										"description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Set data to collection variables",
											"pm.collectionVariables.set(\"send_sms_type\", \"PASSWORD_RESET\")",
											"pm.collectionVariables.set(\"generate_new_user\", \"false\")",
											"// verify sms",
											"pm.collectionVariables.set(\"next_request\", \"002 - verify sms\")",
											"",
											"// Set next request to be send-sms",
											"postman.setNextRequest(\"001 - send sms\")"
										]
									}
								}
							]
						},
						{
							"name": "004 - reset password",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Get data from collection variables",
											"pm.collectionVariables.set(\"send_sms_type\", \"LOGIN\")",
											"//password",
											"pm.collectionVariables.set(\"resetedPassword\", \"magariParoli12!@\")",
											"// verify sms",
											"pm.collectionVariables.set(\"next_request\", \"002 - verify sms\")",
											"// login",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - login with empty password field and valid Number\")",
											"// Set next request to be send-sms",
											"postman.setNextRequest(\"001 - send sms\")",
											"",
											"pm.collectionVariables.set(\"generate_new_user\", \"false\")",
											"",
											"pm.test(\"Status code is 205\", function () {",
											"\tpm.response.to.have.status(205);",
											"}); ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\": \"magariParoli12!@\",\n  \"userSMSId\": \"{{smsID}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/auth/reset-password",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"auth",
										"reset-password"
									]
								},
								"description": "## Registration\n\n### Purpose\n\nThis request is used to register the user.\n\n### Parameters\n\nThe `registration` request requires four parameters to pass:\n\n1. `firstname` - the value for this parameter is from collection variables, generated before sending the request.\n2. `lastname` - the value for this parameter is from collection variables, generated before sending request.\n3. `password` - for now, it's static.\n4. `userSMSId` - the value for this parameter is from collection variables, set from `verify-sms` request.\n\nAfter the response is returned, new collection variables are set:\n\n- `next_request` is set to `verify-sms`.\n- `next_request_after_verify_sms` is set to `login`.\n- `send_sms_type` is set to `LOGIN`\n\nAnd, `send-sms` is requested."
							},
							"response": []
						}
					]
				},
				{
					"name": "002 - login",
					"item": [
						{
							"name": "002 - 001 -  login negative",
							"item": [
								{
									"name": "001 - login with empty password field and valid Number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"let access_token = jsonData.access_token",
													"let refresh_token = jsonData.refresh_token",
													"",
													"pm.collectionVariables.set(\"access_token\", access_token)",
													"pm.collectionVariables.set(\"refresh_token\", refresh_token)",
													"",
													"const schema = {",
													"\t\"type\": \"object\",",
													"\t\"properties\": {",
													"\t\t\"status\": {",
													"\t\t\t\"type\": \"string\"",
													"\t\t},",
													"\t\t\"message\": {",
													"\t\t\t\"type\": \"string\"",
													"\t\t}",
													"\t}",
													"}",
													"",
													"pm.test(\"Validating schema for login response\", () => {",
													"\tpm.response.to.have.jsonSchema(schema);",
													"});",
													"",
													"pm.test(\"Error message must contain text: \\\"Wrong password. Invalid Password\\\"\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong password. Invalid Password\")",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - login with invalid Number field and valid password\")",
													"",
													"",
													"pm.collectionVariables.set(\"send_sms_type\", \"LOGIN\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"deviceToken\": \"string\",\n  \"mobileName\": \"string\",\n  \"mobileOS\": \"ANDROID\",\n  \"password\": \"\",\n  \"userSMSId\": \"{{smsID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "002 - login with invalid Number field and valid password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"\tpm.response.to.have.status(404);",
													"});",
													"let access_token = jsonData.access_token",
													"let refresh_token = jsonData.refresh_token",
													"",
													"pm.collectionVariables.set(\"access_token\", access_token)",
													"pm.collectionVariables.set(\"refresh_token\", refresh_token)",
													"",
													"const schema = {",
													"\t\"type\": \"object\",",
													"\t\"properties\": {",
													"\t\t\"status\": {",
													"\t\t\t\"type\": \"string\"",
													"\t\t},",
													"\t\t\"message\": {",
													"\t\t\t\"type\": \"string\"",
													"\t\t}",
													"\t}",
													"}",
													"",
													"pm.test(\"Validating schema for login response\", () => {",
													"\tpm.response.to.have.jsonSchema(schema);",
													"});",
													"",
													"pm.test(\"Error message must contain text: \\\"Sms not send with id invalid \\\"\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Sms not send with id invalid \")",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - login with invalid Number field and invalid password\")",
													"",
													"pm.collectionVariables.set(\"send_sms_type\", \"LOGIN\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"deviceToken\": \"string\",\n  \"mobileName\": \"string\",\n  \"mobileOS\": \"ANDROID\",\n  \"password\": \"magariParoli1\",\n  \"userSMSId\": \"invalid\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "003 - login with invalid Number field and invalid password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"let access_token = jsonData.access_token",
													"let refresh_token = jsonData.refresh_token",
													"",
													"pm.collectionVariables.set(\"access_token\", access_token)",
													"pm.collectionVariables.set(\"refresh_token\", refresh_token)",
													"",
													"const schema = {",
													"\t\"type\": \"object\",",
													"\t\"properties\": {",
													"\t\t\"status\": {",
													"\t\t\t\"type\": \"string\"",
													"\t\t},",
													"\t\t\"message\": {",
													"\t\t\t\"type\": \"string\"",
													"\t\t}",
													"\t}",
													"}",
													"",
													"pm.test(\"Validating schema for login response\", () => {",
													"\tpm.response.to.have.jsonSchema(schema);",
													"});",
													"",
													"pm.test(\"Error message must contain text: \\\"Wrong password. Invalid Password\\\"\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong password. Invalid Password\")",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - login with empty password field and invalid Number\")",
													"",
													"",
													"pm.collectionVariables.set(\"send_sms_type\", \"LOGIN\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"deviceToken\": \"string\",\n  \"mobileName\": \"string\",\n  \"mobileOS\": \"ANDROID\",\n  \"password\": \"invalid\",\n  \"userSMSId\": \"invalid\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "004 - login with empty password field and invalid Number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"let access_token = jsonData.access_token",
													"let refresh_token = jsonData.refresh_token",
													"",
													"pm.collectionVariables.set(\"access_token\", access_token)",
													"pm.collectionVariables.set(\"refresh_token\", refresh_token)",
													"",
													"const schema = {",
													"\t\"type\": \"object\",",
													"\t\"properties\": {",
													"\t\t\"status\": {",
													"\t\t\t\"type\": \"string\"",
													"\t\t},",
													"\t\t\"message\": {",
													"\t\t\t\"type\": \"string\"",
													"\t\t}",
													"\t}",
													"}",
													"",
													"pm.test(\"Validating schema for login response\", () => {",
													"\tpm.response.to.have.jsonSchema(schema);",
													"});",
													"",
													"pm.test(\"Error message must contain text: \\\"Wrong password. Invalid Password\\\"\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong password. Invalid Password\")",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"005 - login with empty fields\")",
													"",
													"pm.collectionVariables.set(\"send_sms_type\", \"LOGIN\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"deviceToken\": \"string\",\n  \"mobileName\": \"string\",\n  \"mobileOS\": \"ANDROID\",\n  \"password\": \"\",\n  \"userSMSId\": \"invalid\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "005 - login with empty fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"let access_token = jsonData.access_token",
													"let refresh_token = jsonData.refresh_token",
													"",
													"pm.collectionVariables.set(\"access_token\", access_token)",
													"pm.collectionVariables.set(\"refresh_token\", refresh_token)",
													"",
													"const schema = {",
													"\t\"type\": \"object\",",
													"\t\"properties\": {",
													"\t\t\"status\": {",
													"\t\t\t\"type\": \"string\"",
													"\t\t},",
													"\t\t\"message\": {",
													"\t\t\t\"type\": \"string\"",
													"\t\t}",
													"\t}",
													"}",
													"",
													"pm.test(\"Validating schema for login response\", () => {",
													"\tpm.response.to.have.jsonSchema(schema);",
													"});",
													"",
													"pm.test(\"Error message must contain text: \\\"Wrong userSMSId. Must not be blank\\\"\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong userSMSId. Must not be blank\")",
													"});",
													"",
													"pm.test(\"Error message must contain text: \\\"Wrong password. Invalid Password\\\"\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong password. Invalid Password\")",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"006 - login with invalid password field and valid number\")",
													"",
													"pm.collectionVariables.set(\"send_sms_type\", \"LOGIN\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"deviceToken\": \"string\",\n  \"mobileName\": \"string\",\n  \"mobileOS\": \"ANDROID\",\n  \"password\": \"\",\n  \"userSMSId\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "006 - login with invalid password field and valid number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"let access_token = jsonData.access_token",
													"let refresh_token = jsonData.refresh_token",
													"",
													"pm.collectionVariables.set(\"access_token\", access_token)",
													"pm.collectionVariables.set(\"refresh_token\", refresh_token)",
													"",
													"const schema = {",
													"\t\"type\": \"object\",",
													"\t\"properties\": {",
													"\t\t\"status\": {",
													"\t\t\t\"type\": \"string\"",
													"\t\t},",
													"\t\t\"message\": {",
													"\t\t\t\"type\": \"string\"",
													"\t\t}",
													"\t}",
													"}",
													"",
													"pm.test(\"Validating schema for login response\", () => {",
													"\tpm.response.to.have.jsonSchema(schema);",
													"});",
													"",
													"pm.test(\"Error message must contain text: \\\"Wrong password. Invalid Password\\\"\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong password. Invalid Password\")",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"010 - login with invalid format Number field and correct password\")",
													"",
													"pm.collectionVariables.set(\"send_sms_type\", \"LOGIN\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"deviceToken\": \"string\",\n  \"mobileName\": \"string\",\n  \"mobileOS\": \"ANDROID\",\n  \"password\": \"invalid\",\n  \"userSMSId\": \"{{smsID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "007 - login when user is blocked --- not tested",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"let access_token = jsonData.access_token",
													"let refresh_token = jsonData.refresh_token",
													"",
													"pm.collectionVariables.set(\"access_token\", access_token)",
													"pm.collectionVariables.set(\"refresh_token\", refresh_token)",
													"",
													"const schema = {",
													"\t\"type\": \"object\",",
													"\t\"properties\": {",
													"\t\t\"status\": {",
													"\t\t\t\"type\": \"string\"",
													"\t\t},",
													"\t\t\"message\": {",
													"\t\t\t\"type\": \"string\"",
													"\t\t}",
													"\t}",
													"}",
													"",
													"pm.test(\"Validating schema for login response\", () => {",
													"\tpm.response.to.have.jsonSchema(schema);",
													"});",
													"",
													"pm.test(\"Error message must contain text: \\\"Wrong password. Invalid Password\\\"\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong password. Invalid Password\")",
													"});",
													"",
													"// for(i = 0; i <= 5; i++){",
													"//   postman.setNextRequest(\"007 - login when user is blocked\")",
													"// }",
													"",
													"pm.collectionVariables.set(\"send_sms_type\", \"LOGIN\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"deviceToken\": \"string\",\n  \"mobileName\": \"string\",\n  \"mobileOS\": \"ANDROID\",\n  \"password\": \"\",\n  \"userSMSId\": \"{{smsID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "008 - login with expired OTP --- not tested",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"let access_token = jsonData.access_token",
													"let refresh_token = jsonData.refresh_token",
													"",
													"pm.collectionVariables.set(\"access_token\", access_token)",
													"pm.collectionVariables.set(\"refresh_token\", refresh_token)",
													"",
													"const schema = {",
													"\t\"type\": \"object\",",
													"\t\"properties\": {",
													"\t\t\"status\": {",
													"\t\t\t\"type\": \"string\"",
													"\t\t},",
													"\t\t\"message\": {",
													"\t\t\t\"type\": \"string\"",
													"\t\t}",
													"\t}",
													"}",
													"",
													"pm.test(\"Validating schema for login response\", () => {",
													"\tpm.response.to.have.jsonSchema(schema);",
													"});",
													"",
													"pm.test(\"Error message must contain text: \\\"Wrong password. Invalid Password\\\"\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong password. Invalid Password\")",
													"});",
													"",
													"pm.collectionVariables.set(\"send_sms_type\", \"LOGIN\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"deviceToken\": \"string\",\n  \"mobileName\": \"string\",\n  \"mobileOS\": \"ANDROID\",\n  \"password\": \"\",\n  \"userSMSId\": \"{{smsID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "009 - login with invalid OTP --- not tested",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"let access_token = jsonData.access_token",
													"let refresh_token = jsonData.refresh_token",
													"",
													"pm.collectionVariables.set(\"access_token\", access_token)",
													"pm.collectionVariables.set(\"refresh_token\", refresh_token)",
													"",
													"const schema = {",
													"\t\"type\": \"object\",",
													"\t\"properties\": {",
													"\t\t\"status\": {",
													"\t\t\t\"type\": \"string\"",
													"\t\t},",
													"\t\t\"message\": {",
													"\t\t\t\"type\": \"string\"",
													"\t\t}",
													"\t}",
													"}",
													"",
													"pm.test(\"Validating schema for login response\", () => {",
													"\tpm.response.to.have.jsonSchema(schema);",
													"});",
													"",
													"pm.test(\"Error message must contain text: \\\"Wrong password. Invalid Password\\\"\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong password. Invalid Password\")",
													"});",
													"",
													"pm.collectionVariables.set(\"send_sms_type\", \"LOGIN\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"deviceToken\": \"string\",\n  \"mobileName\": \"string\",\n  \"mobileOS\": \"ANDROID\",\n  \"password\": \"\",\n  \"userSMSId\": \"{{smsID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "010 - login with invalid format Number field and correct password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"\tpm.response.to.have.status(404);",
													"});",
													"let access_token = jsonData.access_token",
													"let refresh_token = jsonData.refresh_token",
													"",
													"pm.collectionVariables.set(\"access_token\", access_token)",
													"pm.collectionVariables.set(\"refresh_token\", refresh_token)",
													"",
													"const schema = {",
													"\t\"type\": \"object\",",
													"\t\"properties\": {",
													"\t\t\"status\": {",
													"\t\t\t\"type\": \"string\"",
													"\t\t},",
													"\t\t\"message\": {",
													"\t\t\t\"type\": \"string\"",
													"\t\t}",
													"\t}",
													"}",
													"",
													"pm.test(\"Validating schema for login response\", () => {",
													"\tpm.response.to.have.jsonSchema(schema);",
													"});",
													"",
													"pm.test(\"Error message must contain text: \\\"Sms not send with id\\\"\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Sms not send with id\")",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"011 - login with empty Number field and valid password\")",
													"",
													"pm.collectionVariables.set(\"send_sms_type\", \"LOGIN\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"deviceToken\": \"string\",\n  \"mobileName\": \"string\",\n  \"mobileOS\": \"ANDROID\",\n  \"password\": \"magariParoli1\",\n  \"userSMSId\": 1234567\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "011 - login with empty Number field and valid password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"let access_token = jsonData.access_token",
													"let refresh_token = jsonData.refresh_token",
													"",
													"pm.collectionVariables.set(\"access_token\", access_token)",
													"pm.collectionVariables.set(\"refresh_token\", refresh_token)",
													"",
													"const schema = {",
													"\t\"type\": \"object\",",
													"\t\"properties\": {",
													"\t\t\"status\": {",
													"\t\t\t\"type\": \"string\"",
													"\t\t},",
													"\t\t\"message\": {",
													"\t\t\t\"type\": \"string\"",
													"\t\t}",
													"\t}",
													"}",
													"",
													"pm.test(\"Validating schema for login response\", () => {",
													"\tpm.response.to.have.jsonSchema(schema);",
													"});",
													"",
													"pm.test(\"Error message must contain text: \\\"Wrong userSMSId. Must not be blank\\\"\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong userSMSId. Must not be blank\")",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"012 - login with empty Number field and invalid password\")",
													"",
													"pm.collectionVariables.set(\"send_sms_type\", \"LOGIN\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"deviceToken\": \"string\",\n  \"mobileName\": \"string\",\n  \"mobileOS\": \"ANDROID\",\n  \"password\": \"magariParoli1\",\n  \"userSMSId\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "012 - login with empty Number field and invalid password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"let access_token = jsonData.access_token",
													"let refresh_token = jsonData.refresh_token",
													"",
													"pm.collectionVariables.set(\"access_token\", access_token)",
													"pm.collectionVariables.set(\"refresh_token\", refresh_token)",
													"",
													"const schema = {",
													"\t\"type\": \"object\",",
													"\t\"properties\": {",
													"\t\t\"status\": {",
													"\t\t\t\"type\": \"string\"",
													"\t\t},",
													"\t\t\"message\": {",
													"\t\t\t\"type\": \"string\"",
													"\t\t}",
													"\t}",
													"}",
													"",
													"pm.test(\"Validating schema for login response\", () => {",
													"\tpm.response.to.have.jsonSchema(schema);",
													"});",
													"",
													"pm.test(\"Error message must contain text: \\\"Wrong userSMSId. Must not be blank\\\"\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong userSMSId. Must not be blank\")",
													"});",
													"",
													"pm.test(\"Error message must contain text: \\\"Wrong password. Invalid Password\\\"\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong password. Invalid Password\")",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - login\")",
													"",
													"",
													"pm.collectionVariables.set(\"send_sms_type\", \"LOGIN\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"deviceToken\": \"string\",\n  \"mobileName\": \"string\",\n  \"mobileOS\": \"ANDROID\",\n  \"password\": \"invalid\",\n  \"userSMSId\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"login"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Set data to collection variables",
											"pm.collectionVariables.set(\"send_sms_type\", \"LOGIN\")",
											"pm.collectionVariables.set(\"generate_new_user\", \"false\")",
											"// verify sms",
											"pm.collectionVariables.set(\"next_request\", \"002 - verify sms\")",
											"// Set next request to be send-sms",
											"postman.setNextRequest(\"001 - send sms\")",
											""
										]
									}
								}
							]
						},
						{
							"name": "001 - login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"\tpm.response.to.have.status(200);",
											"});",
											"",
											"let access_token = jsonData.access_token",
											"let refresh_token = jsonData.refresh_token",
											"let sessionid = jsonData.session_state",
											"",
											"pm.collectionVariables.set(\"access_token\", access_token)",
											"pm.collectionVariables.set(\"refresh_token\", refresh_token)",
											"pm.collectionVariables.set(\"sessionId\", sessionid)",
											"",
											"const schema = {",
											"\t\"type\": \"object\",",
											"\t\"properties\": {",
											"\t\t\"access_token\": {",
											"\t\t\t\"type\": \"string\"",
											"\t\t},",
											"\t\t\"expires_in\": {",
											"\t\t\t\"type\": \"number\"",
											"\t\t},",
											"\t\t\"refresh_expires_in\": {",
											"\t\t\t\"type\": \"number\"",
											"\t\t},",
											"\t\t\"refresh_token\": {",
											"\t\t\t\"type\": \"string\"",
											"\t\t},",
											"\t\t\"token_type\": {",
											"\t\t\t\"type\": \"string\"",
											"\t\t},",
											"\t\t\"not-before-policy\": {",
											"\t\t\t\"type\": \"number\"",
											"\t\t},",
											"\t\t\"session_state\": {",
											"\t\t\t\"type\": \"string\"",
											"\t\t},",
											"\t\t\"scope\": {",
											"\t\t\t\"type\": \"string\"",
											"\t\t},",
											"\t}",
											"}",
											"",
											"pm.test(\"Validating schema for login response\", () => {",
											"\tpm.response.to.have.jsonSchema(schema)",
											"})",
											"",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - logged user\")",
											"",
											"pm.collectionVariables.set(\"send_sms_type\", \"LOGIN\")",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"deviceToken\": \"string\",\n  \"mobileName\": \"string\",\n  \"mobileOS\": \"ANDROID\",\n  \"password\": \"{{resetedPassword}}\",\n  \"userSMSId\": \"{{smsID}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/auth/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "002 - logged user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"\tpm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - profile details - first login\")\r",
											"\r",
											"c_fname = pm.collectionVariables.get(\"fname\")\r",
											"c_lname = pm.collectionVariables.get(\"lname\")\r",
											"\r",
											"let loggedid = jsonData.id\r",
											"let firstname = jsonData.firstname\r",
											"let lastname = jsonData.lastname\r",
											"\r",
											"pm.test(\"Test user first name\", function () {\r",
											"\tpm.expect(firstname).to.eql(c_fname);\r",
											"});\r",
											"pm.test(\"Test user last name\", function () {\r",
											"\tpm.expect(lastname).to.eql(c_lname);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"loggedId\", loggedid)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/profile",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"profile"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Set data to collection variables",
									"pm.collectionVariables.set(\"send_sms_type\", \"LOGIN\")",
									"pm.collectionVariables.set(\"generate_new_user\", \"false\")",
									"// verify sms",
									"pm.collectionVariables.set(\"next_request\", \"002 - verify sms\")",
									"// Set next request to be send-sms",
									"postman.setNextRequest(\"001 - send sms\")"
								]
							}
						}
					]
				},
				{
					"name": "003 - myProfile",
					"item": [
						{
							"name": "003 - 001 - profile update negative - empty fields",
							"item": [
								{
									"name": "001 - profile details - first login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"c_fname = pm.collectionVariables.get(\"fname\")",
													"c_lname = pm.collectionVariables.get(\"lname\")",
													"c_phone = pm.collectionVariables.get(\"registration_number\").toString()",
													"",
													"let fname = jsonData.firstname",
													"let lname = jsonData.lastname",
													"let phone = jsonData.phoneNumber",
													"let personalid = jsonData.personalId",
													"",
													"const schema = {",
													"\t\"type\": \"object\",",
													"\t\"properties\": {",
													"\t\t\"firstname\":{",
													"\t\t\t\"type\": \"string\"",
													"\t\t},",
													"\t\t\"lastname\":{",
													"\t\t\t\"type\": \"string\"",
													"\t\t},",
													"\t\t\"birthdate\":{",
													"\t\t\t\"type\": \"null\"",
													"\t\t},",
													"\t\t\"personalId\":{",
													"\t\t\t\"type\": \"null\"",
													"\t\t},",
													"\t\t\"email\":{",
													"\t\t\t\"type\": \"null\"",
													"\t\t},",
													"\t\t\"phone\":{",
													"\t\t\t\"type\": \"string\"",
													"\t\t}",
													"\t}",
													"}",
													"",
													"pm.test(\"Validating schema\", () => {",
													"\tpm.response.to.have.jsonSchema(schema)",
													"})",
													"pm.test(\"Test user first name\", function () {",
													"\tpm.expect(fname).to.eql(c_fname);",
													"});",
													"pm.test(\"Test user last name\", function () {",
													"\tpm.expect(lname).to.eql(c_lname);",
													"});",
													"pm.test(\"Test user phone\", function () {",
													"\tpm.expect(phone).to.eql(c_phone);",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - profile details Update empty parameters\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/details",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"details"
											]
										}
									},
									"response": []
								},
								{
									"name": "001 - profile details Update empty parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message must contain text: \\\"Wrong firstname. Must not be blank\\\"\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong firstname. Must not be blank\")",
													"});",
													"",
													"pm.test(\"Error message must contain text: \\\"Wrong lastname. Must not be blank\\\"\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong lastname. Must not be blank\")",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - profile details Update empty birthdate\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"birthdate\": \"\", \r\n  \"firstname\": \"\",\r\n  \"lastname\": \"\",\r\n  \"personalId\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/details",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"details"
											]
										}
									},
									"response": []
								},
								{
									"name": "002 - profile details Update empty birthdate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 406\", function () {",
													"\tpm.response.to.have.status(406);",
													"});",
													"",
													"pm.test(\"Error message must contain text: \\\"406 NOT_ACCEPTABLE \\\"Bad birthday pattern! must be d/MM/yyyy\\\"\\\"\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"406 NOT_ACCEPTABLE \\\"Bad birthday pattern! must be d/MM/yyyy\\\"\")",
													"});",
													"",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - profile details Update empty firstname\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let Ufname = pm.variables.replaceIn('{{$randomFirstName}}')\r",
													"let Ulname = pm.variables.replaceIn('{{$randomLastName}}')\r",
													"let personalId = Math.round(Math.random() * (99999999999 - 00000000001) + 00000000001).toString()\r",
													"function randomDate(start, end) { return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())); }\r",
													"let birthdate = randomDate(new Date(1, 01, 2000), new Date()).toLocaleDateString()\r",
													"pm.collectionVariables.set(\"fname\", Ufname)\r",
													"pm.collectionVariables.set(\"lname\", Ulname)\r",
													"pm.collectionVariables.set(\"personalID\", personalId)\r",
													"pm.collectionVariables.set(\"birthDate\", \"1/11/1111\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"birthdate\": \"\",\r\n  \"firstname\": \"{{fname}}\",\r\n  \"lastname\": \"{{lname}}\",\r\n  \"personalId\": \"{{personalID}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/details",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"details"
											]
										}
									},
									"response": []
								},
								{
									"name": "003 - profile details Update empty firstname",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message must contain text: \\\"Wrong firstname. Must not be blank\\\"\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong firstname. Must not be blank\")",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - profile details Update empty lastname\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let Ufname = pm.variables.replaceIn('{{$randomFirstName}}')\r",
													"let Ulname = pm.variables.replaceIn('{{$randomLastName}}')\r",
													"let personalId = Math.round(Math.random() * (99999999999 - 00000000001) + 00000000001)\r",
													"function randomDate(start, end) { return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())); }\r",
													"let birthdate = randomDate(new Date(1, 01, 2000), new Date()).toLocaleDateString()\r",
													"pm.collectionVariables.set(\"fname\", Ufname)\r",
													"pm.collectionVariables.set(\"lname\", Ulname)\r",
													"pm.collectionVariables.set(\"personalID\", personalId)\r",
													"pm.collectionVariables.set(\"birthDate\", \"1/11/1111\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"birthdate\": \"1/11/1111\",\r\n  \"firstname\": \"\",\r\n  \"lastname\": \"{{lname}}\",\r\n  \"personalId\": \"{{personalID}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/details",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"details"
											]
										}
									},
									"response": []
								},
								{
									"name": "004 - profile details Update empty lastname",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message must contain text: \\\"Wrong lastname. Must not be blank\\\"\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong lastname. Must not be blank\")",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"005 - profile details Update empty personalID\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let Ufname = pm.variables.replaceIn('{{$randomFirstName}}')\r",
													"let Ulname = pm.variables.replaceIn('{{$randomLastName}}')\r",
													"let personalId = Math.round(Math.random() * (99999999999 - 00000000001) + 00000000001)\r",
													"function randomDate(start, end) { return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())); }\r",
													"let birthdate = randomDate(new Date(1, 01, 2000), new Date()).toLocaleDateString()\r",
													"pm.collectionVariables.set(\"fname\", Ufname)\r",
													"pm.collectionVariables.set(\"lname\", Ulname)\r",
													"pm.collectionVariables.set(\"personalID\", personalId)\r",
													"pm.collectionVariables.set(\"birthDate\", \"1/11/1111\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"birthdate\": \"1/11/1111\",\r\n  \"firstname\": \"{{fname}}\",\r\n  \"lastname\": \"\",\r\n  \"personalId\": \"{{personalID}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/details",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"details"
											]
										}
									},
									"response": []
								},
								{
									"name": "005 - profile details Update empty personalID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message must contain text: \\\"Wrong personalId. Must not be blank\\\"\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong personalId. Must not be blank\")",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - profile details Update firstname - less than allowed\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let Ufname = pm.variables.replaceIn('{{$randomFirstName}}')\r",
													"let Ulname = pm.variables.replaceIn('{{$randomLastName}}')\r",
													"let personalId = Math.round(Math.random() * (99999999999 - 00000000001) + 00000000001)\r",
													"function randomDate(start, end) { return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())); }\r",
													"let birthdate = randomDate(new Date(1, 01, 2000), new Date()).toLocaleDateString()\r",
													"pm.collectionVariables.set(\"fname\", Ufname)\r",
													"pm.collectionVariables.set(\"lname\", Ulname)\r",
													"pm.collectionVariables.set(\"personalID\", personalId)\r",
													"pm.collectionVariables.set(\"birthDate\", \"1/11/1111\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"birthdate\": \"1/11/1111\",\r\n  \"firstname\": \"{{fname}}\",\r\n  \"lastname\": \"{{lname}}\",\r\n  \"personalId\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/details",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"details"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "003 - 002 - profile update negative - incorrect data",
							"item": [
								{
									"name": "001 - profile details Update firstname - less than allowed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message must contain text: \\\"Wrong firstname. Invalid format of firstname\\\"\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong firstname. Invalid format of firstname\")",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - profile details Update lastname - less than allowed\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"let Ulname = pm.variables.replaceIn('{{$randomLastName}}')\r",
													"let personalId = Math.round(Math.random() * (99999999999 - 00000000001) + 00000000001)\r",
													"function randomDate(start, end) { return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())); }\r",
													"let birthdate = randomDate(new Date(1, 01, 2000), new Date()).toLocaleDateString()\r",
													"\r",
													"pm.collectionVariables.set(\"lname\", Ulname)\r",
													"pm.collectionVariables.set(\"personalID\", personalId)\r",
													"pm.collectionVariables.set(\"birthDate\", \"1/11/1111\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"birthdate\": \"1/11/1111\",\r\n  \"firstname\": \"s\",\r\n  \"lastname\": \"{{lname}}\",\r\n  \"personalId\": \"{{personalID}}\"\r\n}//min 2 symbol fname its bug",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/details",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"details"
											]
										}
									},
									"response": []
								},
								{
									"name": "002 - profile details Update lastname - less than allowed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message must contain text: \\\"Wrong lastname. Invalid format of lastname\\\"\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong lastname. Invalid format of lastname\")",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - profile details Update firstname - more than allowed\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let Ufname = pm.variables.replaceIn('{{$randomFirstName}}')\r",
													"\r",
													"let personalId = Math.round(Math.random() * (99999999999 - 00000000001) + 00000000001)\r",
													"function randomDate(start, end) { return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())); }\r",
													"let birthdate = randomDate(new Date(1, 01, 2000), new Date()).toLocaleDateString()\r",
													"pm.collectionVariables.set(\"fname\", Ufname)\r",
													"\r",
													"pm.collectionVariables.set(\"personalID\", personalId)\r",
													"pm.collectionVariables.set(\"birthDate\", \"1/11/1111\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"birthdate\": \"1/11/1111\",\r\n  \"firstname\": \"{{fname}}\",\r\n  \"lastname\": \"s\",\r\n  \"personalId\": \"{{personalID}}\"\r\n}//min 2 symbol lname its bug",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/details",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"details"
											]
										}
									},
									"response": []
								},
								{
									"name": "003 - profile details Update firstname - more than allowed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message must contain text: \\\"Wrong firstname. Invalid format of firstname\\\"\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong firstname. Invalid format of firstname\")",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - profile details Update lastname - more than allowed\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"let Ulname = pm.variables.replaceIn('{{$randomLastName}}')\r",
													"let personalId = Math.round(Math.random() * (99999999999 - 00000000001) + 00000000001)\r",
													"function randomDate(start, end) { return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())); }\r",
													"let birthdate = randomDate(new Date(1, 01, 2000), new Date()).toLocaleDateString()\r",
													"\r",
													"pm.collectionVariables.set(\"lname\", Ulname)\r",
													"pm.collectionVariables.set(\"personalID\", personalId)\r",
													"pm.collectionVariables.set(\"birthDate\", \"1/11/1111\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"birthdate\": \"1/11/1111\",\r\n  \"firstname\": \"{{refresh_token}}\",\r\n  \"lastname\": \"{{lname}}\",\r\n  \"personalId\": \"{{personalID}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/details",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"details"
											]
										}
									},
									"response": []
								},
								{
									"name": "004 - profile details Update lastname - more than allowed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message must contain text: \\\"Wrong lastname. Invalid format of lastname\\\"\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong lastname. Invalid format of lastname\")",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"005 - profile details Update firstname - invalid format geo\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let Ufname = pm.variables.replaceIn('{{$randomFirstName}}')\r",
													"\r",
													"let personalId = Math.round(Math.random() * (99999999999 - 00000000001) + 00000000001)\r",
													"function randomDate(start, end) { return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())); }\r",
													"let birthdate = randomDate(new Date(1, 01, 2000), new Date()).toLocaleDateString()\r",
													"pm.collectionVariables.set(\"fname\", Ufname)\r",
													"\r",
													"pm.collectionVariables.set(\"personalID\", personalId)\r",
													"pm.collectionVariables.set(\"birthDate\", \"1/11/1111\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"birthdate\": \"1/11/1111\",\r\n  \"firstname\": \"{{fname}}\",\r\n  \"lastname\": \"{{refresh_token}}\",\r\n  \"personalId\": \"{{personalID}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/details",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"details"
											]
										}
									},
									"response": []
								},
								{
									"name": "005 - profile details Update firstname - invalid format geo",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message must contain text: \\\"Wrong firstname. Invalid format of firstname\\\"\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong firstname. Invalid format of firstname\")",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"006 - profile details Update lastname - invalid format geo\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"let Ulname = pm.variables.replaceIn('{{$randomLastName}}')\r",
													"let personalId = Math.round(Math.random() * (99999999999 - 00000000001) + 00000000001)\r",
													"function randomDate(start, end) { return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())); }\r",
													"let birthdate = randomDate(new Date(1, 01, 2000), new Date()).toLocaleDateString()\r",
													"\r",
													"pm.collectionVariables.set(\"lname\", Ulname)\r",
													"pm.collectionVariables.set(\"personalID\", personalId)\r",
													"pm.collectionVariables.set(\"birthDate\", \"1/11/1111\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"birthdate\": \"1/11/1111\",\r\n  \"firstname\": \"სს\",\r\n  \"lastname\": \"{{lname}}\",\r\n  \"personalId\": \"{{personalID}}\"\r\n}//fname mustnot contains symbols its bug",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/details",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"details"
											]
										}
									},
									"response": []
								},
								{
									"name": "006 - profile details Update lastname - invalid format geo",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message must contain text: \\\"Wrong lastname. Invalid format of lastname\\\"\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong lastname. Invalid format of lastname\")",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"007 - profile details Update firstname - invalid format\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let Ufname = pm.variables.replaceIn('{{$randomFirstName}}')\r",
													"\r",
													"let personalId = Math.round(Math.random() * (99999999999 - 00000000001) + 00000000001)\r",
													"function randomDate(start, end) { return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())); }\r",
													"let birthdate = randomDate(new Date(1, 01, 2000), new Date()).toLocaleDateString()\r",
													"pm.collectionVariables.set(\"fname\", Ufname)\r",
													"\r",
													"pm.collectionVariables.set(\"personalID\", personalId)\r",
													"pm.collectionVariables.set(\"birthDate\", \"1/11/1111\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"birthdate\": \"1/11/1111\",\r\n  \"firstname\": \"{{fname}}\",\r\n  \"lastname\": \"სს\",\r\n  \"personalId\": \"{{personalID}}\"\r\n}//fname mustnot contains symbols its bug",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/details",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"details"
											]
										}
									},
									"response": []
								},
								{
									"name": "007 - profile details Update firstname - invalid format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message must contain text: \\\"Wrong firstname. Invalid format of firstname\\\"\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong firstname. Invalid format of firstname\")",
													"});",
													"",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"008 - profile details Update lastname - invalid format\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"let Ulname = pm.variables.replaceIn('{{$randomLastName}}')\r",
													"let personalId = Math.round(Math.random() * (99999999999 - 00000000001) + 00000000001)\r",
													"function randomDate(start, end) { return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())); }\r",
													"let birthdate = randomDate(new Date(1, 01, 2000), new Date()).toLocaleDateString()\r",
													"\r",
													"pm.collectionVariables.set(\"lname\", Ulname)\r",
													"pm.collectionVariables.set(\"personalID\", personalId)\r",
													"pm.collectionVariables.set(\"birthDate\", \"1/11/1111\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"birthdate\": \"1/11/1111\",\r\n  \"firstname\": \"@#$!\",\r\n  \"lastname\": \"{{lname}}\",\r\n  \"personalId\": \"{{personalID}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/details",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"details"
											]
										}
									},
									"response": []
								},
								{
									"name": "008 - profile details Update lastname - invalid format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message must contain text: \\\"Wrong lastname. Invalid format of lastname\\\"\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong lastname. Invalid format of lastname\")",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"009- profile details Update personalid - invalid format\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let Ufname = pm.variables.replaceIn('{{$randomFirstName}}')\r",
													"\r",
													"let personalId = Math.round(Math.random() * (99999999999 - 00000000001) + 00000000001)\r",
													"function randomDate(start, end) { return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())); }\r",
													"let birthdate = randomDate(new Date(1, 01, 2000), new Date()).toLocaleDateString()\r",
													"pm.collectionVariables.set(\"fname\", Ufname)\r",
													"\r",
													"pm.collectionVariables.set(\"personalID\", personalId)\r",
													"pm.collectionVariables.set(\"birthDate\", \"1/11/1111\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"birthdate\": \"1/11/1111\",\r\n  \"firstname\": \"{{fname}}\",\r\n  \"lastname\": \"!@#$%#$\",\r\n  \"personalId\": \"{{personalID}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/details",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"details"
											]
										}
									},
									"response": []
								},
								{
									"name": "009- profile details Update personalid - invalid format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message must contain text: \\\"Wrong personalId. Invalid format of personal id\\\"\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong personalId. Invalid format of personal id\")",
													"});",
													"",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"010- profile details Update personalid - less than valid\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let Ufname = pm.variables.replaceIn('{{$randomFirstName}}')\r",
													"let Ulname = pm.variables.replaceIn('{{$randomLastName}}')\r",
													"\r",
													"function randomDate(start, end) { return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())); }\r",
													"let birthdate = randomDate(new Date(1, 01, 2000), new Date()).toLocaleDateString()\r",
													"pm.collectionVariables.set(\"fname\", Ufname)\r",
													"pm.collectionVariables.set(\"lname\", Ulname)\r",
													"\r",
													"pm.collectionVariables.set(\"birthDate\", \"1/11/1111\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"birthdate\": \"1/11/1111\",\r\n  \"firstname\": \"{{fname}}\",\r\n  \"lastname\": \"{{lname}}\",\r\n  \"personalId\": \"!@@#$@#@\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/details",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"details"
											]
										}
									},
									"response": []
								},
								{
									"name": "010- profile details Update personalid - less than valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message must contain text: \\\"Wrong personalId. Invalid format of personal id\\\"\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong personalId. Invalid format of personal id\")",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"011- profile details Update personalid -more than valid\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let Ufname = pm.variables.replaceIn('{{$randomFirstName}}')\r",
													"let Ulname = pm.variables.replaceIn('{{$randomLastName}}')\r",
													"\r",
													"function randomDate(start, end) { return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())); }\r",
													"let birthdate = randomDate(new Date(1, 01, 2000), new Date()).toLocaleDateString()\r",
													"pm.collectionVariables.set(\"fname\", Ufname)\r",
													"pm.collectionVariables.set(\"lname\", Ulname)\r",
													"\r",
													"pm.collectionVariables.set(\"birthDate\", \"1/11/1111\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"birthdate\": \"1/11/1111\",\r\n  \"firstname\": \"{{fname}}\",\r\n  \"lastname\": \"{{lname}}\",\r\n  \"personalId\": \"0\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/details",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"details"
											]
										}
									},
									"response": []
								},
								{
									"name": "011- profile details Update personalid -more than valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message must contain text: \\\"Wrong personalId. Invalid format of personal id\\\"\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong personalId. Invalid format of personal id\")",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"012- profile details Update birthdate - invalid format\")",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let Ufname = pm.variables.replaceIn('{{$randomFirstName}}')\r",
													"let Ulname = pm.variables.replaceIn('{{$randomLastName}}')\r",
													"\r",
													"function randomDate(start, end) { return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())); }\r",
													"let birthdate = randomDate(new Date(1, 01, 2000), new Date()).toLocaleDateString()\r",
													"pm.collectionVariables.set(\"fname\", Ufname)\r",
													"pm.collectionVariables.set(\"lname\", Ulname)\r",
													"\r",
													"pm.collectionVariables.set(\"birthDate\", \"1/11/1111\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"birthdate\": \"1/11/1111\",\r\n  \"firstname\": \"{{fname}}\",\r\n  \"lastname\": \"{{lname}}\",\r\n  \"personalId\": \"1234567890121\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/details",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"details"
											]
										}
									},
									"response": []
								},
								{
									"name": "012- profile details Update birthdate - invalid format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 406\", function () {",
													"\tpm.response.to.have.status(406);",
													"});",
													"",
													"pm.test(\"Error message must contain text: \\\"406 NOT_ACCEPTABLE \\\"Bad birthday pattern! must be d/MM/yyyy\\\"\\\"\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"406 NOT_ACCEPTABLE \\\"Bad birthday pattern! must be d/MM/yyyy\\\"\")",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - send sms changeNum empty\")",
													"",
													"pm.collectionVariables.set(\"birthDate\", \"\")",
													"pm.collectionVariables.set(\"personalID\", \"\")",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let Ufname = pm.variables.replaceIn('{{$randomFirstName}}')\r",
													"let Ulname = pm.variables.replaceIn('{{$randomLastName}}')\r",
													"let personalId = Math.round(Math.random() * (99999999999 - 00000000001) + 00000000001)\r",
													"function randomDate(start, end) { return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())); }\r",
													"let birthdate = randomDate(new Date(1, 01, 2000), new Date()).toLocaleDateString()\r",
													"pm.collectionVariables.set(\"fname\", Ufname)\r",
													"pm.collectionVariables.set(\"lname\", Ulname)\r",
													"pm.collectionVariables.set(\"personalID\", personalId)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"birthdate\": \"!@#$!@#@\",\r\n  \"firstname\": \"{{fname}}\",\r\n  \"lastname\": \"{{lname}}\",\r\n  \"personalId\": \"{{personalID}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/details",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"details"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "003 - 003 - change phone negative",
							"item": [
								{
									"name": "001 - send sms changeNum empty",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"send_sms_type\", \"PHONE_CHANGE\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message must contain text: \\\"Wrong phone. Must not be blank\\\"\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong phone. Must not be blank\")",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - change phone with less data than allowed\")",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"countryCode\": \"996\",\n  \"otphash\": \"string\",\n  \"phone\": \"\",\n  \"smsType\": \"{{send_sms_type}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/send-sms",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"send-sms"
											]
										},
										"description": "## Send SMS\n\n### Purpose\n\nThis request is used to generate OTP for the user.\n\nGenerated OTP is requested for:\n\n- Login (LOGIN)\n- Password reset (PASSWORD_RESET)\n- Phone change (PHONE_CHANGE)\n- Registration (REGISTRATION)\n\n### Parameters\n\n`send-sms` request needs four parameters:\n\n1. `countryCode` - is set to `996` to make process automation possible. Using '996' makes possible to use `123456` as OTP wherever it is required.\n2. `otphash` - we are passing any string here.\n3. `phone` - the value for this parameter is set in collection variables. For registration it is randomly generated. \n4. `smsType` - the value for this parameter is set in collection variables. Its default value is `REGISTRATION`. Its value is changed dynamically during the test run.\n\n\n\nAfter generating OTP, it must be verified by \n`verify-sms` request."
									},
									"response": []
								},
								{
									"name": "002 - change phone with less data than allowed",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"send_sms_type\", \"PHONE_CHANGE\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message must contain text: \\\"Wrong phone. Invalid format of phone\\\"\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong phone. Invalid format of phone\")",
													" });",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - change phone with more data than allowed\")",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"countryCode\": \"996\",\n  \"otphash\": \"string\",\n  \"phone\": \"1\",\n  \"smsType\": \"{{send_sms_type}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/send-sms",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"send-sms"
											]
										},
										"description": "## Send SMS\n\n### Purpose\n\nThis request is used to generate OTP for the user.\n\nGenerated OTP is requested for:\n\n- Login (LOGIN)\n- Password reset (PASSWORD_RESET)\n- Phone change (PHONE_CHANGE)\n- Registration (REGISTRATION)\n\n### Parameters\n\n`send-sms` request needs four parameters:\n\n1. `countryCode` - is set to `996` to make process automation possible. Using '996' makes possible to use `123456` as OTP wherever it is required.\n2. `otphash` - we are passing any string here.\n3. `phone` - the value for this parameter is set in collection variables. For registration it is randomly generated. \n4. `smsType` - the value for this parameter is set in collection variables. Its default value is `REGISTRATION`. Its value is changed dynamically during the test run.\n\n\n\nAfter generating OTP, it must be verified by \n`verify-sms` request."
									},
									"response": []
								},
								{
									"name": "003 - change phone with more data than allowed",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"send_sms_type\", \"PHONE_CHANGE\")\r",
													"\r",
													"let maxumber = Math.round(Math.random() * (99999999999999999999 - 00000000000000000001) + 00000000000000000001)\r",
													"pm.collectionVariables.set(\"maxNumber\", maxumber)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message must contain text: \\\"Wrong phone. Invalid format of phone\\\"\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong phone. Invalid format of phone\")",
													" });",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - change phone with incorect format data Copy\")",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"countryCode\": \"996\",\n  \"otphash\": \"string\",\n  \"phone\": \"{{maxNumber}}\",\n  \"smsType\": \"{{send_sms_type}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/send-sms",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"send-sms"
											]
										},
										"description": "## Send SMS\n\n### Purpose\n\nThis request is used to generate OTP for the user.\n\nGenerated OTP is requested for:\n\n- Login (LOGIN)\n- Password reset (PASSWORD_RESET)\n- Phone change (PHONE_CHANGE)\n- Registration (REGISTRATION)\n\n### Parameters\n\n`send-sms` request needs four parameters:\n\n1. `countryCode` - is set to `996` to make process automation possible. Using '996' makes possible to use `123456` as OTP wherever it is required.\n2. `otphash` - we are passing any string here.\n3. `phone` - the value for this parameter is set in collection variables. For registration it is randomly generated. \n4. `smsType` - the value for this parameter is set in collection variables. Its default value is `REGISTRATION`. Its value is changed dynamically during the test run.\n\n\n\nAfter generating OTP, it must be verified by \n`verify-sms` request."
									},
									"response": []
								},
								{
									"name": "004 - change phone with incorect format data Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"send_sms_type\", \"PHONE_CHANGE\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message must contain text: \\\"Wrong phone. Invalid format of phone\\\"\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong phone. Invalid format of phone\")",
													" });",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"005 - change phone with space\")",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"countryCode\": \"996\",\n  \"otphash\": \"string\",\n  \"phone\": \"test\",\n  \"smsType\": \"{{send_sms_type}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/send-sms",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"send-sms"
											]
										},
										"description": "## Send SMS\n\n### Purpose\n\nThis request is used to generate OTP for the user.\n\nGenerated OTP is requested for:\n\n- Login (LOGIN)\n- Password reset (PASSWORD_RESET)\n- Phone change (PHONE_CHANGE)\n- Registration (REGISTRATION)\n\n### Parameters\n\n`send-sms` request needs four parameters:\n\n1. `countryCode` - is set to `996` to make process automation possible. Using '996' makes possible to use `123456` as OTP wherever it is required.\n2. `otphash` - we are passing any string here.\n3. `phone` - the value for this parameter is set in collection variables. For registration it is randomly generated. \n4. `smsType` - the value for this parameter is set in collection variables. Its default value is `REGISTRATION`. Its value is changed dynamically during the test run.\n\n\n\nAfter generating OTP, it must be verified by \n`verify-sms` request."
									},
									"response": []
								},
								{
									"name": "005 - change phone with space",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"send_sms_type\", \"PHONE_CHANGE\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message must contain text: \\\"Wrong phone\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong phone\")",
													" });",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"006 - verify sms changeNum empty\")",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"countryCode\": \"996\",\n  \"otphash\": \"string\",\n  \"phone\": \"   \",\n  \"smsType\": \"{{send_sms_type}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/send-sms",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"send-sms"
											]
										},
										"description": "## Send SMS\n\n### Purpose\n\nThis request is used to generate OTP for the user.\n\nGenerated OTP is requested for:\n\n- Login (LOGIN)\n- Password reset (PASSWORD_RESET)\n- Phone change (PHONE_CHANGE)\n- Registration (REGISTRATION)\n\n### Parameters\n\n`send-sms` request needs four parameters:\n\n1. `countryCode` - is set to `996` to make process automation possible. Using '996' makes possible to use `123456` as OTP wherever it is required.\n2. `otphash` - we are passing any string here.\n3. `phone` - the value for this parameter is set in collection variables. For registration it is randomly generated. \n4. `smsType` - the value for this parameter is set in collection variables. Its default value is `REGISTRATION`. Its value is changed dynamically during the test run.\n\n\n\nAfter generating OTP, it must be verified by \n`verify-sms` request."
									},
									"response": []
								},
								{
									"name": "006 - verify sms changeNum empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message must contain text: \\\"Wrong phone. Must not be blank\\\"\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong phone. Must not be blank\")",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"007 - send sms changeNum for wrong PhoneNumber\")",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"code\": \"123456\",\n  \"countryCode\": \"996\",\n  \"phone\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/verify-sms",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"verify-sms"
											]
										},
										"description": "## Verify SMS\n\n### Purpose\n\nThis request is used to verify sent OTP and generate `SMSID`.\n\n### Parameters\n\n`verify-sms` request requires three parameters to pass:\n\n1. `code` - OTP code sent via `send-sms` request.\n2. `countryCode` - for what country it was sent. For us, it is `996`.\n3. `phone` - for what number OTP was generated for. The value of this parameter is from the collection variables.\n\n### Tests\n\nAfter the response is received\n\n-  `smsID` is set at collection variables.\n- The length of returned smsid is checked.\n- The next request is set from collection variables."
									},
									"response": []
								},
								{
									"name": "007 - send sms changeNum for wrong PhoneNumber",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"send_sms_type\", \"PHONE_CHANGE\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"008 - verify sms changeNum wrong phone\")",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"countryCode\": \"996\",\n  \"otphash\": \"string\",\n  \"phone\": \"123456789\",\n  \"smsType\": \"{{send_sms_type}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/send-sms",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"send-sms"
											]
										},
										"description": "## Send SMS\n\n### Purpose\n\nThis request is used to generate OTP for the user.\n\nGenerated OTP is requested for:\n\n- Login (LOGIN)\n- Password reset (PASSWORD_RESET)\n- Phone change (PHONE_CHANGE)\n- Registration (REGISTRATION)\n\n### Parameters\n\n`send-sms` request needs four parameters:\n\n1. `countryCode` - is set to `996` to make process automation possible. Using '996' makes possible to use `123456` as OTP wherever it is required.\n2. `otphash` - we are passing any string here.\n3. `phone` - the value for this parameter is set in collection variables. For registration it is randomly generated. \n4. `smsType` - the value for this parameter is set in collection variables. Its default value is `REGISTRATION`. Its value is changed dynamically during the test run.\n\n\n\nAfter generating OTP, it must be verified by \n`verify-sms` request."
									},
									"response": []
								},
								{
									"name": "008 - verify sms changeNum wrong phone",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 428\", function () {",
													"\tpm.response.to.have.status(428);",
													"});",
													"",
													"pm.test(\"Error message must contain text: \\\"428 PRECONDITION_REQUIRED \\\"SMS not send on phone 996595959695 \\\"\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"428 PRECONDITION_REQUIRED \\\"SMS not send on phone 996595959695 \")",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"009 - change phone with emoty field\")",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"code\": \"123456\",\n  \"countryCode\": \"996\",\n  \"phone\": \"595959695\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/auth/verify-sms",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"auth",
												"verify-sms"
											]
										},
										"description": "## Verify SMS\n\n### Purpose\n\nThis request is used to verify sent OTP and generate `SMSID`.\n\n### Parameters\n\n`verify-sms` request requires three parameters to pass:\n\n1. `code` - OTP code sent via `send-sms` request.\n2. `countryCode` - for what country it was sent. For us, it is `996`.\n3. `phone` - for what number OTP was generated for. The value of this parameter is from the collection variables.\n\n### Tests\n\nAfter the response is received\n\n-  `smsID` is set at collection variables.\n- The length of returned smsid is checked.\n- The next request is set from collection variables."
									},
									"response": []
								},
								{
									"name": "009 - change phone with emoty field",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message must contain text: \\\"Wrong userSMSid. Must not be blank\\\"\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong userSMSId\")",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"010 - change phone with wrong sms\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userSMSId\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/phone",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"phone"
											]
										}
									},
									"response": []
								},
								{
									"name": "010 - change phone with wrong sms",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"\tpm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Error message must contain text: \\\"404 NOT_FOUND \\\"Sms not send with id 6559595 \\\"\", () => {",
													"\tpm.expect(jsonData.message).to.contain(\"404 NOT_FOUND \\\"Sms not send with id 6559595 \\\"\")",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - upload incorect format data .pdf\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userSMSId\": \"6559595\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/phone",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"phone"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "003 - 004 - upload image negative",
							"item": [
								{
									"name": "001 - upload incorect format data .pdf",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 415\", function () {\r",
													"\tpm.response.to.have.status(415);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message must contain text: UNSUPPORTED_MEDIA_TYPE\", () => {\r",
													"\tpm.expect(jsonData.message).to.contain(\"415 UNSUPPORTED_MEDIA_TYPE\")\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - upload incorect format data .mp4\")\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "/C:/Users/levan/Downloads/RentalSummary-TestProperty-12-Jul-2021.pdf",
													"disabled": true
												},
												{
													"key": "file",
													"type": "file",
													"src": "Georbio.pdf"
												}
											]
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/image",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"image"
											]
										}
									},
									"response": []
								},
								{
									"name": "002 - upload incorect format data .mp4",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 415\", function () {\r",
													"\tpm.response.to.have.status(415);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message must contain text: UNSUPPORTED_MEDIA_TYPE\", () => {\r",
													"\tpm.expect(jsonData.message).to.contain(\"415 UNSUPPORTED_MEDIA_TYPE\")\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - upload incorect format data .docx\")\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "/C:/Users/levan/Downloads/RentalSummary-TestProperty-12-Jul-2021.pdf",
													"disabled": true
												},
												{
													"key": "file",
													"type": "file",
													"src": "SampleVideo_1280x720_5mb.mp4"
												}
											]
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/image",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"image"
											]
										}
									},
									"response": []
								},
								{
									"name": "003 - upload incorect format data .docx",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 415\", function () {\r",
													"\tpm.response.to.have.status(415);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message must contain text: UNSUPPORTED_MEDIA_TYPE\", () => {\r",
													"\tpm.expect(jsonData.message).to.contain(\"415 UNSUPPORTED_MEDIA_TYPE\")\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - upload more than max size data\")\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "/C:/Users/levan/Downloads/RentalSummary-TestProperty-12-Jul-2021.pdf",
													"disabled": true
												},
												{
													"key": "file",
													"type": "file",
													"src": "MIDTERM.docx"
												}
											]
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/image",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"image"
											]
										}
									},
									"response": []
								},
								{
									"name": "004 - upload more than max size data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 413\", function () {\r",
													"\tpm.response.to.have.status(413);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - click upload empty field\")\r",
													"\r",
													"pm.test(\"Error message must contain text: File size exceeds limit of -1 bytes\", () => {\r",
													"\tpm.expect(jsonData.message).contain(\"File size exceeds limit of -1 bytes\")\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "/E:/bandi/bandicam 2021-01-03 15-11-07-091.mp4",
													"disabled": true
												},
												{
													"key": "file",
													"type": "file",
													"src": "SampleJPGImage_15mbmb.jpg"
												}
											]
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/image",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"image"
											]
										}
									},
									"response": []
								},
								{
									"name": "005 - click upload empty field",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 415\", function () {\r",
													"\tpm.response.to.have.status(415);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message must contain text: Content type '' not supported\", () => {\r",
													"\tpm.expect(jsonData.message).to.contain(\"Content type '' not supported\")\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - change Email without '@' symbol\")\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": [],
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/image",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"image"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "003 - 005 - change Email negative",
							"item": [
								{
									"name": "001 - change Email without '@' symbol",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message must contain text: \\\"Wrong email. Please provide a valid email address, Wrong email. Please provide a valid email address\\\"\", () => {\r",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong email. Please provide a valid email address, Wrong email. Please provide a valid email address\")\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002- change Email empty field\")\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"testmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/send-email",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"send-email"
											]
										}
									},
									"response": []
								},
								{
									"name": "002- change Email empty field",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Wrong email. Must not be blank, Wrong email\", () => {\r",
													"\tpm.expect(jsonData.message).to.contain(\"Please provide a valid email address\");\r",
													"});\r",
													"\r",
													"pm.test(\"Wrong email. Must not be blank\", () => {\r",
													"\tpm.expect(jsonData.message).to.contain(\"Must not be blank\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - change Email without ' . '  symbol\")\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/send-email",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"send-email"
											]
										}
									},
									"response": []
								},
								{
									"name": "003 - change Email without ' . '  symbol",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message must contain text: \\\"Wrong email. Please provide a valid email address\\\"\", () => {\r",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong email. Please provide a valid email address\")\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - addBlockedUser yourself\")\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"test@mailcom\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/send-email",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"send-email"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "003 - 006 - add user in block list negative",
							"item": [
								{
									"name": "001 - addBlockedUser yourself",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 406\", function () {\r",
													"\tpm.response.to.have.status(406);\r",
													"});\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Test user 406 NOT_ACCEPTABLE \\\"You can't blocked yourself!\\\"\", function () {\r",
													"\tpm.expect(jsonData.message).to.contain(\"406 NOT_ACCEPTABLE \\\"You can't blocked yourself!\\\"\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - addBlockedUser wrong Id\")\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/block?userId={{loggedId}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"block"
											],
											"query": [
												{
													"key": "userId",
													"value": "{{loggedId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "002 - addBlockedUser wrong Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"\tpm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Test user 404 NOT_FOUND \\\"User with id 0 not found!\\\"\", function () {\r",
													"\tpm.expect(jsonData.message).to.contain(\"404 NOT_FOUND \\\"User with id 0 not found!\\\"\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - addBlockedUser empty\")\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/block?userId=0",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"block"
											],
											"query": [
												{
													"key": "userId",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "003 - addBlockedUser empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Required Long parameter 'userId' is not present\", function () {\r",
													"\tpm.expect(jsonData.message).to.contain(\"Required Long parameter 'userId' is not present\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - addBlockedUser max\")\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/block?userId",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"block"
											],
											"query": [
												{
													"key": "userId",
													"value": null
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "004 - addBlockedUser max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Failed to convert value of type\", function () {\r",
													"\tpm.expect(jsonData.message).to.contain(\"Failed to convert value of type\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"005 - addBlockedUser space\")\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let maxumber = Math.round(Math.random() * (99999999999999999999 - 00000000000000000001) + 00000000000000000001)\r",
													"pm.collectionVariables.set(\"maxNumber\", maxumber)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/block?userId={{maxNumber}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"block"
											],
											"query": [
												{
													"key": "userId",
													"value": "{{maxNumber}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "005 - addBlockedUser space",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Required Long parameter 'userId' is not present\", function () {\r",
													"\tpm.expect(jsonData.message).to.contain(\"Required Long parameter 'userId' is not present\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"006 - addBlockedUser incorrect format\")\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/block?userId=   ",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"block"
											],
											"query": [
												{
													"key": "userId",
													"value": "   "
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "006 - addBlockedUser incorrect format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Failed to convert value of type\", function () {\r",
													"\tpm.expect(jsonData.message).to.contain(\"Failed to convert value of type\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - profile details Update\")\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/block?userId=test",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"block"
											],
											"query": [
												{
													"key": "userId",
													"value": "test"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "002 - profile details Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"\tpm.response.to.have.status(200);",
											"});",
											"",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - change Email\")",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let Ufname = pm.variables.replaceIn('{{$randomFirstName}}')\r",
											"let Ulname = pm.variables.replaceIn('{{$randomLastName}}')\r",
											"let personalId = Math.round(Math.random() * (99999999999 - 00000000001) + 00000000001)\r",
											"function randomDate(start, end) { return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())); }\r",
											"let birthdate = randomDate(new Date(1, 01, 2000), new Date()).toLocaleDateString()\r",
											"pm.collectionVariables.set(\"fname\", Ufname)\r",
											"pm.collectionVariables.set(\"lname\", Ulname)\r",
											"pm.collectionVariables.set(\"personalID\", personalId)\r",
											"pm.collectionVariables.set(\"birthDate\", \"1/11/1111\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"birthdate\": \"{{birthDate}}\",\r\n  \"firstname\": \"{{fname}}\",\r\n  \"lastname\": \"{{lname}}\",\r\n  \"personalId\": \"{{personalID}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/profile/details",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"profile",
										"details"
									]
								}
							},
							"response": []
						},
						{
							"name": "003 - change Email",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let mailName = pm.variables.replaceIn('{{$randomFirstName}}')\r",
											"pm.collectionVariables.set(\"emailName\", mailName)\r",
											"var mail = \"jgw8f.{{emailName}}@inbox.testmail.app\";\r",
											"pm.collectionVariables.set(\"email\", mail)\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"\tpm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - change Email VerifySms\")\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{email}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/profile/send-email",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"profile",
										"send-email"
									]
								}
							},
							"response": []
						},
						{
							"name": "004 - change Email VerifySms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"\tpm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let body = JSON.parse(responseBody)\r",
											"\r",
											"setTimeout(function(){}, 2000)\r",
											"\r",
											"if(body.count > 0){\r",
											"    let verify = body.emails[0].html\r",
											"\r",
											"    let verifySMS = verify.substr(verify.length - 6)\r",
											"\r",
											"    pm.collectionVariables.set(\"mailVerificationCode\", verifySMS)\r",
											"\r",
											"    pm.collectionVariables.set(\"next_request_after_verify_sms\", \"005 - change Email verify-email\")\r",
											"    \r",
											"}else{\r",
											"    setTimeout(function(){}, 2000)\r",
											"    postman.setNextRequest(\"004 - change Email VerifySms\")\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "Bearer 534e376a-2568-4450-95f5-c29da838575b",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.testmail.app/api/json?apikey=534e376a-2568-4450-95f5-c29da838575b&namespace=jgw8f&pretty=true&tag={{emailName}}&limit=1",
									"protocol": "https",
									"host": [
										"api",
										"testmail",
										"app"
									],
									"path": [
										"api",
										"json"
									],
									"query": [
										{
											"key": "apikey",
											"value": "534e376a-2568-4450-95f5-c29da838575b"
										},
										{
											"key": "namespace",
											"value": "jgw8f"
										},
										{
											"key": "pretty",
											"value": "true"
										},
										{
											"key": "tag",
											"value": "{{emailName}}"
										},
										{
											"key": "limit",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "005 - change Email verify-email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"005 - change Email already registered\")\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"code\": \"{{mailVerificationCode}}\",\r\n  \"email\": \"jgw8f.{{emailName}}@inbox.testmail.app\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/profile/verify-email",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"profile",
										"verify-email"
									]
								}
							},
							"response": []
						},
						{
							"name": "005 - change Email already registered",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 409\", function () {\r",
											"\tpm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message must contain text: \\\"409 CONFLICT \\\"User with email already exist!\\\"\\\"\", () => {\r",
											"\tpm.expect(jsonData.message).to.contains(\"409 CONFLICT \")\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"006 - send sms changeNum\")\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"jgw8f.{{emailName}}@inbox.testmail.app\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/profile/send-email",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"profile",
										"send-email"
									]
								}
							},
							"response": []
						},
						{
							"name": "006 - send sms changeNum",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let updatedNumber = Math.round(Math.random() * (999999999 - 000000001) + 000000001)",
											"pm.collectionVariables.set(\"updatedRegNumber\", updatedNumber)",
											"pm.collectionVariables.set(\"send_sms_type\", \"PHONE_CHANGE\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 201\", () => {",
											"\tpm.expect(\"Status code is 201\", () => {",
											"\t\tpm.response.to.have.status(201);",
											"\t});",
											"});",
											"",
											"pm.collectionVariables.set(\"send_sms_type\", \"LOGIN\")",
											"",
											"",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"007 - verify sms changeNum\")",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"countryCode\": \"996\",\n  \"otphash\": \"string\",\n  \"phone\": \"{{updatedRegNumber}}\",\n  \"smsType\": \"{{send_sms_type}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/auth/send-sms",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"auth",
										"send-sms"
									]
								},
								"description": "## Send SMS\n\n### Purpose\n\nThis request is used to generate OTP for the user.\n\nGenerated OTP is requested for:\n\n- Login (LOGIN)\n- Password reset (PASSWORD_RESET)\n- Phone change (PHONE_CHANGE)\n- Registration (REGISTRATION)\n\n### Parameters\n\n`send-sms` request needs four parameters:\n\n1. `countryCode` - is set to `996` to make process automation possible. Using '996' makes possible to use `123456` as OTP wherever it is required.\n2. `otphash` - we are passing any string here.\n3. `phone` - the value for this parameter is set in collection variables. For registration it is randomly generated. \n4. `smsType` - the value for this parameter is set in collection variables. Its default value is `REGISTRATION`. Its value is changed dynamically during the test run.\n\n\n\nAfter generating OTP, it must be verified by \n`verify-sms` request."
							},
							"response": []
						},
						{
							"name": "007 - verify sms changeNum",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 202\", () => {",
											"\tpm.expect(\"Status code is 202\", () => {",
											"\t\tpm.response.to.have.status(202);",
											"\t});",
											"});",
											"",
											"// Get smsID from response",
											"let smsID = responseBody",
											"",
											"// Set smsID in collection variables",
											"pm.collectionVariables.set(\"smsID\", smsID)",
											"",
											"// Check smsID length to be 36 symbols",
											"pm.test(\"Test smsID length is 36\", function(){",
											"\tpm.expect(smsID.length).to.be.equal(36)",
											"});",
											"",
											"",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"008 - change phone number\")",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"123456\",\n  \"countryCode\": \"996\",\n  \"phone\": \"{{updatedRegNumber}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/auth/verify-sms",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"auth",
										"verify-sms"
									]
								},
								"description": "## Verify SMS\n\n### Purpose\n\nThis request is used to verify sent OTP and generate `SMSID`.\n\n### Parameters\n\n`verify-sms` request requires three parameters to pass:\n\n1. `code` - OTP code sent via `send-sms` request.\n2. `countryCode` - for what country it was sent. For us, it is `996`.\n3. `phone` - for what number OTP was generated for. The value of this parameter is from the collection variables.\n\n### Tests\n\nAfter the response is received\n\n-  `smsID` is set at collection variables.\n- The length of returned smsid is checked.\n- The next request is set from collection variables."
							},
							"response": []
						},
						{
							"name": "008 - change phone number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 205\", function () {\r",
											"\tpm.response.to.have.status(205);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"009 - profile details Updated\")\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userSMSId\": \"{{smsID}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/profile/phone",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"profile",
										"phone"
									]
								}
							},
							"response": []
						},
						{
							"name": "009 - profile details Updated",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"c_fname = pm.collectionVariables.get(\"fname\")\r",
											"c_lname = pm.collectionVariables.get(\"lname\")\r",
											"//c_birthdate = pm.collectionVariables.get(\"birthDate\")\r",
											"c_personalId = pm.collectionVariables.get(\"personalID\").toString();\r",
											"c_email = pm.collectionVariables.get(\"emailName\")\r",
											"c_phone = pm.collectionVariables.get(\"updatedRegNumber\").toString();\r",
											"\r",
											"let fname = jsonData.firstname\r",
											"let lname = jsonData.lastname\r",
											"let birthdate = jsonData.birthdate\r",
											"let personalId = jsonData.personalId\r",
											"let email = jsonData.email\r",
											"let phone = jsonData.phoneNumber\r",
											"\r",
											"const schema = {\r",
											"\t\"type\": \"object\",\r",
											"\t\"properties\": {\r",
											"\t\t\"firstname\":{\r",
											"\t\t\t\"type\": \"string\"\r",
											"\t\t},\r",
											"\t\t\"lastname\":{\r",
											"\t\t\t\"type\": \"string\"\r",
											"\t\t},\r",
											"\t\t\"birthdate\":{\r",
											"\t\t\t\"type\": \"string\"\r",
											"\t\t},\r",
											"\t\t\"personalId\":{\r",
											"\t\t\t\"type\": \"string\"\r",
											"\t\t},\r",
											"\t\t\"email\":{\r",
											"\t\t\t\"type\": \"string\"\r",
											"\t\t},\r",
											"\t\t\"phone\":{\r",
											"\t\t\t\"type\": \"string\"\r",
											"\t\t}\r",
											"\t}\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"010 - upload image\")\r",
											"\r",
											"\r",
											"pm.test(\"Validating schema\", () => {\r",
											"\tpm.response.to.have.jsonSchema(schema)\r",
											"})\r",
											"pm.test(\"Test user first name\", function () {\r",
											"\tpm.expect(fname).to.eql(c_fname);\r",
											"});\r",
											"pm.test(\"Test user last name\", function () {\r",
											"\tpm.expect(lname).to.eql(c_lname);\r",
											"});pm.test(\"Test user birthDate\", function () {\r",
											"\tpm.expect(birthdate).to.eql(\"1111-11-01\");\r",
											"});\r",
											"pm.test(\"Test user personalId\", function () {\r",
											"\tpm.expect(personalId).to.eql(c_personalId)\r",
											"});\r",
											"pm.test(\"Test user email\", function () {\r",
											"\tpm.expect(email).to.contain(c_email);\r",
											"});\r",
											"pm.test(\"Test user phone\", function () {\r",
											"\tpm.expect(phone).to.eql(c_phone);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/profile/details",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"profile",
										"details"
									]
								}
							},
							"response": []
						},
						{
							"name": "010 - upload image",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"\tpm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"011 - addBlockedUser\")\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/levan/OneDrive/Desktop/image.jpeg",
											"disabled": true
										},
										{
											"key": "file",
											"type": "file",
											"src": "IMG_20211206_120819.png"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/profile/image",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"profile",
										"image"
									]
								}
							},
							"response": []
						},
						{
							"name": "011 - get uploaded img",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"\tpm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"012 - addBlockedUser\")\r",
											"\r",
											"c_fname = pm.collectionVariables.get(\"fname\")\r",
											"c_loggedId = pm.collectionVariables.get(\"loggedId\")\r",
											"\r",
											"let loggedId = jsonData.id\r",
											"let profileImage = jsonData.profileImage\r",
											"\r",
											"pm.test(\"Test user  profileImage\", function () {\r",
											"\tpm.expect(loggedId).to.eql(c_loggedId);\r",
											"});\r",
											"pm.test(\"Test user  profileImage\", function () {\r",
											"\tpm.expect(profileImage).to.contain(\"profile-images\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/profile",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "012 - addBlockedUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 205\", function () {\r",
											"\tpm.response.to.have.status(205);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"012 - addBlockedUser yourself\")\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/profile/block?userId=155",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"profile",
										"block"
									],
									"query": [
										{
											"key": "userId",
											"value": "155"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "013 - getBlockedUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json()[0];\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\tpm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let id = jsonData.id\r",
											"let fname = jsonData.firstname\r",
											"let lname = jsonData.lastname\r",
											"\r",
											"const schema = {\r",
											"\t\"type\": \"array\",\r",
											"\t\"properties\": {\r",
											"\t\t\"id\":{\r",
											"\t\t\t\"type\": \"number\"\r",
											"\t\t},\r",
											"\t\t\"firstname\":{\r",
											"\t\t\t\"type\": \"string\"\r",
											"\t\t},\r",
											"\t\t\"lastname\":{\r",
											"\t\t\t\"type\": \"string\"\r",
											"\t\t},\r",
											"\t\t\"profileImage\":{\r",
											"\t\t\t\"type\": \"string\"\r",
											"\t\t}\r",
											"\t}\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"014 - unblockUser\")\r",
											"\r",
											"\r",
											"pm.test(\"Validating schema\", () => {\r",
											"\tpm.response.to.have.jsonSchema(schema)\r",
											"})\r",
											"pm.test(\"Test user id\", function () {\r",
											"\tpm.expect(id).to.eql(155);\r",
											"});\r",
											"pm.test(\"Test user firstname\", function () {\r",
											"\tpm.expect(fname).to.eql(\"Caleb\");\r",
											"    \r",
											"});pm.test(\"Test user lastname\", function () {\r",
											"\tpm.expect(lname).to.eql(\"Donnelly\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/profile/blocked-users",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"profile",
										"blocked-users"
									]
								}
							},
							"response": []
						},
						{
							"name": "014 - unblockUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 205\", function () {\r",
											"\tpm.response.to.have.status(205);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"015 - getBlockedUser after unblock\")\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/profile/unblock?userId=155",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"profile",
										"unblock"
									],
									"query": [
										{
											"key": "userId",
											"value": "155"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "015 - getBlockedUser after unblock",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\tpm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"data is null\", function () {\r",
											"\tpm.expect(jsonData.length).to.eql(0);\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"\t\"type\": \"array\"\r",
											"}\r",
											"\r",
											"pm.test(\"Validating schema\", () => {\r",
											"\tpm.response.to.have.jsonSchema(schema)\r",
											"})\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - add merchant empty categoryID\")\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/profile/blocked-users",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"profile",
										"blocked-users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "004 - merchant - branches",
					"item": [
						{
							"name": "004 - 002 - add/update/delete  merchant negative",
							"item": [
								{
									"name": "002 - add merchant empty categoryID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Test Wrong categoryId. Must not be null\", function(){\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"Wrong categoryId. Must not be null\")\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - add merchant wrong categoryID\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"categoryId\": \"\",\r\n  \"name\": \"1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/merchant",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"merchant"
											]
										}
									},
									"response": []
								},
								{
									"name": "003 - add merchant wrong categoryID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"\tpm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Test 404 NOT_FOUND \\\"Category with given id not found\\\"\", function(){\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"404 NOT_FOUND \\\"Category with given id not found\\\"\")\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - add merchant incorect format categoryID\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"categoryId\": -1,\r\n  \"name\": \"test\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/merchant",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"merchant"
											]
										}
									},
									"response": []
								},
								{
									"name": "004 - add merchant incorect format categoryID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Test test can't be parsed to Long.\", function(){\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"test can't be parsed to Long.\")\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"005 - add merchant max categoryID\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"categoryId\": \"test\",\r\n  \"name\": \"test\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/merchant",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"merchant"
											]
										}
									},
									"response": []
								},
								{
									"name": "005 - add merchant max categoryID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Test can't be parsed to Long.\", function(){\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"can't be parsed to Long.\")\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"006 - update merchant max  merchID\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"categoryId\": \"{{maxNumber}}\",\r\n  \"name\": \"test\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/merchant",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"merchant"
											]
										}
									},
									"response": []
								},
								{
									"name": "006 - update merchant max  merchID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"008 - update merchant max  categoryID\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"cashBack\": 1,\r\n  \"categoryId\": 1,\r\n  \"name\": \"test\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/merchant/{{maxNumber}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"merchant",
												"{{maxNumber}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "008 - update merchant max  categoryID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Test JSON parse error: Numeric value\", function(){\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"JSON parse error: Numeric value\")\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"009 - update merchant wrong  merchID\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"cashBack\": 1,\r\n  \"categoryId\": {{maxNumber}},\r\n  \"name\": \"test\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/merchant/5",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"merchant",
												"5"
											]
										}
									},
									"response": []
								},
								{
									"name": "009 - update merchant wrong  merchID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"\tpm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"404 NOT_FOUND \\\"merchant with given id not found\\\"\", function(){\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"404 NOT_FOUND \\\"merchant with given id not found\\\"\")\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"011 - update merchant incorrect  format categoryID\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"cashBack\": 1,\r\n  \"categoryId\": 1,\r\n  \"name\": \"test\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/merchant/-1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"merchant",
												"-1"
											]
										}
									},
									"response": []
								},
								{
									"name": "011 - update merchant incorrect  format categoryID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Test test can't be parsed to Long.\", function(){\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"test can't be parsed to Long.\")\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"012 - update merchant incorrect  format cashBack\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"cashBack\": 1,\r\n  \"categoryId\": \"test\",\r\n  \"name\": \"test\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/merchant/5",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"merchant",
												"5"
											]
										}
									},
									"response": []
								},
								{
									"name": "012 - update merchant incorrect  format cashBack",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Test test can't be parsed to Double.\", function(){\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"test can't be parsed to Double.\")\r",
													"});\r",
													"\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"013 - update merchant incorrect  format merchID\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"cashBack\": \"test\",\r\n  \"categoryId\": 1,\r\n  \"name\": \"test\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/merchant/5",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"merchant",
												"5"
											]
										}
									},
									"response": []
								},
								{
									"name": "013 - update merchant incorrect  format merchID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"014 - delete merchant max parameter\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"cashBack\": 1,\r\n  \"categoryId\": 1,\r\n  \"name\": \"test\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/merchant/test",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"merchant",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "014 - delete merchant max parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Failed to convert value of type\", function(){\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"Failed to convert value of type\")\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"015 - delete merchant wrong parameter\")\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/merchant/{{maxNumber}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"merchant",
												"{{maxNumber}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "015 - delete merchant wrong parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"\tpm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Test 404 NOT_FOUND \\\"merchant with given id not found\\\"\", function(){\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"404 NOT_FOUND \\\"merchant with given id not found\\\"\")\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"017 - delete merchant incorrect format parameter\")\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/merchant/-1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"merchant",
												"-1"
											]
										}
									},
									"response": []
								},
								{
									"name": "017 - delete merchant incorrect format parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Failed to convert value of type\", function(){\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"Failed to convert value of type\")\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - add branch max longitude\")\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/merchant/test",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"merchant",
												"test"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "004 - 003 - add/update/delete branch negative",
							"item": [
								{
									"name": "003 - add branch max longitude",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"JSON parse error\", () => {\r",
													"\tpm.expect(jsonData.message).to.contain(\"JSON parse error: Unrecognized token\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - add branch max latitude\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let bname = pm.variables.replaceIn('{{$randomWord}}')\r",
													"pm.collectionVariables.set(\"branchName\", bname)\r",
													"let Lat = pm.variables.replaceIn('{{$randomLatitude}}')\r",
													"pm.collectionVariables.set(\"latitude\", Lat)\r",
													"let Long = pm.variables.replaceIn('{{$randomLongitude}}')\r",
													"pm.collectionVariables.set(\"longitude\", Long)\r",
													"let addres = pm.variables.replaceIn('{{$randomCity}}')\r",
													"pm.collectionVariables.set(\"address\", addres)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"cashBack\": 5,\r\n  \"latitude\": {{latitude}},\r\n  \"longitude\": {{refresh_token}},\r\n  \"merchantId\": 5,\r\n  \"name\": \"{{branchName}}\",\r\n  \"address\": \"{{address}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/branch",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"branch"
											]
										}
									},
									"response": []
								},
								{
									"name": "004 - add branch max latitude",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"JSON parse error\", () => {\r",
													"\tpm.expect(jsonData.message).to.contain(\"JSON parse error: Unrecognized token\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"005 - add branch max merchantID\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let bname = pm.variables.replaceIn('{{$randomWord}}')\r",
													"pm.collectionVariables.set(\"branchName\", bname)\r",
													"let Lat = pm.variables.replaceIn('{{$randomLatitude}}')\r",
													"pm.collectionVariables.set(\"latitude\", Lat)\r",
													"let Long = pm.variables.replaceIn('{{$randomLongitude}}')\r",
													"pm.collectionVariables.set(\"longitude\", Long)\r",
													"let addres = pm.variables.replaceIn('{{$randomCity}}')\r",
													"pm.collectionVariables.set(\"address\", addres)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"cashBack\": 5,\r\n  \"latitude\": {{refresh_token}},\r\n  \"longitude\": {{longitude}},\r\n  \"merchantId\": 5,\r\n  \"name\": \"{{branchName}}\",\r\n  \"address\": \"{{address}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/branch",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"branch"
											]
										}
									},
									"response": []
								},
								{
									"name": "005 - add branch max merchantID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"JSON parse error\", () => {\r",
													"\tpm.expect(jsonData.message).to.contain(\"JSON parse error: Numeric value\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"006 - add branch wrong merchantID\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let bname = pm.variables.replaceIn('{{$randomWord}}')\r",
													"pm.collectionVariables.set(\"branchName\", bname)\r",
													"let Lat = pm.variables.replaceIn('{{$randomLatitude}}')\r",
													"pm.collectionVariables.set(\"latitude\", Lat)\r",
													"let Long = pm.variables.replaceIn('{{$randomLongitude}}')\r",
													"pm.collectionVariables.set(\"longitude\", Long)\r",
													"let addres = pm.variables.replaceIn('{{$randomCity}}')\r",
													"pm.collectionVariables.set(\"address\", addres)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"cashBack\": 5,\r\n  \"latitude\": {{latitude}},\r\n  \"longitude\": {{longitude}},\r\n  \"merchantId\": {{maxNumber}},\r\n  \"name\": \"{{branchName}}\",\r\n  \"address\": \"{{address}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/branch",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"branch"
											]
										}
									},
									"response": []
								},
								{
									"name": "006 - add branch wrong merchantID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"\tpm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"404 NOT_FOUND \\\"merchant with given id not found\\\"\", () => {\r",
													"\tpm.expect(jsonData.message).to.contain(\"404 NOT_FOUND \\\"merchant with given id not found\\\"\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"007 - add branch empty merchID\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let bname = pm.variables.replaceIn('{{$randomWord}}')\r",
													"pm.collectionVariables.set(\"branchName\", bname)\r",
													"let Lat = pm.variables.replaceIn('{{$randomLatitude}}')\r",
													"pm.collectionVariables.set(\"latitude\", Lat)\r",
													"let Long = pm.variables.replaceIn('{{$randomLongitude}}')\r",
													"pm.collectionVariables.set(\"longitude\", Long)\r",
													"let addres = pm.variables.replaceIn('{{$randomCity}}')\r",
													"pm.collectionVariables.set(\"address\", addres)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"cashBack\": 5,\r\n  \"latitude\": {{latitude}},\r\n  \"longitude\": {{longitude}},\r\n  \"merchantId\": -1,\r\n  \"name\": \"{{branchName}}\",\r\n  \"address\": \"{{address}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/branch",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"branch"
											]
										}
									},
									"response": []
								},
								{
									"name": "007 - add branch empty merchID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"[Wrong merchantId. Must not be null]\", () => {\r",
													"\tpm.expect(jsonData.message).to.contain(\"[Wrong merchantId. Must not be null]\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"008 - add branch empty longitude\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let bname = pm.variables.replaceIn('{{$randomWord}}')\r",
													"pm.collectionVariables.set(\"branchName\", bname)\r",
													"let Lat = pm.variables.replaceIn('{{$randomLatitude}}')\r",
													"pm.collectionVariables.set(\"latitude\", Lat)\r",
													"let Long = pm.variables.replaceIn('{{$randomLongitude}}')\r",
													"pm.collectionVariables.set(\"longitude\", Long)\r",
													"let addres = pm.variables.replaceIn('{{$randomCity}}')\r",
													"pm.collectionVariables.set(\"address\", addres)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"cashBack\": 5,\r\n  \"latitude\": {{latitude}},\r\n  \"longitude\": {{longitude}},\r\n  \"merchantId\": \"\",\r\n  \"name\": \"{{branchName}}\",\r\n  \"address\": \"{{address}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/branch",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"branch"
											]
										}
									},
									"response": []
								},
								{
									"name": "008 - add branch empty longitude",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"[Wrong longitude. Must not be null]\", () => {\r",
													"\tpm.expect(jsonData.message).to.contain(\"[Wrong longitude. Must not be null]\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"009 - add branch empty latitude\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let bname = pm.variables.replaceIn('{{$randomWord}}')\r",
													"pm.collectionVariables.set(\"branchName\", bname)\r",
													"let Lat = pm.variables.replaceIn('{{$randomLatitude}}')\r",
													"pm.collectionVariables.set(\"latitude\", Lat)\r",
													"let Long = pm.variables.replaceIn('{{$randomLongitude}}')\r",
													"pm.collectionVariables.set(\"longitude\", Long)\r",
													"let addres = pm.variables.replaceIn('{{$randomCity}}')\r",
													"pm.collectionVariables.set(\"address\", addres)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"cashBack\": 5,\r\n  \"latitude\": {{latitude}},\r\n  \"longitude\": \"\",\r\n  \"merchantId\": 5,\r\n  \"name\": \"{{branchName}}\",\r\n  \"address\": \"{{address}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/branch",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"branch"
											]
										}
									},
									"response": []
								},
								{
									"name": "009 - add branch empty latitude",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"[Wrong latitude. Must not be null]\", () => {\r",
													"\tpm.expect(jsonData.message).to.contain(\"[Wrong latitude. Must not be null]\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"010 - add branch empty adress\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let bname = pm.variables.replaceIn('{{$randomWord}}')\r",
													"pm.collectionVariables.set(\"branchName\", bname)\r",
													"let digit = pm.variables.replaceIn('{{$randomdigit}}')\r",
													"pm.collectionVariables.set(\"branchName\", bname)\r",
													"let Lat = pm.variables.replaceIn('{{$randomLatitude}}')\r",
													"pm.collectionVariables.set(\"latitude\", Lat)\r",
													"let Long = pm.variables.replaceIn('{{$randomLongitude}}')\r",
													"pm.collectionVariables.set(\"longitude\", Long)\r",
													"let addres = pm.variables.replaceIn('{{$randomCity}}')\r",
													"pm.collectionVariables.set(\"address\", addres)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"cashBack\": 5,\r\n  \"latitude\": \"\",\r\n  \"longitude\": {{longitude}},\r\n  \"merchantId\": 5,\r\n  \"name\": \"{{branchName}}\",\r\n  \"address\": \"{{address}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/branch",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"branch"
											]
										}
									},
									"response": []
								},
								{
									"name": "010 - add branch empty adress",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"[Wrong address. Length must be between 1 and 2147483647]\", () => {\r",
													"\tpm.expect(jsonData.message).to.contain(\"[Wrong address. Length must be between 1 and 2147483647]\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"011 - add branch space latitude\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let bname = pm.variables.replaceIn('{{$randomWord}}')\r",
													"pm.collectionVariables.set(\"branchName\", bname)\r",
													"let digit = pm.variables.replaceIn('{{$randomdigit}}')\r",
													"pm.collectionVariables.set(\"branchName\", bname)\r",
													"let Lat = pm.variables.replaceIn('{{$randomLatitude}}')\r",
													"pm.collectionVariables.set(\"latitude\", Lat)\r",
													"let Long = pm.variables.replaceIn('{{$randomLongitude}}')\r",
													"pm.collectionVariables.set(\"longitude\", Long)\r",
													"let addres = pm.variables.replaceIn('{{$randomCity}}')\r",
													"pm.collectionVariables.set(\"address\", addres)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"cashBack\": 5,\r\n  \"latitude\": {{latitude}},\r\n  \"longitude\": {{longitude}},\r\n  \"merchantId\": 5,\r\n  \"name\": \"{{branchName}}\",\r\n  \"address\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/branch",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"branch"
											]
										}
									},
									"response": []
								},
								{
									"name": "011 - add branch space latitude",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"[Wrong latitude. Must not be null]\", () => {\r",
													"\tpm.expect(jsonData.message).to.contain(\"[Wrong latitude. Must not be null]\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"012 - add branch space longitude\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let bname = pm.variables.replaceIn('{{$randomWord}}')\r",
													"pm.collectionVariables.set(\"branchName\", bname)\r",
													"let digit = pm.variables.replaceIn('{{$randomdigit}}')\r",
													"pm.collectionVariables.set(\"branchName\", bname)\r",
													"let Lat = pm.variables.replaceIn('{{$randomLatitude}}')\r",
													"pm.collectionVariables.set(\"latitude\", Lat)\r",
													"let Long = pm.variables.replaceIn('{{$randomLongitude}}')\r",
													"pm.collectionVariables.set(\"longitude\", Long)\r",
													"let addres = pm.variables.replaceIn('{{$randomCity}}')\r",
													"pm.collectionVariables.set(\"address\", addres)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"cashBack\": 5,\r\n  \"latitude\": \"  \",\r\n  \"longitude\": {{longitude}},\r\n  \"merchantId\": 5,\r\n  \"name\": \"{{branchName}}\",\r\n  \"address\": \"{{address}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/branch",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"branch"
											]
										}
									},
									"response": []
								},
								{
									"name": "012 - add branch space longitude",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"[Wrong longitude. Must not be null]\", () => {\r",
													"\tpm.expect(jsonData.message).to.contain(\"[Wrong longitude. Must not be null]\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"013 - add branch spacemerchantID\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let bname = pm.variables.replaceIn('{{$randomWord}}')\r",
													"pm.collectionVariables.set(\"branchName\", bname)\r",
													"let digit = pm.variables.replaceIn('{{$randomdigit}}')\r",
													"pm.collectionVariables.set(\"branchName\", bname)\r",
													"let Lat = pm.variables.replaceIn('{{$randomLatitude}}')\r",
													"pm.collectionVariables.set(\"latitude\", Lat)\r",
													"let Long = pm.variables.replaceIn('{{$randomLongitude}}')\r",
													"pm.collectionVariables.set(\"longitude\", Long)\r",
													"let addres = pm.variables.replaceIn('{{$randomCity}}')\r",
													"pm.collectionVariables.set(\"address\", addres)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"cashBack\": 5,\r\n  \"latitude\": {{latitude}},\r\n  \"longitude\": \"  \",\r\n  \"merchantId\": 5,\r\n  \"name\": \"{{branchName}}\",\r\n  \"address\": \"{{address}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/branch",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"branch"
											]
										}
									},
									"response": []
								},
								{
									"name": "013 - add branch spacemerchantID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"[Wrong merchantId. Must not be null]\", () => {\r",
													"\tpm.expect(jsonData.message).to.contain(\"[Wrong merchantId. Must not be null]\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"014 - add branch incorrect format merchId\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let bname = pm.variables.replaceIn('{{$randomWord}}')\r",
													"pm.collectionVariables.set(\"branchName\", bname)\r",
													"let digit = pm.variables.replaceIn('{{$randomdigit}}')\r",
													"pm.collectionVariables.set(\"branchName\", bname)\r",
													"let Lat = pm.variables.replaceIn('{{$randomLatitude}}')\r",
													"pm.collectionVariables.set(\"latitude\", Lat)\r",
													"let Long = pm.variables.replaceIn('{{$randomLongitude}}')\r",
													"pm.collectionVariables.set(\"longitude\", Long)\r",
													"let addres = pm.variables.replaceIn('{{$randomCity}}')\r",
													"pm.collectionVariables.set(\"address\", addres)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"cashBack\": 5,\r\n  \"latitude\": {{latitude}},\r\n  \"longitude\": {{longitude}},\r\n  \"merchantId\": \"  \",\r\n  \"name\": \"{{branchName}}\",\r\n  \"address\": \"{{address}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/branch",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"branch"
											]
										}
									},
									"response": []
								},
								{
									"name": "014 - add branch incorrect format merchId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"test can't be parsed to Long.\", () => {\r",
													"\tpm.expect(jsonData.message).to.contain(\"test can't be parsed to Long.\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"015 - add branch incorrect format longitude\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let bname = pm.variables.replaceIn('{{$randomWord}}')\r",
													"pm.collectionVariables.set(\"branchName\", bname)\r",
													"let digit = pm.variables.replaceIn('{{$randomdigit}}')\r",
													"pm.collectionVariables.set(\"branchName\", bname)\r",
													"let Lat = pm.variables.replaceIn('{{$randomLatitude}}')\r",
													"pm.collectionVariables.set(\"latitude\", Lat)\r",
													"let Long = pm.variables.replaceIn('{{$randomLongitude}}')\r",
													"pm.collectionVariables.set(\"longitude\", Long)\r",
													"let addres = pm.variables.replaceIn('{{$randomCity}}')\r",
													"pm.collectionVariables.set(\"address\", addres)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"cashBack\": 5,\r\n  \"latitude\": {{latitude}},\r\n  \"longitude\": {{longitude}},\r\n  \"merchantId\": \"test\",\r\n  \"name\": \"{{branchName}}\",\r\n  \"address\": \"{{address}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/branch",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"branch"
											]
										}
									},
									"response": []
								},
								{
									"name": "015 - add branch incorrect format longitude",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"test can't be parsed to Double.\", () => {\r",
													"\tpm.expect(jsonData.message).to.contain(\"test can't be parsed to Double.\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"016 - add branch incorrect format latitude\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let bname = pm.variables.replaceIn('{{$randomWord}}')\r",
													"pm.collectionVariables.set(\"branchName\", bname)\r",
													"let digit = pm.variables.replaceIn('{{$randomdigit}}')\r",
													"pm.collectionVariables.set(\"branchName\", bname)\r",
													"let Lat = pm.variables.replaceIn('{{$randomLatitude}}')\r",
													"pm.collectionVariables.set(\"latitude\", Lat)\r",
													"let Long = pm.variables.replaceIn('{{$randomLongitude}}')\r",
													"pm.collectionVariables.set(\"longitude\", Long)\r",
													"let addres = pm.variables.replaceIn('{{$randomCity}}')\r",
													"pm.collectionVariables.set(\"address\", addres)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"cashBack\": 5,\r\n  \"latitude\": {{latitude}},\r\n  \"longitude\": \"test\",\r\n  \"merchantId\": 5,\r\n  \"name\": \"{{branchName}}\",\r\n  \"address\": \"{{address}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/branch",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"branch"
											]
										}
									},
									"response": []
								},
								{
									"name": "016 - add branch incorrect format latitude",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"test can't be parsed to Double.\", () => {\r",
													"\tpm.expect(jsonData.message).to.contain(\"test can't be parsed to Double.\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"017 - add branch incorrect format cashback\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let bname = pm.variables.replaceIn('{{$randomWord}}')\r",
													"pm.collectionVariables.set(\"branchName\", bname)\r",
													"let digit = pm.variables.replaceIn('{{$randomdigit}}')\r",
													"pm.collectionVariables.set(\"branchName\", bname)\r",
													"let Lat = pm.variables.replaceIn('{{$randomLatitude}}')\r",
													"pm.collectionVariables.set(\"latitude\", Lat)\r",
													"let Long = pm.variables.replaceIn('{{$randomLongitude}}')\r",
													"pm.collectionVariables.set(\"longitude\", Long)\r",
													"let addres = pm.variables.replaceIn('{{$randomCity}}')\r",
													"pm.collectionVariables.set(\"address\", addres)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"cashBack\": 5,\r\n  \"latitude\": \"test\",\r\n  \"longitude\": {{longitude}},\r\n  \"merchantId\": 5,\r\n  \"name\": \"{{branchName}}\",\r\n  \"address\": \"{{address}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/branch",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"branch"
											]
										}
									},
									"response": []
								},
								{
									"name": "017 - add branch incorrect format cashback",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"test can't be parsed to Double.\", () => {\r",
													"\tpm.expect(jsonData.message).to.contain(\"test can't be parsed to Double.\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"019 - update branch max  adress\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let bname = pm.variables.replaceIn('{{$randomWord}}')\r",
													"pm.collectionVariables.set(\"branchName\", bname)\r",
													"let digit = pm.variables.replaceIn('{{$randomdigit}}')\r",
													"pm.collectionVariables.set(\"branchName\", bname)\r",
													"let Lat = pm.variables.replaceIn('{{$randomLatitude}}')\r",
													"pm.collectionVariables.set(\"latitude\", Lat)\r",
													"let Long = pm.variables.replaceIn('{{$randomLongitude}}')\r",
													"pm.collectionVariables.set(\"longitude\", Long)\r",
													"let addres = pm.variables.replaceIn('{{$randomCity}}')\r",
													"pm.collectionVariables.set(\"address\", addres)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"cashBack\": \"test\",\r\n  \"latitude\": {{latitude}},\r\n  \"longitude\": {{longitude}},\r\n  \"merchantId\": 5,\r\n  \"name\": \"{{branchName}}\",\r\n  \"address\": \"{{address}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/branch",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"branch"
											]
										}
									},
									"response": []
								},
								{
									"name": "019 - update branch max  adress",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"test can't be parsed to Double.\", () => {\r",
													"\tpm.expect(jsonData.message).to.contain(\"JSON parse error: Unrecognized token\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"022 - update branch wrong data\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"address\": {{refresh_token}},\r\n  \"cashBack\": 0,\r\n  \"name\": \"string\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/branch/11",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"branch",
												"11"
											]
										}
									},
									"response": []
								},
								{
									"name": "020 - update branch max  b-Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Failed to convert value of type\", () => {\r",
													"\tpm.expect(jsonData.message).to.contain(\"Failed to convert value of type\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"021 - update branch space b-ID\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"address\": \"string\",\r\n  \"cashBack\": 0,\r\n  \"name\": \"string\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/branch/{{maxNumber}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"branch",
												"{{maxNumber}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "022 - update branch wrong data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"\tpm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"404 NOT_FOUND \\\"Branch with given id not found\\\"\", () => {\r",
													"\tpm.expect(jsonData.message).to.contain(\"404 NOT_FOUND \\\"Branch with given id not found\\\"\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"023 - update branch incorrect data\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"address\": \"string\",\r\n  \"cashBack\": 0,\r\n  \"name\": \"string\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/branch/-1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"branch",
												"-1"
											]
										}
									},
									"response": []
								},
								{
									"name": "023 - update branch incorrect data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"025 - delete branch max parameter\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"address\": \"string\",\r\n  \"cashBack\": 0,\r\n  \"name\": \"string\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/branch/test",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"branch",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "025 - delete branch max parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"026 - delete branch incorrect  parameter\")\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/branch/{{maxNumber}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"branch",
												"{{maxNumber}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "026 - delete branch incorrect  parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"027 - delete branch wrong  parameter\")\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/branch/test",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"branch",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "027 - delete branch wrong  parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"\tpm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"404 NOT_FOUND \\\"Branch with given id not found\\\"\", () => {\r",
													"\tpm.expect(jsonData.message).to.contain(\"404 NOT_FOUND \\\"Branch with given id not found\\\"\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - add Category\")\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/branch/-1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"branch",
												"-1"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "001 - add Category",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let Ncategory = pm.variables.replaceIn('{{$randomDepartment}}')\r",
											"pm.collectionVariables.set(\"categoryName\", Ncategory)\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"\tpm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"let ucategoryid = jsonData.id\r",
											"pm.collectionVariables.set(\"categoryid\", ucategoryid)\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - get category\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/merchant/category?name={{categoryName}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"merchant",
										"category"
									],
									"query": [
										{
											"key": "name",
											"value": "{{categoryName}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "002 - get category",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json()[0];\r",
											"\r",
											"pm.test(\"Status code is 206\", function () {\r",
											"\tpm.response.to.have.status(206);\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"\t\"type\": \"array\",\r",
											"\t\"properties\": {\r",
											"\t\t\"databaseId\":{\r",
											"\t\t\t\"type\": \"number\"\r",
											"\t\t},\r",
											"\t\t\"name\":{\r",
											"\t\t\t\"type\": \"string\"\r",
											"\t\t}\r",
											"    }\r",
											"}\r",
											"\r",
											"c_dataid = pm.collectionVariables.get(\"categoryid\")\r",
											"c_cname = pm.collectionVariables.get(\"categoryName\")\r",
											"\r",
											"let dataid = jsonData.databaseId\r",
											"let cname = jsonData.name\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - add Merchant\")\r",
											"\r",
											"pm.test(\"Test  dataid\", function () {\r",
											"\tpm.expect(dataid).to.equal(dataid);\r",
											"});\r",
											"\r",
											"pm.test(\"Test  cname\", function () {\r",
											"\tpm.expect(cname).to.contain(c_cname)\r",
											"});\r",
											"\r",
											"pm.test(\"Validating schema\", () => {\r",
											"\tpm.response.to.have.jsonSchema(schema)\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/merchant/category/?limit=1&term={{categoryName}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"merchant",
										"category",
										""
									],
									"query": [
										{
											"key": "limit",
											"value": "1"
										},
										{
											"key": "term",
											"value": "{{categoryName}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "003 - add Merchant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let Mname = pm.variables.replaceIn('{{$randomWord}}')\r",
											"pm.collectionVariables.set(\"merchantName\", Mname)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"\tpm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"let merchantDataId = jsonData.databaseId\r",
											"pm.collectionVariables.set(\"merchantDataId\", merchantDataId)\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"005 - get Merchant\")\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"categoryId\": \"{{categoryid}}\",\r\n  \"name\": \"{{merchantName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/merchant",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"merchant"
									]
								}
							},
							"response": []
						},
						{
							"name": "005 - get Merchant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\tpm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"\t\"type\": \"object\",\r",
											"\t\"properties\": {\r",
											"\t\t\"databaseId\":{\r",
											"\t\t\t\"type\": \"number\"\r",
											"\t\t},\r",
											"\t\t\"name\":{\r",
											"\t\t\t\"type\": \"string\"\r",
											"\t\t},\r",
											"\t\t\"rating\":{\r",
											"\t\t\t\"type\": \"null\"\r",
											"\t\t},\r",
											"\t\t\"category\":{\r",
											"\t\t\t\"type\": \"string\"\r",
											"\t\t},\r",
											"\t\t\"branchDTOSet\":{\r",
											"\t\t\t\"type\": \"array\"\r",
											"\t\t}\r",
											"    }\r",
											"}\r",
											"\r",
											"c_mdataid = pm.collectionVariables.get(\"merchantDataId\")\r",
											"c_mname = pm.collectionVariables.get(\"merchantName\")\r",
											"c_cname = pm.collectionVariables.get(\"categoryName\")\r",
											"c_cashback = pm.collectionVariables.get(\"cashback\")\r",
											"\r",
											"let cashBack = jsonData.cashBack\r",
											"let mdataid = jsonData.databaseId\r",
											"let mname = jsonData.name\r",
											"let cname = jsonData.category\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"006 - update merchant\")\r",
											"\r",
											"pm.test(\"Test  dataid\", function () {\r",
											"\tpm.expect(mdataid).to.equal(c_mdataid);\r",
											"});\r",
											"\r",
											"pm.test(\"Test  cname\", function () {\r",
											"\tpm.expect(mname).to.contain(c_mname)\r",
											"});\r",
											"\r",
											"pm.test(\"Test  cname\", function () {\r",
											"\tpm.expect(cname).to.contain(c_cname)\r",
											"});\r",
											"\r",
											"pm.test(\"Test  cashBack\", function () {\r",
											"\tpm.expect(cashBack).to.equal(cashBack)\r",
											"});\r",
											"\r",
											"pm.test(\"Validating schema\", () => {\r",
											"\tpm.response.to.have.jsonSchema(schema)\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/merchant/{{merchantDataId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"merchant",
										"{{merchantDataId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "006 - update merchant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 205\", function () {\r",
											"\tpm.response.to.have.status(205);\r",
											"});\r",
											"\r",
											"let mName = pm.collectionVariables.get(\"merchantName\")\r",
											"\r",
											"pm.collectionVariables.set(\"updatedMerchantName\", \"updated\"+ mName)\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"007 - get updated Merchant\")\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let cashback = pm.variables.replaceIn('{{$randomInt}}')\r",
											"pm.collectionVariables.set(\"cashback\", cashback)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"cashBack\": {{cashback}},\r\n  \"categoryId\": {{categoryid}},\r\n  \"name\": \"updated{{merchantName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/merchant/{{merchantDataId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"merchant",
										"{{merchantDataId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "007 - get updated Merchant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\tpm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"\t\"type\": \"object\",\r",
											"\t\"properties\": {\r",
											"\t\t\"databaseId\":{\r",
											"\t\t\t\"type\": \"number\"\r",
											"\t\t},\r",
											"\t\t\"name\":{\r",
											"\t\t\t\"type\": \"string\"\r",
											"\t\t},\r",
											"\t\t\"rating\":{\r",
											"\t\t\t\"type\": \"null\"\r",
											"\t\t},\r",
											"\t\t\"category\":{\r",
											"\t\t\t\"type\": \"string\"\r",
											"\t\t},\r",
											"\t\t\"branchDTOSet\":{\r",
											"\t\t\t\"type\": \"array\"\r",
											"\t\t}\r",
											"    }\r",
											"}\r",
											"\r",
											"c_mdataid = pm.collectionVariables.get(\"merchantDataId\")\r",
											"c_mname = pm.collectionVariables.get(\"updatedMerchantName\")\r",
											"c_cname = pm.collectionVariables.get(\"categoryName\")\r",
											"\r",
											"let mdataid = jsonData.databaseId\r",
											"let mname = jsonData.name\r",
											"let cname = jsonData.category\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"008 - add branch\")\r",
											"\r",
											"pm.test(\"Test  dataid\", function () {\r",
											"\tpm.expect(mdataid).to.equal(c_mdataid);\r",
											"});\r",
											"\r",
											"pm.test(\"Test  mname\", function () {\r",
											"\tpm.expect(mname).to.contain(c_mname)\r",
											"});\r",
											"\r",
											"pm.test(\"Test  cname\", function () {\r",
											"\tpm.expect(cname).to.contain(c_cname)\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validating schema\", () => {\r",
											"\tpm.response.to.have.jsonSchema(schema)\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/merchant/{{merchantDataId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"merchant",
										"{{merchantDataId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "008 - add branch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let bname = pm.variables.replaceIn('{{$randomWord}}')\r",
											"pm.collectionVariables.set(\"branchName\", bname)\r",
											"let digit = pm.variables.replaceIn('{{$randomdigit}}')\r",
											"pm.collectionVariables.set(\"branchName\", bname)\r",
											"let Lat = pm.variables.replaceIn('{{$randomLatitude}}')\r",
											"pm.collectionVariables.set(\"latitude\", Lat)\r",
											"let Long = pm.variables.replaceIn('{{$randomLongitude}}')\r",
											"pm.collectionVariables.set(\"longitude\", Long)\r",
											"let addres = pm.variables.replaceIn('{{$randomCity}}')\r",
											"pm.collectionVariables.set(\"address\", addres)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"\tpm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"let branchId = jsonData.databaseId\r",
											"\r",
											"pm.collectionVariables.set(\"branchDataId\", branchId)\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"009 - get branch\")\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"cashBack\": {{cashback}},\r\n  \"latitude\": {{latitude}},\r\n  \"longitude\": {{longitude}},\r\n  \"merchantId\": {{merchantDataId}},\r\n  \"name\": \"{{branchName}}\",\r\n  \"address\": \"{{address}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/branch",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"branch"
									]
								}
							},
							"response": []
						},
						{
							"name": "009 - get branch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\tpm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"\t\"type\": \"object\",\r",
											"\t\"properties\": {\r",
											"\t\t\"databaseId\":{\r",
											"\t\t\t\"type\": \"number\"\r",
											"\t\t},\r",
											"\t\t\"merchantId\":{\r",
											"\t\t\t\"type\": \"number\"\r",
											"\t\t},\r",
											"\t\t\"name\":{\r",
											"\t\t\t\"type\": \"string\"\r",
											"\t\t},\r",
											"\t\t\"cashBack\":{\r",
											"\t\t\t\"type\": \"number\"\r",
											"\t\t},\r",
											"\t\t\"rating\":{\r",
											"\t\t\t\"type\": \"null\"\r",
											"\t\t}\r",
											"    }\r",
											"}\r",
											"\r",
											"c_branchDataId = pm.collectionVariables.get(\"branchDataId\").toNumber()\r",
											"c_merchantDataId = pm.collectionVariables.get(\"merchantDataId\")\r",
											"c_branchName = pm.collectionVariables.get(\"branchName\")\r",
											"c_cashback = pm.collectionVariables.get(\"cashback\").toNumber()\r",
											"c_address = pm.collectionVariables.get(\"address\")\r",
											"\r",
											"let databaseId = jsonData.databaseId\r",
											"let merchantId = jsonData.merchantId\r",
											"let name = jsonData.name\r",
											"let cashBack = jsonData.cashBack\r",
											"let address = jsonData.address\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"010 - update Merchant Cashback\")\r",
											"\r",
											"pm.test(\"Test  databaseId\", function () {\r",
											"\tpm.expect(databaseId).to.equal(c_branchDataId);\r",
											"});\r",
											"\r",
											"pm.test(\"Test  merchantId\", function () {\r",
											"\tpm.expect(merchantId).to.equal(c_merchantDataId)\r",
											"});\r",
											"\r",
											"pm.test(\"Test  name\", function () {\r",
											"\tpm.expect(name).to.contain(c_branchName)\r",
											"});\r",
											"\r",
											"pm.test(\"Test  address\", function () {\r",
											"\tpm.expect(address).to.contain(c_address )\r",
											"});\r",
											"\r",
											"pm.test(\"Test  cashBack\", function () {\r",
											"\tpm.expect(cashBack).to.equal(c_cashback)\r",
											"});\r",
											"\r",
											"pm.test(\"Validating schema\", () => {\r",
											"\tpm.response.to.have.jsonSchema(schema)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/branch/{{branchDataId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"branch",
										"{{branchDataId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "010 - update Merchant Cashback",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let cashBack = pm.collectionVariables.get(\"cashback\").toNumber()\r",
											"\r",
											"let uCashBack = cashBack + 5.1;\r",
											"\r",
											"pm.collectionVariables.set(\"updatedCashBack\",uCashBack)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 205\", function () {\r",
											"\tpm.response.to.have.status(205);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"011 - get updated Merchant cashback\")\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/branch/update-cashbacks?cashBack={{updatedCashBack}}&merchantId={{merchantDataId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"branch",
										"update-cashbacks"
									],
									"query": [
										{
											"key": "cashBack",
											"value": "{{updatedCashBack}}"
										},
										{
											"key": "merchantId",
											"value": "{{merchantDataId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "011 - get updated Merchant cashback",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\tpm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"\t\"type\": \"object\",\r",
											"\t\"properties\": {\r",
											"\t\t\"databaseId\":{\r",
											"\t\t\t\"type\": \"number\"\r",
											"\t\t},\r",
											"\t\t\"name\":{\r",
											"\t\t\t\"type\": \"string\"\r",
											"\t\t},\r",
											"\t\t\"rating\":{\r",
											"\t\t\t\"type\": \"null\"\r",
											"\t\t},\r",
											"\t\t\"category\":{\r",
											"\t\t\t\"type\": \"string\"\r",
											"\t\t},\r",
											"\t\t\"branchDTOSet\":{\r",
											"\t\t\t\"type\": \"array\"\r",
											"\t\t}\r",
											"    }\r",
											"}\r",
											"\r",
											"c_mdataid = pm.collectionVariables.get(\"merchantDataId\")\r",
											"c_mname = pm.collectionVariables.get(\"updatedMerchantName\")\r",
											"c_cname = pm.collectionVariables.get(\"categoryName\")\r",
											"c_cashback = pm.collectionVariables.get(\"updatedCashBack\").toNumber()\r",
											"\r",
											"let cashBack = jsonData.branchDTOSet[0].cashBack\r",
											"let mdataid = jsonData.databaseId\r",
											"let mname = jsonData.name\r",
											"let cname = jsonData.category\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"012 - update branch\")\r",
											"\r",
											"pm.test(\"Test  dataid\", function () {\r",
											"\tpm.expect(mdataid).to.equal(c_mdataid);\r",
											"});\r",
											"\r",
											"pm.test(\"Test  mname\", function () {\r",
											"\tpm.expect(mname).to.contain(c_mname)\r",
											"});\r",
											"\r",
											"pm.test(\"Test  cname\", function () {\r",
											"\tpm.expect(cname).to.contain(c_cname)\r",
											"});\r",
											"\r",
											"pm.test(\"Test  cashBack\", function () {\r",
											"\tpm.expect(cashBack).to.equal(c_cashback)\r",
											"});\r",
											"\r",
											"pm.test(\"Validating schema\", () => {\r",
											"\tpm.response.to.have.jsonSchema(schema)\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/merchant/{{merchantDataId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"merchant",
										"{{merchantDataId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "012 - update branch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 205\", function () {\r",
											"\tpm.response.to.have.status(205);\r",
											"});\r",
											"\r",
											"let bName = pm.collectionVariables.get(\"branchName\")\r",
											"\r",
											"pm.collectionVariables.set(\"updatedMerchantName\", \"updated\" + bName)\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"013 - put branch rate-comment\")\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"cashBack\": {{updatedCashBack}},\r\n  \"name\": \"updated{{branchName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/branch/{{branchDataId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"branch",
										"{{branchDataId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "013 - put branch rate-comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 205\", function () {\r",
											"\tpm.response.to.have.status(205);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"014 - get updated branch\")\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"comment\": \"commentBranchTest\",\r\n  \"rating\": 5\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/branch/{{branchDataId}}/rate",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"branch",
										"{{branchDataId}}",
										"rate"
									]
								}
							},
							"response": []
						},
						{
							"name": "014 - get updated branch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\tpm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"\t\"type\": \"object\",\r",
											"\t\"properties\": {\r",
											"\t\t\"databaseId\":{\r",
											"\t\t\t\"type\": \"number\"\r",
											"\t\t},\r",
											"\t\t\"merchantId\":{\r",
											"\t\t\t\"type\": \"number\"\r",
											"\t\t},\r",
											"\t\t\"name\":{\r",
											"\t\t\t\"type\": \"string\"\r",
											"\t\t},\r",
											"\t\t\"cashBack\":{\r",
											"\t\t\t\"type\": \"number\"\r",
											"\t\t},\r",
											"\t\t\"rating\":{\r",
											"\t\t\t\"type\": \"number\"\r",
											"\t\t}\r",
											"    }\r",
											"}\r",
											"\r",
											"c_branchDataId = pm.collectionVariables.get(\"branchDataId\").toNumber()\r",
											"c_merchantDataId = pm.collectionVariables.get(\"merchantDataId\")\r",
											"c_branchName = pm.collectionVariables.get(\"branchName\")\r",
											"c_cashback = pm.collectionVariables.get(\"updatedCashBack\").toNumber()\r",
											"c_address = pm.collectionVariables.get(\"address\")\r",
											"\r",
											"let databaseId = jsonData.databaseId\r",
											"let merchantId = jsonData.merchantId\r",
											"let name = jsonData.name\r",
											"let cashBack = jsonData.cashBack\r",
											"let address = jsonData.address\r",
											"let rating = jsonData.rating\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"015 - find-closest branch\")\r",
											"\r",
											"pm.test(\"Test  databaseId\", function () {\r",
											"\tpm.expect(databaseId).to.equal(c_branchDataId);\r",
											"});\r",
											"\r",
											"pm.test(\"Test  merchantId\", function () {\r",
											"\tpm.expect(merchantId).to.equal(c_merchantDataId)\r",
											"});\r",
											"\r",
											"pm.test(\"Test  name\", function () {\r",
											"\tpm.expect(name).to.contain(c_branchName)\r",
											"});\r",
											"\r",
											"pm.test(\"Test  address\", function () {\r",
											"\tpm.expect(address).to.contain(c_address )\r",
											"});\r",
											"\r",
											"pm.test(\"Test  cashBack\", function () {\r",
											"\tpm.expect(cashBack).to.equal(c_cashback)\r",
											"});\r",
											"\r",
											"pm.test(\"Test  rating\", function () {\r",
											"\tpm.expect(rating).to.equal(5)\r",
											"});\r",
											"\r",
											"pm.test(\"Validating schema\", () => {\r",
											"\tpm.response.to.have.jsonSchema(schema)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/branch/{{branchDataId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"branch",
										"{{branchDataId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "015 - find-closest branch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 206\", function () {\r",
											"\tpm.response.to.have.status(206);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"016 - fget-category-branches-by-rating\")\r",
											"\r",
											"c_branchDataId = pm.collectionVariables.get(\"branchDataId\").toNumber()\r",
											"c_merchantDataId = pm.collectionVariables.get(\"merchantDataId\").toNumber()\r",
											"\r",
											"let databaseId = jsonData.content[0].databaseId\r",
											"let merchantId = jsonData.content[0].merchantId\r",
											"\r",
											"pm.test(\"Test  databaseId\", function () {\r",
											"\tpm.expect(databaseId).to.equal(c_branchDataId)\r",
											"});\r",
											"\r",
											"pm.test(\"Test  databaseId\", function () {\r",
											"\tpm.expect(merchantId).to.equal(c_merchantDataId )\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"location\": {\r\n    \"latitude\": {{latitude}},\r\n    \"longitude\": {{longitude}}\r\n  },\r\n  \"pageIdx\": 0,\r\n  \"pageSize\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/branch/find-closest",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"branch",
										"find-closest"
									]
								}
							},
							"response": []
						},
						{
							"name": "016 - fget-category-branches-by-rating",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\tpm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"017 - find-in-radius\")\r",
											"\r",
											"c_catId = pm.collectionVariables.get(\"categoryid\").toNumber()\r",
											"c_merchantDataId = pm.collectionVariables.get(\"merchantDataId\")\r",
											"c_branchid = pm.collectionVariables.get(\"branchDataId\")\r",
											"\r",
											"let categoryId = jsonData.content[0].categoryId\r",
											"let merchantId = jsonData.content[0].merchantId\r",
											"let id = jsonData.content[0].id\r",
											"\r",
											"pm.test(\"Test  id\", function () {\r",
											"\tpm.expect(id).to.equal(c_branchid)\r",
											"});\r",
											"\r",
											"pm.test(\"Test  categoryId\", function () {\r",
											"\tpm.expect(categoryId).to.equal(c_catId)\r",
											"});\r",
											"\r",
											"pm.test(\"Test  merchantId\", function () {\r",
											"\tpm.expect(merchantId).to.equal(c_merchantDataId)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"categoryId\": {{categoryid}},\r\n  \"pageIdx\": 0,\r\n  \"pageSize\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/branch/get-category-branches-by-rating",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"branch",
										"get-category-branches-by-rating"
									]
								}
							},
							"response": []
						},
						{
							"name": "017 - find-in-radius",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 206\", function () {\r",
											"\tpm.response.to.have.status(206);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"017 - get merchant-branches\")\r",
											"\r",
											"c_merchantDataId = pm.collectionVariables.get(\"merchantDataId\")\r",
											"c_branchid = pm.collectionVariables.get(\"branchDataId\")\r",
											"\r",
											"let merchantId = jsonData.content[0].merchantId\r",
											"let id = jsonData.content[0].databaseId\r",
											"\r",
											"pm.test(\"Test  id\", function () {\r",
											"\tpm.expect(id).to.equal(c_branchid)\r",
											"});\r",
											"\r",
											"pm.test(\"Test  merchantId\", function () {\r",
											"\tpm.expect(merchantId).to.equal(c_merchantDataId)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"distance\": 1,\r\n  \"location\": {\r\n    \"latitude\": {{latitude}},\r\n    \"longitude\": {{longitude}}\r\n  },\r\n  \"pageIdx\": 0,\r\n  \"pageSize\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/branch/find-in-radius",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"branch",
										"find-in-radius"
									]
								}
							},
							"response": []
						},
						{
							"name": "017 - get merchant-branches",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json()[0];\r",
											"\r",
											"pm.test(\"Status code is 206\", function () {\r",
											"\tpm.response.to.have.status(206);\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"\t\"type\": \"array\",\r",
											"\t\"properties\": {\r",
											"\t\t\"databaseId\":{\r",
											"\t\t\t\"type\": \"number\"\r",
											"\t\t},\r",
											"\t\t\"merchantId\":{\r",
											"\t\t\t\"type\": \"number\"\r",
											"\t\t},\r",
											"\t\t\"name\":{\r",
											"\t\t\t\"type\": \"string\"\r",
											"\t\t},\r",
											"\t\t\"cashBack\":{\r",
											"\t\t\t\"type\": \"number\"\r",
											"\t\t},\r",
											"\t\t\"rating\":{\r",
											"\t\t\t\"type\": \"number\"\r",
											"\t\t}\r",
											"    }\r",
											"}\r",
											"\r",
											"c_branchDataId = pm.collectionVariables.get(\"branchDataId\").toNumber()\r",
											"c_merchantDataId = pm.collectionVariables.get(\"merchantDataId\")\r",
											"c_branchName = pm.collectionVariables.get(\"branchName\")\r",
											"c_cashback = pm.collectionVariables.get(\"updatedCashBack\").toNumber()\r",
											"c_address = pm.collectionVariables.get(\"address\")\r",
											"\r",
											"let databaseId = jsonData.databaseId\r",
											"let merchantId = jsonData.merchantId\r",
											"let name = jsonData.name\r",
											"let cashBack = jsonData.cashBack\r",
											"let address = jsonData.address\r",
											"let rating = jsonData.rating\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"018 - delete branch\")\r",
											"\r",
											"pm.test(\"Test  databaseId\", function () {\r",
											"\tpm.expect(databaseId).to.equal(c_branchDataId);\r",
											"});\r",
											"\r",
											"pm.test(\"Test  merchantId\", function () {\r",
											"\tpm.expect(merchantId).to.equal(c_merchantDataId)\r",
											"});\r",
											"\r",
											"pm.test(\"Test  name\", function () {\r",
											"\tpm.expect(name).to.contain(c_branchName)\r",
											"});\r",
											"\r",
											"pm.test(\"Test  address\", function () {\r",
											"\tpm.expect(address).to.contain(c_address )\r",
											"});\r",
											"\r",
											"pm.test(\"Test  cashBack\", function () {\r",
											"\tpm.expect(cashBack).to.equal(c_cashback)\r",
											"});\r",
											"\r",
											"pm.test(\"Test  rating\", function () {\r",
											"\tpm.expect(rating).to.equal(5)\r",
											"});\r",
											"\r",
											"pm.test(\"Validating schema\", () => {\r",
											"\tpm.response.to.have.jsonSchema(schema)\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"branchIds\": [\r\n    {{branchDataId}}\r\n  ],\r\n  \"merchantId\": {{merchantDataId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/branch/merchant-branches",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"branch",
										"merchant-branches"
									]
								}
							},
							"response": []
						},
						{
							"name": "018 - delete branch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"\tpm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"019 - delete merchant id\")\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/branch/{{branchDataId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"branch",
										"{{branchDataId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "019 - delete merchant id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"\tpm.response.to.have.status(204);\r",
											"});\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"020 - get deleted merchant id\")\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/merchant/{{merchantDataId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"merchant",
										"{{merchantDataId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "020 - get deleted merchant id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"\tpm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"404 NOT_FOUND\", () => {\r",
											"\tpm.expect(jsonData.message).to.contain(\"404 NOT_FOUND \\\"merchant with given id not found\\\"\");\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"021 - get deleted branch\")\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/merchant/{{merchantDataId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"merchant",
										"{{merchantDataId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "021 - get deleted branch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"\tpm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"404 NOT_FOUND\", () => {\r",
											"\tpm.expect(jsonData.message).to.contain(\"404 NOT_FOUND \\\"Branch Location with given id not found\\\"\");\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - get new user settings\")\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/branch/{{branchDataId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"branch",
										"{{branchDataId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "005 - profile-settings",
					"item": [
						{
							"name": "005 - 001 - notification settings negative",
							"item": [
								{
									"name": "001 - get new user settings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"\tpm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Test user receivePayments\", function () {\r",
													"\tpm.expect(jsonData.notification.receivePayments).to.be.false;\r",
													"});\r",
													"pm.test(\"Test user receivePaymentRequest\", function () {\r",
													"\tpm.expect(jsonData.notification.receivePaymentRequest).to.be.false;\r",
													"});\r",
													"pm.test(\"Test user promotions\", function () {\r",
													"\tpm.expect(jsonData.notification.promotions).to.be.false;\r",
													"});\r",
													"pm.test(\"Test user emailNotification\", function () {\r",
													"\tpm.expect(jsonData.notification.emailNotification).to.be.false;\r",
													"});\r",
													"pm.test(\"Test user useSecondBalance\", function () {\r",
													"\tpm.expect(jsonData.payment.useSecondBalance).to.be.false;\r",
													"});\r",
													"pm.test(\"Test user incognito_mode\", function () {\r",
													"\tpm.expect(jsonData.payment.incognito_mode).to.be.false;\r",
													"});\r",
													"pm.test(\"Test user locationServices\", function () {\r",
													"\tpm.expect(jsonData.privacy.locationServices).to.be.false;\r",
													"});\r",
													"pm.test(\"Test user contacts\", function () {\r",
													"\tpm.expect(jsonData.privacy.contacts).to.be.false;\r",
													"});\r",
													"pm.test(\"Test user photos\", function () {\r",
													"\tpm.expect(jsonData.privacy.photos).to.be.false;\r",
													"});\r",
													"pm.test(\"Test user hideMobile\", function () {\r",
													"\tpm.expect(jsonData.privacy.hideMobile).to.be.false;\r",
													"});\r",
													"pm.test(\"Test user hideTransactionAmount\", function () {\r",
													"\tpm.expect(jsonData.privacy.hideTransactionAmount).to.be.false;\r",
													"});\r",
													"pm.test(\"Test user defaultFeedPrivacy\", function () {\r",
													"\tpm.expect(jsonData.privacy.defaultFeedPrivacy).to.contain(\"PRIVATE\");\r",
													"});\r",
													"pm.test(\"Test user loginWithTouchID\", function () {\r",
													"\tpm.expect(jsonData.security.loginWithTouchID).to.be.false;\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - notification settings update emptyParameters\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "002 - notification settings update emptyParameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Test user receivePayments\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"Wrong emailNotification. Must not be null\");\r",
													"});\r",
													"pm.test(\"Test user receivePayments\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"Wrong receivePaymentRequest. Must not be null\");\r",
													"});\r",
													"pm.test(\"Test user receivePayments\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"Wrong receivePayments. Must not be null\");\r",
													"});\r",
													"pm.test(\"Test user receivePayments\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"Wrong promotions. Must not be null\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - notification settings update emptyParameter emailNotification\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"emailNotification\": \"\",\r\n  \"promotions\": \"\",\r\n  \"receivePaymentRequest\": \"\",\r\n  \"receivePayments\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/notification",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"notification"
											]
										}
									},
									"response": []
								},
								{
									"name": "003 - notification settings update emptyParameter emailNotification",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Test user emailNotification\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"Wrong emailNotification. Must not be null\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - notification settings update emptyParameter promotions\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"emailNotification\": \"\",\r\n  \"promotions\": false,\r\n  \"receivePaymentRequest\": false,\r\n  \"receivePayments\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/notification",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"notification"
											]
										}
									},
									"response": []
								},
								{
									"name": "004 - notification settings update emptyParameter promotions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Test user promotions\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"Wrong promotions. Must not be null\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - notification settings update emptyParameter promotions Copy\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"emailNotification\": false,\r\n  \"promotions\": \"\",\r\n  \"receivePaymentRequest\": false,\r\n  \"receivePayments\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/notification",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"notification"
											]
										}
									},
									"response": []
								},
								{
									"name": "004 - notification settings update emptyParameter promotions Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Test user receivePaymentRequest\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"Wrong receivePaymentRequest. Must not be null\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - notification settings update emptyParameter promotions Copy 2\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"emailNotification\": false,\r\n  \"promotions\": false,\r\n  \"receivePaymentRequest\": \"\",\r\n  \"receivePayments\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/notification",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"notification"
											]
										}
									},
									"response": []
								},
								{
									"name": "004 - notification settings update emptyParameter promotions Copy 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Test user receivePayments\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"Wrong receivePayments. Must not be null\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"005 - notification settings update incorrectParameters\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"emailNotification\": false,\r\n  \"promotions\": false,\r\n  \"receivePaymentRequest\": false,\r\n  \"receivePayments\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/notification",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"notification"
											]
										}
									},
									"response": []
								},
								{
									"name": "005 - notification settings update incorrectParameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Test can't be parsed to Boolean\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"t can't be parsed to Boolean\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"006 - notification settings update incorrectParameter emailNotification\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"emailNotification\": \"t\",\r\n  \"promotions\": \"t\",\r\n  \"receivePaymentRequest\": \"t\",\r\n  \"receivePayments\": \"t\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/notification",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"notification"
											]
										}
									},
									"response": []
								},
								{
									"name": "006 - notification settings update incorrectParameter emailNotification",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Test can't be parsed to Boolean\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"t can't be parsed to Boolean\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - profile details Update empty parameters\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"emailNotification\": \"t\",\r\n  \"promotions\": false,\r\n  \"receivePaymentRequest\": false,\r\n  \"receivePayments\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/notification",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"notification"
											]
										}
									},
									"response": []
								},
								{
									"name": "007 - notification settings update incorrectParameter promotions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Test can't be parsed to Boolean\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"t can't be parsed to Boolean\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"007 - notification settings update incorrectParameter promotions\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"emailNotification\": false,\r\n  \"promotions\": \"t\",\r\n  \"receivePaymentRequest\": false,\r\n  \"receivePayments\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/notification",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"notification"
											]
										}
									},
									"response": []
								},
								{
									"name": "008 - notification settings update incorrectParameter receivePaymentRequest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Test can't be parsed to Boolean\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"t can't be parsed to Boolean\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"009 - notification settings update incorrectParameter receivePayments\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"emailNotification\": false,\r\n  \"promotions\": false,\r\n  \"receivePaymentRequest\": \"t\",\r\n  \"receivePayments\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/notification",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"notification"
											]
										}
									},
									"response": []
								},
								{
									"name": "009 - notification settings update incorrectParameter receivePayments",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Test can't be parsed to Boolean\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"t can't be parsed to Boolean\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"010 - notification settings update moreParameters\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"emailNotification\": false,\r\n  \"promotions\": false,\r\n  \"receivePaymentRequest\": false,\r\n  \"receivePayments\": \"t\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/notification",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"notification"
											]
										}
									},
									"response": []
								},
								{
									"name": "010 - notification settings update moreParameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Test BAD_REQUEST\", function () {\r",
													"\tpm.expect(jsonData.status).to.be.contain(\"BAD_REQUEST\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"011 - notification settings update moreParameter emailNotification\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"emailNotification\": \"{{access_token}}\",\r\n  \"promotions\": \"{{access_token}}\",\r\n  \"receivePaymentRequest\": \"{{access_token}}\",\r\n  \"receivePayments\": \"{{access_token}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/notification",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"notification"
											]
										}
									},
									"response": []
								},
								{
									"name": "011 - notification settings update moreParameter emailNotification",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Test user emailNotification\", function () {\r",
													"\tpm.expect(jsonData.status).to.be.contain(\"BAD_REQUEST\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"012 - notification settings update moreParameter promotions\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"emailNotification\": \"{{access_token}}\",\r\n  \"promotions\": false,\r\n  \"receivePaymentRequest\": false,\r\n  \"receivePayments\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/notification",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"notification"
											]
										}
									},
									"response": []
								},
								{
									"name": "012 - notification settings update moreParameter promotions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Test user promotions\", function () {\r",
													"\tpm.expect(jsonData.error).to.be.contain(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"013 - notification settings update moreParameter receivePaymentRequest\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"emailNotification\": false,\r\n  \"promotions\": {{access_token}},\r\n  \"receivePaymentRequest\": false,\r\n  \"receivePayments\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/notification",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"notification"
											]
										}
									},
									"response": []
								},
								{
									"name": "013 - notification settings update moreParameter receivePaymentRequest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Test user receivePaymentRequest\", function () {\r",
													"\tpm.expect(jsonData.status).to.be.contain(\"BAD_REQUEST\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"014 - notification settings update moreParameter receivePayments\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"emailNotification\": false,\r\n  \"promotions\": false,\r\n  \"receivePaymentRequest\": \"{{access_token}}\",\r\n  \"receivePayments\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/notification",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"notification"
											]
										}
									},
									"response": []
								},
								{
									"name": "014 - notification settings update moreParameter receivePayments",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Test user receivePayments\", function () {\r",
													"\tpm.expect(jsonData.status).to.be.contain(\"BAD_REQUEST\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - payment settings update emptyParameters\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"emailNotification\": false,\r\n  \"promotions\": false,\r\n  \"receivePaymentRequest\": false,\r\n  \"receivePayments\": \"{{access_token}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/notification",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"notification"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "005 - 002 - payment settings negative",
							"item": [
								{
									"name": "001 - payment settings update emptyParameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Test user useSecondBalance\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"Wrong useSecondBalance. Must not be null\");\r",
													"});\r",
													"pm.test(\"Test user incognito_mode\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"Wrong incognito_mode. Must not be null\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - notification settings update emptyParameters\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"incognito_mode\": \"\",\r\n  \"useSecondBalance\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/payment",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"payment"
											]
										}
									},
									"response": []
								},
								{
									"name": "002 - payment settings update emptyParameter incognito_mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Test user incognito_mode\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"Wrong incognito_mode. Must not be null\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - notification settings update emptyParameters\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"incognito_mode\": \"\",\r\n  \"useSecondBalance\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/payment",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"payment"
											]
										}
									},
									"response": []
								},
								{
									"name": "003 - payment settings update emptyParamete useSecondBalance",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Test user useSecondBalance\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"Wrong useSecondBalance. Must not be null\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - notification settings update emptyParameters\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"incognito_mode\": false,\r\n  \"useSecondBalance\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/payment",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"payment"
											]
										}
									},
									"response": []
								},
								{
									"name": "004 - payment settings update incorrectParameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Test user useSecondBalance\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"can't be parsed to Boolean\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - notification settings update emptyParameters\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"incognito_mode\": \"t\",\r\n  \"useSecondBalance\": \"t\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/payment",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"payment"
											]
										}
									},
									"response": []
								},
								{
									"name": "005 - payment settings update incorrectParameter incognito_mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Test user incognito_mode\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"can't be parsed to Boolean\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - notification settings update emptyParameters\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"incognito_mode\": \"t\",\r\n  \"useSecondBalance\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/payment",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"payment"
											]
										}
									},
									"response": []
								},
								{
									"name": "006 - payment settings update incorrectParameter useSecondBalance",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Test user useSecondBalance\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"can't be parsed to Boolean\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - notification settings update emptyParameters\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"incognito_mode\": false,\r\n  \"useSecondBalance\": \"t\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/payment",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"payment"
											]
										}
									},
									"response": []
								},
								{
									"name": "007 - payment settings update moreParameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Test user useSecondBalance\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"can't be parsed to Boolean\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - notification settings update emptyParameters\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"incognito_mode\": \"{{access_token}}\",\r\n  \"useSecondBalance\": \"{{access_token}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/payment",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"payment"
											]
										}
									},
									"response": []
								},
								{
									"name": "008 - payment settings update moreParameter incognito_mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Test user incognito_mode\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"can't be parsed to Boolean\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - notification settings update emptyParameters\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"incognito_mode\": \"{{access_token}}\",\r\n  \"useSecondBalance\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/payment",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"payment"
											]
										}
									},
									"response": []
								},
								{
									"name": "009 - payment settings update moreParameters useSecondBalance",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Test user useSecondBalance\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"can't be parsed to Boolean\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - notification settings update emptyParameters\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"incognito_mode\": false,\r\n  \"useSecondBalance\": \"{{access_token}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/payment",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"payment"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "005 - 003 - privacy settings negative",
							"item": [
								{
									"name": "001 - privacy settings update emptyParameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Test user hideTransactionAmount\", function () {\r",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong hideTransactionAmount. Must not be null\");\r",
													"});\r",
													"pm.test(\"Test user locationServices\", function () {\r",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong locationServices. Must not be null\");\r",
													"});\r",
													"pm.test(\"Test user defaultFeedPrivacy\", function () {\r",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong defaultFeedPrivacy. Must not be null\");\r",
													"});\r",
													"pm.test(\"Test user contacts\", function () {\r",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong contacts. Must not be null\");\r",
													"});\r",
													"pm.test(\"Test user photos\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"Wrong photos. Must not be null\");\r",
													"});\r",
													"pm.test(\"Test user hideMobile\", function () {\r",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong hideMobile. Must not be null\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - privacy settings update emptyParameter contacts\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"contacts\": \"\",\r\n  \r\n  \"hideMobile\": \"\",\r\n  \"hideTransactionAmount\": \"\",\r\n  \"locationServices\": \"\",\r\n  \"photos\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/privacy",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"privacy"
											]
										}
									},
									"response": []
								},
								{
									"name": "002 - privacy settings update emptyParameter contacts",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Test user contacts\", function () {\r",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong contacts. Must not be null\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - privacy settings update emptyParameter defaultFeedPrivacy\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"contacts\": \"\",\r\n  \"defaultFeedPrivacy\": \"PRIVATE\",\r\n  \"hideMobile\": false,\r\n  \"hideTransactionAmount\": false,\r\n  \"locationServices\": false,\r\n  \"photos\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/privacy",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"privacy"
											]
										}
									},
									"response": []
								},
								{
									"name": "003 - privacy settings update emptyParameter defaultFeedPrivacy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Test user defaultFeedPrivacy\", function () {\r",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong defaultFeedPrivacy. Must not be null\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - privacy settings update emptyParameter hideMobile\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"contacts\": \"false\",\r\n  \r\n  \"hideMobile\": false,\r\n  \"hideTransactionAmount\": false,\r\n  \"locationServices\": false,\r\n  \"photos\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/privacy",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"privacy"
											]
										}
									},
									"response": []
								},
								{
									"name": "004 - privacy settings update emptyParameter hideMobile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Test user hideMobile\", function () {\r",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong hideMobile. Must not be null\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"005 - privacy settings update emptyParameter hideTransactionAmount\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"contacts\": false,\r\n  \"defaultFeedPrivacy\": \"PRIVATE\",\r\n  \"hideMobile\": \"\",\r\n  \"hideTransactionAmount\": false,\r\n  \"locationServices\": false,\r\n  \"photos\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/privacy",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"privacy"
											]
										}
									},
									"response": []
								},
								{
									"name": "005 - privacy settings update emptyParameter hideTransactionAmount",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Test user hideTransactionAmount\", function () {\r",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong hideTransactionAmount. Must not be null\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"006 - privacy settings update emptyParameter locationServices\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"contacts\": false,\r\n  \"defaultFeedPrivacy\": \"PRIVATE\",\r\n  \"hideMobile\": false,\r\n  \"hideTransactionAmount\": \"\",\r\n  \"locationServices\": false,\r\n  \"photos\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/privacy",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"privacy"
											]
										}
									},
									"response": []
								},
								{
									"name": "006 - privacy settings update emptyParameter locationServices",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Test user locationServices\", function () {\r",
													"\tpm.expect(jsonData.message).to.contain(\"Wrong locationServices. Must not be null\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"007 - privacy settings update emptyParameter photos\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"contacts\": false,\r\n  \"defaultFeedPrivacy\": \"PRIVATE\",\r\n  \"hideMobile\": false,\r\n  \"hideTransactionAmount\": false,\r\n  \"locationServices\": \"\",\r\n  \"photos\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/privacy",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"privacy"
											]
										}
									},
									"response": []
								},
								{
									"name": "007 - privacy settings update emptyParameter photos",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Test user photos\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"Wrong photos. Must not be null\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"008 - privacy settings update incorrectParameters\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"contacts\": false,\r\n  \"defaultFeedPrivacy\": \"PRIVATE\",\r\n  \"hideMobile\": false,\r\n  \"hideTransactionAmount\": false,\r\n  \"locationServices\": false,\r\n  \"photos\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/privacy",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"privacy"
											]
										}
									},
									"response": []
								},
								{
									"name": "008 - privacy settings update incorrectParameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Test privacy\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"can't be parsed to Boolean\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"009 - privacy settings update incorrectParameter contacts\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"contacts\": \"t\",\r\n  \"defaultFeedPrivacy\": \"t\",\r\n  \"hideMobile\": \"t\",\r\n  \"hideTransactionAmount\": \"t\",\r\n  \"locationServices\": \"t\",\r\n  \"photos\": \"t\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/privacy",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"privacy"
											]
										}
									},
									"response": []
								},
								{
									"name": "009 - privacy settings update incorrectParameter contacts",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Test contacts\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"can't be parsed to Boolean\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"010 - privacy settings update incorrectParameter defaultFeedPrivacy\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"contacts\": \"t\",\r\n  \"defaultFeedPrivacy\": \"PRIVATE\",\r\n  \"hideMobile\": false,\r\n  \"hideTransactionAmount\": false,\r\n  \"locationServices\": false,\r\n  \"photos\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/privacy",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"privacy"
											]
										}
									},
									"response": []
								},
								{
									"name": "010 - privacy settings update incorrectParameter defaultFeedPrivacy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Test defaultFeedPrivacy\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"can't be parsed to MessagePrivacy.MessagePrivacy must be one of this: PUBLIC, FRIEND, PRIVATE, NOT_PUBLISH\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"011 - privacy settings update incorrectParameter hideMobile\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"contacts\": false,\r\n  \"defaultFeedPrivacy\": \"t\",\r\n  \"hideMobile\": false,\r\n  \"hideTransactionAmount\": false,\r\n  \"locationServices\": false,\r\n  \"photos\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/privacy",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"privacy"
											]
										}
									},
									"response": []
								},
								{
									"name": "011 - privacy settings update incorrectParameter hideMobile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Test hideMobile\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"can't be parsed to Boolean\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"012 - privacy settings update incorrectParameter hideTransactionAmount\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"contacts\": false,\r\n  \"defaultFeedPrivacy\": \"PRIVATE\",\r\n  \"hideMobile\": \"t\",\r\n  \"hideTransactionAmount\": false,\r\n  \"locationServices\": false,\r\n  \"photos\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/privacy",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"privacy"
											]
										}
									},
									"response": []
								},
								{
									"name": "012 - privacy settings update incorrectParameter hideTransactionAmount",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Test hideTransactionAmount\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"can't be parsed to Boolean\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"013 - privacy settings update incorrectParameter locationServices\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"contacts\": false,\r\n  \"defaultFeedPrivacy\": \"PRIVATE\",\r\n  \"hideMobile\": false,\r\n  \"hideTransactionAmount\": \"t\",\r\n  \"locationServices\": false,\r\n  \"photos\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/privacy",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"privacy"
											]
										}
									},
									"response": []
								},
								{
									"name": "013 - privacy settings update incorrectParameter locationServices",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Test locationServices\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"can't be parsed to Boolean\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"014 - privacy settings update incorrectParameter photos\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"contacts\": false,\r\n  \"defaultFeedPrivacy\": \"PRIVATE\",\r\n  \"hideMobile\": false,\r\n  \"hideTransactionAmount\": false,\r\n  \"locationServices\": \"t\",\r\n  \"photos\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/privacy",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"privacy"
											]
										}
									},
									"response": []
								},
								{
									"name": "014 - privacy settings update incorrectParameter photos",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Test photos\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"can't be parsed to Boolean\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"015 - privacy settings update maxParameters\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"contacts\": false,\r\n  \"defaultFeedPrivacy\": \"PRIVATE\",\r\n  \"hideMobile\": false,\r\n  \"hideTransactionAmount\": false,\r\n  \"locationServices\": false,\r\n  \"photos\": \"t\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/privacy",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"privacy"
											]
										}
									},
									"response": []
								},
								{
									"name": "015 - privacy settings update maxParameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Test privacy\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"JSON parse error: Unrecognized token\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"016 - privacy settings update maxParameter contacts\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"contacts\": {{access_token}},\r\n  \"defaultFeedPrivacy\": {{access_token}},\r\n  \"hideMobile\": {{access_token}},\r\n  \"hideTransactionAmount\": {{access_token}},\r\n  \"locationServices\": {{access_token}},\r\n  \"photos\": {{access_token}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/privacy",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"privacy"
											]
										}
									},
									"response": []
								},
								{
									"name": "016 - privacy settings update maxParameter contacts",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Test contacts\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"JSON parse error: Unrecognized token\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"017 - privacy settings update maxParameter defaultFeedPrivacy\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"contacts\": {{access_token}},\r\n  \"defaultFeedPrivacy\": \"PRIVATE\",\r\n  \"hideMobile\": false,\r\n  \"hideTransactionAmount\": false,\r\n  \"locationServices\": false,\r\n  \"photos\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/privacy",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"privacy"
											]
										}
									},
									"response": []
								},
								{
									"name": "017 - privacy settings update maxParameter defaultFeedPrivacy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Test defaultFeedPrivacy\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"JSON parse error: Unrecognized token\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"018 - privacy settings update maxParameter hideMobile\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"contacts\": false,\r\n  \"defaultFeedPrivacy\": {{access_token}},\r\n  \"hideMobile\": false,\r\n  \"hideTransactionAmount\": false,\r\n  \"locationServices\": false,\r\n  \"photos\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/privacy",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"privacy"
											]
										}
									},
									"response": []
								},
								{
									"name": "018 - privacy settings update maxParameter hideMobile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Test hideMobile\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"JSON parse error: Unrecognized token\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"019 - privacy settings update maxParameter hideTransactionAmount\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"contacts\": false,\r\n  \"defaultFeedPrivacy\": \"PRIVATE\",\r\n  \"hideMobile\": {{access_token}},\r\n  \"hideTransactionAmount\": false,\r\n  \"locationServices\": false,\r\n  \"photos\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/privacy",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"privacy"
											]
										}
									},
									"response": []
								},
								{
									"name": "019 - privacy settings update maxParameter hideTransactionAmount",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Test hideTransactionAmount\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"JSON parse error: Unrecognized token\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"020 - privacy settings update maxParameter locationServices\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"contacts\": false,\r\n  \"defaultFeedPrivacy\": \"PRIVATE\",\r\n  \"hideMobile\": false,\r\n  \"hideTransactionAmount\": {{access_token}},\r\n  \"locationServices\": false,\r\n  \"photos\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/privacy",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"privacy"
											]
										}
									},
									"response": []
								},
								{
									"name": "020 - privacy settings update maxParameter locationServices",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Test locationServices\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"JSON parse error: Unrecognized token\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"021 - privacy settings update maxParameter photos\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"contacts\": false,\r\n  \"defaultFeedPrivacy\": \"PRIVATE\",\r\n  \"hideMobile\": false,\r\n  \"hideTransactionAmount\": false,\r\n  \"locationServices\": {{access_token}},\r\n  \"photos\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/privacy",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"privacy"
											]
										}
									},
									"response": []
								},
								{
									"name": "021 - privacy settings update maxParameter photos",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Test photos\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"JSON parse error: Unrecognized token\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - get security settings emptyParameter\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"contacts\": false,\r\n  \"defaultFeedPrivacy\": \"PRIVATE\",\r\n  \"hideMobile\": false,\r\n  \"hideTransactionAmount\": false,\r\n  \"locationServices\": false,\r\n  \"photos\": {{access_token}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/privacy",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"privacy"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "005 - 004 - security settings negative",
							"item": [
								{
									"name": "001 - get security settings emptyParameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Test user loginWithTouchID\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"Wrong loginWithTouchID. Must not be null\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - get security settings incorrectParameter\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"loginWithTouchID\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/security",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"security"
											]
										}
									},
									"response": []
								},
								{
									"name": "002 - get security settings incorrectParameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Test user loginWithTouchID\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"can't be parsed to Boolean\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - get security settings moreParameter\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"loginWithTouchID\": \"t\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/security",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"security"
											]
										}
									},
									"response": []
								},
								{
									"name": "003 - get security settings moreParameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"\tpm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Test user loginWithTouchID\", function () {\r",
													"\tpm.expect(jsonData.message).to.be.contain(\"can't be parsed to Boolean\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - notification settings update\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"loginWithTouchID\": \"{{access_token}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/common-service/api/v1/profile/settings/security",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"common-service",
												"api",
												"v1",
												"profile",
												"settings",
												"security"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "001 - notification settings update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 205\", function () {\r",
											"\tpm.response.to.have.status(205);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - notification settings\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"emailNotification\": true,\r\n  \"promotions\": true,\r\n  \"receivePaymentRequest\": true,\r\n  \"receivePayments\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/profile/settings/notification",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"profile",
										"settings",
										"notification"
									]
								}
							},
							"response": []
						},
						{
							"name": "002 - notification settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\tpm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Test user receivePayments\", function () {\r",
											"\tpm.expect(jsonData.receivePayments).to.be.true;\r",
											"});\r",
											"pm.test(\"Test user receivePaymentRequest\", function () {\r",
											"\tpm.expect(jsonData.receivePaymentRequest).to.be.true;\r",
											"});\r",
											"pm.test(\"Test user promotions\", function () {\r",
											"\tpm.expect(jsonData.promotions).to.be.true;\r",
											"});\r",
											"pm.test(\"Test user emailNotification\", function () {\r",
											"\tpm.expect(jsonData.emailNotification).to.be.true;\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - payment settings update\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/profile/settings/notification",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"profile",
										"settings",
										"notification"
									]
								}
							},
							"response": []
						},
						{
							"name": "003 - payment settings update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 205\", function () {\r",
											"\tpm.response.to.have.status(205);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - get payment settings\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"incognito_mode\": true,\r\n  \"useSecondBalance\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/profile/settings/payment",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"profile",
										"settings",
										"payment"
									]
								}
							},
							"response": []
						},
						{
							"name": "004 - get payment settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\tpm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Test user useSecondBalance\", function () {\r",
											"\tpm.expect(jsonData.useSecondBalance).to.be.true;\r",
											"});\r",
											"pm.test(\"Test user incognito_mode\", function () {\r",
											"\tpm.expect(jsonData.incognito_mode).to.be.true;\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"005 - privacy settings update\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/profile/settings/payment",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"profile",
										"settings",
										"payment"
									]
								}
							},
							"response": []
						},
						{
							"name": "005 - privacy settings update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 205\", function () {\r",
											"\tpm.response.to.have.status(205);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"006 - get privacy settings\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"contacts\": true,\r\n  \"defaultFeedPrivacy\": \"FRIEND\",\r\n  \"hideMobile\": true,\r\n  \"hideTransactionAmount\": true,\r\n  \"locationServices\": true,\r\n  \"photos\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/profile/settings/privacy",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"profile",
										"settings",
										"privacy"
									]
								}
							},
							"response": []
						},
						{
							"name": "006 - get privacy settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\tpm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Test user locationServices\", function () {\r",
											"\tpm.expect(jsonData.locationServices).to.be.true;\r",
											"});\r",
											"pm.test(\"Test user contacts\", function () {\r",
											"\tpm.expect(jsonData.contacts).to.be.true;\r",
											"});\r",
											"pm.test(\"Test user photos\", function () {\r",
											"\tpm.expect(jsonData.photos).to.be.true;\r",
											"});\r",
											"pm.test(\"Test user hideMobile\", function () {\r",
											"\tpm.expect(jsonData.hideMobile).to.be.true;\r",
											"});\r",
											"pm.test(\"Test user hideTransactionAmount\", function () {\r",
											"\tpm.expect(jsonData.hideTransactionAmount).to.be.true;\r",
											"});\r",
											"pm.test(\"Test user defaultFeedPrivacy\", function () {\r",
											"\tpm.expect(jsonData.defaultFeedPrivacy).to.contain(\"FRIEND\");\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"007 - privacy settings update defaultFeedPrivacy\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/common-service//api/v1/profile/settings/privacy",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"",
										"api",
										"v1",
										"profile",
										"settings",
										"privacy"
									]
								}
							},
							"response": []
						},
						{
							"name": "007 - privacy settings update defaultFeedPrivacy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 205\", function () {\r",
											"\tpm.response.to.have.status(205);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"008 - get privacy settings\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"contacts\": true,\r\n  \"defaultFeedPrivacy\": \"PUBLIC\",\r\n  \"hideMobile\": true,\r\n  \"hideTransactionAmount\": true,\r\n  \"locationServices\": true,\r\n  \"photos\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/profile/settings/privacy",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"profile",
										"settings",
										"privacy"
									]
								}
							},
							"response": []
						},
						{
							"name": "008 - get privacy settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\tpm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Test user locationServices\", function () {\r",
											"\tpm.expect(jsonData.locationServices).to.be.true;\r",
											"});\r",
											"pm.test(\"Test user contacts\", function () {\r",
											"\tpm.expect(jsonData.contacts).to.be.true;\r",
											"});\r",
											"pm.test(\"Test user photos\", function () {\r",
											"\tpm.expect(jsonData.photos).to.be.true;\r",
											"});\r",
											"pm.test(\"Test user hideMobile\", function () {\r",
											"\tpm.expect(jsonData.hideMobile).to.be.true;\r",
											"});\r",
											"pm.test(\"Test user hideTransactionAmount\", function () {\r",
											"\tpm.expect(jsonData.hideTransactionAmount).to.be.true;\r",
											"});\r",
											"pm.test(\"Test user defaultFeedPrivacy\", function () {\r",
											"\tpm.expect(jsonData.defaultFeedPrivacy).to.contain(\"PUBLIC\");\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"009 - privacy settings update defaultFeedPrivacy\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/common-service//api/v1/profile/settings/privacy",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"",
										"api",
										"v1",
										"profile",
										"settings",
										"privacy"
									]
								}
							},
							"response": []
						},
						{
							"name": "009 - privacy settings update defaultFeedPrivacy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 205\", function () {\r",
											"\tpm.response.to.have.status(205);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"010 - get privacy settings\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"contacts\": true,\r\n  \"defaultFeedPrivacy\": \"NOT_PUBLISH\",\r\n  \"hideMobile\": true,\r\n  \"hideTransactionAmount\": true,\r\n  \"locationServices\": true,\r\n  \"photos\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/profile/settings/privacy",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"profile",
										"settings",
										"privacy"
									]
								}
							},
							"response": []
						},
						{
							"name": "010 - get privacy settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\tpm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Test user locationServices\", function () {\r",
											"\tpm.expect(jsonData.locationServices).to.be.true;\r",
											"});\r",
											"pm.test(\"Test user contacts\", function () {\r",
											"\tpm.expect(jsonData.contacts).to.be.true;\r",
											"});\r",
											"pm.test(\"Test user photos\", function () {\r",
											"\tpm.expect(jsonData.photos).to.be.true;\r",
											"});\r",
											"pm.test(\"Test user hideMobile\", function () {\r",
											"\tpm.expect(jsonData.hideMobile).to.be.true;\r",
											"});\r",
											"pm.test(\"Test user hideTransactionAmount\", function () {\r",
											"\tpm.expect(jsonData.hideTransactionAmount).to.be.true;\r",
											"});\r",
											"pm.test(\"Test user defaultFeedPrivacy\", function () {\r",
											"\tpm.expect(jsonData.defaultFeedPrivacy).to.contain(\"NOT_PUBLISH\");\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"011 - get security settings\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/common-service//api/v1/profile/settings/privacy",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"",
										"api",
										"v1",
										"profile",
										"settings",
										"privacy"
									]
								}
							},
							"response": []
						},
						{
							"name": "011 - get security settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 205\", function () {\r",
											"\tpm.response.to.have.status(205);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"012 - get security settings\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"loginWithTouchID\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/profile/settings/security",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"profile",
										"settings",
										"security"
									]
								}
							},
							"response": []
						},
						{
							"name": "012 - get security settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\tpm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Test user loginWithTouchID\", function () {\r",
											"\tpm.expect(jsonData.loginWithTouchID).to.be.true;\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - create empty\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/profile/settings/security",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"profile",
										"settings",
										"security"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "social-service",
			"item": [
				{
					"name": "001 - feeds controller",
					"item": [
						{
							"name": "001 - 001 feedController negative empty",
							"item": [
								{
									"name": "001 - create empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test empty\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"JSON parse error: Cannot deserialize value of type `me.sweeft.socialservice.model.enums.Currency` from String \\\"\\\": not one of the values accepted for Enum class: [EUR, USD, GEL]; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `me.sweeft.socialservice.model.enums.Currency` from String \\\"\\\": not one of the values accepted for Enum class: [EUR, USD, GEL]\\n at [Source: (PushbackInputStream); line: 3, column: 15] (through reference chain: me.sweeft.socialservice.model.kafka.FeedKafka[\\\"currency\\\"])\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - create currency\")",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"amount\": \"\",\n  \"currency\": \"\",\n  \"gifImage\": \"\",\n  \"image\": \"\",\n  \"receiverUserId\": \"\",\n  \"receiverUserPrivacy\": \"\",\n  \"senderUserId\": \"\",\n  \"senderUserPrivacy\": \"\",\n  \"text\": \"\",\n  \"type\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/feeds",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"feeds"
											]
										}
									},
									"response": []
								},
								{
									"name": "002 - create currency",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test empty\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"JSON parse error: Cannot deserialize value of type `me.sweeft.socialservice.model.enums.Currency` from String \\\"\\\": not one of the values accepted for Enum class: [EUR, USD, GEL]; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `me.sweeft.socialservice.model.enums.Currency` from String \\\"\\\": not one of the values accepted for Enum class: [EUR, USD, GEL]\\n at [Source: (PushbackInputStream); line: 3, column: 15] (through reference chain: me.sweeft.socialservice.model.kafka.FeedKafka[\\\"currency\\\"])\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - create receiverUserPrivacy\")",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"amount\": 5,\n  \"currency\": \"\",\n  \"gifImage\": \"string\",\n  \"image\": \"string\",\n  \"receiverUserId\": 222,\n  \"receiverUserPrivacy\": \"FRIEND\",\n  \"senderUserId\": {{loggedId}},\n  \"senderUserPrivacy\": \"FRIEND\",\n  \"text\": \"string\",\n  \"type\": \"REQUEST\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/feeds",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"feeds"
											]
										}
									},
									"response": []
								},
								{
									"name": "003 - create receiverUserPrivacy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test empty\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"JSON parse error: Cannot deserialize value of type `me.sweeft.socialservice.model.enums.MessagePrivacy` from String \\\"\\\": not one of the values accepted for Enum class: [PUBLIC, NOT_PUBLISH, FRIEND, PRIVATE]; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `me.sweeft.socialservice.model.enums.MessagePrivacy` from String \\\"\\\": not one of the values accepted for Enum class: [PUBLIC, NOT_PUBLISH, FRIEND, PRIVATE]\\n at [Source: (PushbackInputStream); line: 7, column: 26] (through reference chain: me.sweeft.socialservice.model.kafka.FeedKafka[\\\"receiverUserPrivacy\\\"])\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - create senderUserPrivacy\")",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"amount\": \"5\",\n  \"currency\": \"EUR\",\n  \"gifImage\": \"string\",\n  \"image\": \"string\",\n  \"receiverUserId\": 222,\n  \"receiverUserPrivacy\": \"\",\n  \"senderUserId\": {{loggedId}},\n  \"senderUserPrivacy\": \"FRIEND\",\n  \"text\": \"string\",\n  \"type\": \"REQUEST\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/feeds",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"feeds"
											]
										}
									},
									"response": []
								},
								{
									"name": "004 - create senderUserPrivacy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test empty\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"JSON parse error: Cannot deserialize value of type `me.sweeft.socialservice.model.enums.MessagePrivacy` from String \\\"\\\": not one of the values accepted for Enum class: [PUBLIC, NOT_PUBLISH, FRIEND, PRIVATE]; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `me.sweeft.socialservice.model.enums.MessagePrivacy` from String \\\"\\\": not one of the values accepted for Enum class: [PUBLIC, NOT_PUBLISH, FRIEND, PRIVATE]\\n at [Source: (PushbackInputStream); line: 9, column: 24] (through reference chain: me.sweeft.socialservice.model.kafka.FeedKafka[\\\"senderUserPrivacy\\\"])\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"005 - create type\")",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"amount\": \"5\",\n  \"currency\": \"EUR\",\n  \"gifImage\": \"string\",\n  \"image\": \"string\",\n  \"receiverUserId\": 222,\n  \"receiverUserPrivacy\": \"FRIEND\",\n  \"senderUserId\": {{loggedId}},\n  \"senderUserPrivacy\": \"\",\n  \"text\": \"string\",\n  \"type\": \"REQUEST\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/feeds",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"feeds"
											]
										}
									},
									"response": []
								},
								{
									"name": "005 - create type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test empty\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"JSON parse error: Cannot deserialize value of type `me.sweeft.socialservice.model.enums.MessageType` from String \\\"\\\": not one of the values accepted for Enum class: [SEND, REQUEST]; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `me.sweeft.socialservice.model.enums.MessageType` from String \\\"\\\": not one of the values accepted for Enum class: [SEND, REQUEST]\\n at [Source: (PushbackInputStream); line: 11, column: 11] (through reference chain: me.sweeft.socialservice.model.kafka.FeedKafka[\\\"type\\\"])\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - create max\")",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"amount\": \"5\",\n  \"currency\": \"EUR\",\n  \"gifImage\": \"string\",\n  \"image\": \"string\",\n  \"receiverUserId\": 222,\n  \"receiverUserPrivacy\": \"FRIEND\",\n  \"senderUserId\": {{loggedId}},\n  \"senderUserPrivacy\": \"FRIEND\",\n  \"text\": \"string\",\n  \"type\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/feeds",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"feeds"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "001 - 002 feedController negative max",
							"item": [
								{
									"name": "001 - create max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test empty\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"JSON parse error: Unrecognized token 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJPeUU1bUN2N3did0tZTjVLOHdCaW1OZlB6UjJMQVRjN1dfSU1uVXcwU1JrIn0': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false'); nested exception is com.fasterxml.jackson.core.JsonParseException: Unrecognized token 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJPeUU1bUN2N3did0tZTjVLOHdCaW1OZlB6UjJMQVRjN1dfSU1uVXcwU1JrIn0': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')\\n at [Source: (PushbackInputStream); line: 2, column: 125]\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - create currency\")",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"amount\": {{access_token}},\n  \"currency\": {{access_token}},\n  \"gifImage\": {{access_token}},\n  \"image\": {{access_token}},\n  \"receiverUserId\": {{access_token}},\n  \"receiverUserPrivacy\": {{access_token}},\n  \"senderUserId\": {{access_token}},\n  \"senderUserPrivacy\": {{access_token}},\n  \"text\": {{access_token}},\n  \"type\": {{access_token}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/feeds",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"feeds"
											]
										}
									},
									"response": []
								},
								{
									"name": "002 - create currency",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test empty\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"JSON parse error: Unrecognized token 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJPeUU1bUN2N3did0tZTjVLOHdCaW1OZlB6UjJMQVRjN1dfSU1uVXcwU1JrIn0': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false'); nested exception is com.fasterxml.jackson.core.JsonParseException: Unrecognized token 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJPeUU1bUN2N3did0tZTjVLOHdCaW1OZlB6UjJMQVRjN1dfSU1uVXcwU1JrIn0': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')\\n at [Source: (PushbackInputStream); line: 3, column: 127]\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - create receiverUserPrivacy\")",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"amount\": 5,\n  \"currency\": {{access_token}},\n  \"gifImage\": \"string\",\n  \"image\": \"string\",\n  \"receiverUserId\": 222,\n  \"receiverUserPrivacy\": \"FRIEND\",\n  \"senderUserId\": {{loggedId}},\n  \"senderUserPrivacy\": \"FRIEND\",\n  \"text\": \"string\",\n  \"type\": \"REQUEST\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/feeds",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"feeds"
											]
										}
									},
									"response": []
								},
								{
									"name": "003 - create receiverUserPrivacy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test empty\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"JSON parse error: Unrecognized token 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJPeUU1bUN2N3did0tZTjVLOHdCaW1OZlB6UjJMQVRjN1dfSU1uVXcwU1JrIn0': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false'); nested exception is com.fasterxml.jackson.core.JsonParseException: Unrecognized token 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJPeUU1bUN2N3did0tZTjVLOHdCaW1OZlB6UjJMQVRjN1dfSU1uVXcwU1JrIn0': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')\\n at [Source: (PushbackInputStream); line: 7, column: 138]\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - create senderUserPrivacy\")",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"amount\": \"5\",\n  \"currency\": \"EUR\",\n  \"gifImage\": \"string\",\n  \"image\": \"string\",\n  \"receiverUserId\": 222,\n  \"receiverUserPrivacy\": {{access_token}},\n  \"senderUserId\": {{loggedId}},\n  \"senderUserPrivacy\": \"FRIEND\",\n  \"text\": \"string\",\n  \"type\": \"REQUEST\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/feeds",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"feeds"
											]
										}
									},
									"response": []
								},
								{
									"name": "004 - create senderUserPrivacy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test empty\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"JSON parse error: Unrecognized token 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJPeUU1bUN2N3did0tZTjVLOHdCaW1OZlB6UjJMQVRjN1dfSU1uVXcwU1JrIn0': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false'); nested exception is com.fasterxml.jackson.core.JsonParseException: Unrecognized token 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJPeUU1bUN2N3did0tZTjVLOHdCaW1OZlB6UjJMQVRjN1dfSU1uVXcwU1JrIn0': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')\\n at [Source: (PushbackInputStream); line: 9, column: 136]\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"005 - create type\")",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"amount\": \"5\",\n  \"currency\": \"EUR\",\n  \"gifImage\": \"string\",\n  \"image\": \"string\",\n  \"receiverUserId\": 222,\n  \"receiverUserPrivacy\": \"FRIEND\",\n  \"senderUserId\": {{loggedId}},\n  \"senderUserPrivacy\": {{access_token}},\n  \"text\": \"string\",\n  \"type\": \"REQUEST\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/feeds",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"feeds"
											]
										}
									},
									"response": []
								},
								{
									"name": "005 - create type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test empty\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"JSON parse error: Unrecognized token 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJPeUU1bUN2N3did0tZTjVLOHdCaW1OZlB6UjJMQVRjN1dfSU1uVXcwU1JrIn0': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false'); nested exception is com.fasterxml.jackson.core.JsonParseException: Unrecognized token 'eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJPeUU1bUN2N3did0tZTjVLOHdCaW1OZlB6UjJMQVRjN1dfSU1uVXcwU1JrIn0': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')\\n at [Source: (PushbackInputStream); line: 11, column: 123]\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"006 - findByIdFeed max\")",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"amount\": \"5\",\n  \"currency\": \"EUR\",\n  \"gifImage\": \"string\",\n  \"image\": \"string\",\n  \"receiverUserId\": 222,\n  \"receiverUserPrivacy\": \"FRIEND\",\n  \"senderUserId\": {{loggedId}},\n  \"senderUserPrivacy\": \"FRIEND\",\n  \"text\": \"string\",\n  \"type\": {{access_token}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/feeds",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"feeds"
											]
										}
									},
									"response": []
								},
								{
									"name": "006 - findByIdFeed max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"\tpm.response.to.have.status(404);",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - create currency incorrect\")",
													"",
													"pm.test(\"Test trxAmount\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"404 NOT_FOUND \\\"Feed not found\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/feeds/{{access_token}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"feeds",
												"{{access_token}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "001 - 003 feedController negative incorrect",
							"item": [
								{
									"name": "002 - create currency incorrect",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test empty\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"JSON parse error: Cannot deserialize value of type `me.sweeft.socialservice.model.enums.Currency` from number 5: index value outside legal index range [0..2]; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `me.sweeft.socialservice.model.enums.Currency` from number 5: index value outside legal index range [0..2]\\n at [Source: (PushbackInputStream); line: 3, column: 15] (through reference chain: me.sweeft.socialservice.model.kafka.FeedKafka[\\\"currency\\\"])\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - create receiverUserPrivacy\")",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"amount\": 5,\n  \"currency\": 5,\n  \"gifImage\": \"string\",\n  \"image\": \"string\",\n  \"receiverUserId\": 222,\n  \"receiverUserPrivacy\": \"FRIEND\",\n  \"senderUserId\": {{loggedId}},\n  \"senderUserPrivacy\": \"FRIEND\",\n  \"text\": \"string\",\n  \"type\": \"REQUEST\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/feeds",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"feeds"
											]
										}
									},
									"response": []
								},
								{
									"name": "003 - create receiverUserPrivacy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test empty\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"JSON parse error: Cannot deserialize value of type `me.sweeft.socialservice.model.enums.MessagePrivacy` from number 5: index value outside legal index range [0..3]; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `me.sweeft.socialservice.model.enums.MessagePrivacy` from number 5: index value outside legal index range [0..3]\\n at [Source: (PushbackInputStream); line: 7, column: 26] (through reference chain: me.sweeft.socialservice.model.kafka.FeedKafka[\\\"receiverUserPrivacy\\\"])\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - create senderUserPrivacy\")",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"amount\": \"5\",\n  \"currency\": \"EUR\",\n  \"gifImage\": \"string\",\n  \"image\": \"string\",\n  \"receiverUserId\": 222,\n  \"receiverUserPrivacy\": 5,\n  \"senderUserId\": {{loggedId}},\n  \"senderUserPrivacy\": \"FRIEND\",\n  \"text\": \"string\",\n  \"type\": \"REQUEST\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/feeds",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"feeds"
											]
										}
									},
									"response": []
								},
								{
									"name": "004 - create senderUserPrivacy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test empty\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"JSON parse error: Cannot deserialize value of type `me.sweeft.socialservice.model.enums.MessagePrivacy` from number 5: index value outside legal index range [0..3]; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `me.sweeft.socialservice.model.enums.MessagePrivacy` from number 5: index value outside legal index range [0..3]\\n at [Source: (PushbackInputStream); line: 9, column: 24] (through reference chain: me.sweeft.socialservice.model.kafka.FeedKafka[\\\"senderUserPrivacy\\\"])\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"005 - create type\")",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"amount\": \"5\",\n  \"currency\": \"EUR\",\n  \"gifImage\": \"string\",\n  \"image\": \"string\",\n  \"receiverUserId\": 222,\n  \"receiverUserPrivacy\": \"FRIEND\",\n  \"senderUserId\": {{loggedId}},\n  \"senderUserPrivacy\": 5,\n  \"text\": \"string\",\n  \"type\": \"REQUEST\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/feeds",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"feeds"
											]
										}
									},
									"response": []
								},
								{
									"name": "005 - create type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test empty\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"JSON parse error: Cannot deserialize value of type `me.sweeft.socialservice.model.enums.MessageType` from number 5: index value outside legal index range [0..1]; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `me.sweeft.socialservice.model.enums.MessageType` from number 5: index value outside legal index range [0..1]\\n at [Source: (PushbackInputStream); line: 11, column: 11] (through reference chain: me.sweeft.socialservice.model.kafka.FeedKafka[\\\"type\\\"])\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"006 - findByIdFeed incorrect\")",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"amount\": \"5\",\n  \"currency\": \"EUR\",\n  \"gifImage\": \"string\",\n  \"image\": \"string\",\n  \"receiverUserId\": 222,\n  \"receiverUserPrivacy\": \"FRIEND\",\n  \"senderUserId\": {{loggedId}},\n  \"senderUserPrivacy\": \"FRIEND\",\n  \"text\": \"string\",\n  \"type\": 5\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/feeds",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"feeds"
											]
										}
									},
									"response": []
								},
								{
									"name": "006 - findByIdFeed incorrect",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"\tpm.response.to.have.status(404);",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - create\")",
													"",
													"pm.test(\"Test trxAmount\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"404 NOT_FOUND \\\"Feed not found\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/feeds/test",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"feeds",
												"test"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "001 - 004  feedController negative spaces",
							"item": [
								{
									"name": "001 - create max spaces",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test empty\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"JSON parse error: Cannot deserialize value of type `me.sweeft.socialservice.model.enums.Currency` from String \\\"\\\": not one of the values accepted for Enum class: [EUR, USD, GEL]; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `me.sweeft.socialservice.model.enums.Currency` from String \\\"\\\": not one of the values accepted for Enum class: [EUR, USD, GEL]\\n at [Source: (PushbackInputStream); line: 3, column: 15] (through reference chain: me.sweeft.socialservice.model.kafka.FeedKafka[\\\"currency\\\"])\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"010 - upload image\")",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"amount\": \"   \",\n  \"currency\": \"   \",\n  \"gifImage\": \"   \",\n  \"image\": \"   \",\n  \"receiverUserId\": \"   \",\n  \"receiverUserPrivacy\": \"   \",\n  \"senderUserId\": \"   \",\n  \"senderUserPrivacy\": \"   \",\n  \"text\": \"   \",\n  \"type\": \"   \"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/feeds",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"feeds"
											]
										}
									},
									"response": []
								},
								{
									"name": "002 - create currency",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test empty\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"JSON parse error: Cannot deserialize value of type `me.sweeft.socialservice.model.enums.Currency` from String \\\"\\\": not one of the values accepted for Enum class: [EUR, USD, GEL]; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `me.sweeft.socialservice.model.enums.Currency` from String \\\"\\\": not one of the values accepted for Enum class: [EUR, USD, GEL]\\n at [Source: (PushbackInputStream); line: 3, column: 15] (through reference chain: me.sweeft.socialservice.model.kafka.FeedKafka[\\\"currency\\\"])\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"010 - upload image\")",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"amount\": 5,\n  \"currency\": \"   \",\n  \"gifImage\": \"string\",\n  \"image\": \"string\",\n  \"receiverUserId\": 222,\n  \"receiverUserPrivacy\": \"FRIEND\",\n  \"senderUserId\": {{loggedId}},\n  \"senderUserPrivacy\": \"FRIEND\",\n  \"text\": \"string\",\n  \"type\": \"REQUEST\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/feeds",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"feeds"
											]
										}
									},
									"response": []
								},
								{
									"name": "003 - create receiverUserPrivacy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test empty\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"JSON parse error: Cannot deserialize value of type `me.sweeft.socialservice.model.enums.MessagePrivacy` from String \\\"\\\": not one of the values accepted for Enum class: [PUBLIC, NOT_PUBLISH, FRIEND, PRIVATE]; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `me.sweeft.socialservice.model.enums.MessagePrivacy` from String \\\"\\\": not one of the values accepted for Enum class: [PUBLIC, NOT_PUBLISH, FRIEND, PRIVATE]\\n at [Source: (PushbackInputStream); line: 7, column: 26] (through reference chain: me.sweeft.socialservice.model.kafka.FeedKafka[\\\"receiverUserPrivacy\\\"])\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"010 - upload image\")",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"amount\": \"5\",\n  \"currency\": \"EUR\",\n  \"gifImage\": \"string\",\n  \"image\": \"string\",\n  \"receiverUserId\": 222,\n  \"receiverUserPrivacy\": \"   \",\n  \"senderUserId\": {{loggedId}},\n  \"senderUserPrivacy\": \"FRIEND\",\n  \"text\": \"string\",\n  \"type\": \"REQUEST\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/feeds",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"feeds"
											]
										}
									},
									"response": []
								},
								{
									"name": "004 - create senderUserPrivacy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test empty\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"JSON parse error: Cannot deserialize value of type `me.sweeft.socialservice.model.enums.MessagePrivacy` from String \\\"\\\": not one of the values accepted for Enum class: [PUBLIC, NOT_PUBLISH, FRIEND, PRIVATE]; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `me.sweeft.socialservice.model.enums.MessagePrivacy` from String \\\"\\\": not one of the values accepted for Enum class: [PUBLIC, NOT_PUBLISH, FRIEND, PRIVATE]\\n at [Source: (PushbackInputStream); line: 9, column: 24] (through reference chain: me.sweeft.socialservice.model.kafka.FeedKafka[\\\"senderUserPrivacy\\\"])\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"010 - upload image\")",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"amount\": \"5\",\n  \"currency\": \"EUR\",\n  \"gifImage\": \"string\",\n  \"image\": \"string\",\n  \"receiverUserId\": 222,\n  \"receiverUserPrivacy\": \"FRIEND\",\n  \"senderUserId\": {{loggedId}},\n  \"senderUserPrivacy\": \"   \",\n  \"text\": \"string\",\n  \"type\": \"REQUEST\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/feeds",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"feeds"
											]
										}
									},
									"response": []
								},
								{
									"name": "005 - create type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test empty\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"JSON parse error: Cannot deserialize value of type `me.sweeft.socialservice.model.enums.MessageType` from String \\\"\\\": not one of the values accepted for Enum class: [SEND, REQUEST]; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `me.sweeft.socialservice.model.enums.MessageType` from String \\\"\\\": not one of the values accepted for Enum class: [SEND, REQUEST]\\n at [Source: (PushbackInputStream); line: 11, column: 11] (through reference chain: me.sweeft.socialservice.model.kafka.FeedKafka[\\\"type\\\"])\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"010 - upload image\")",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"amount\": \"5\",\n  \"currency\": \"EUR\",\n  \"gifImage\": \"string\",\n  \"image\": \"string\",\n  \"receiverUserId\": 222,\n  \"receiverUserPrivacy\": \"FRIEND\",\n  \"senderUserId\": {{loggedId}},\n  \"senderUserPrivacy\": \"FRIEND\",\n  \"text\": \"string\",\n  \"type\": \"   \"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/feeds",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"feeds"
											]
										}
									},
									"response": []
								},
								{
									"name": "006 - findByIdFeed spaces",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"\tpm.response.to.have.status(404);",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - createFeed currency,privacy,type\")",
													"",
													"pm.test(\"Test trxAmount\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"404 NOT_FOUND \\\"Feed not found\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/feeds/   ",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"feeds",
												"   "
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "001 - 005 feed create positive",
							"item": [
								{
									"name": "001 - createFeed currency,privacy,type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"let loggedid = pm.collectionVariables.get(\"loggedId\")",
													"let receiveruserid1 = pm.collectionVariables.get(\"receiverUserId\")",
													"",
													"let feedid = jsonData.id ",
													"let receiveruserid = jsonData.receiverUserId",
													"let trxAmount = jsonData.trxAmount",
													"let senderUserprivacy = jsonData.senderUserPrivacy",
													"let receiverUserprivacy = jsonData.receiverUserPrivacy",
													"let trxCurrency = jsonData.trxCurrency",
													"let senderUserId = jsonData.senderUserId",
													"let receiverUserId = jsonData.receiverUserId",
													"let liked = jsonData.likeAmount",
													"",
													"pm.collectionVariables.set(\"feedId\", feedid)",
													"pm.collectionVariables.set(\"receiverUserId\", receiveruserid)",
													"",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test trxAmount\", function () {",
													"\tpm.expect(trxAmount).to.eql(5.0);",
													"});",
													"",
													"pm.test(\"Test trxCurrency\", function () {",
													"\tpm.expect(trxCurrency).to.contain(\"GEL\");",
													"});",
													"",
													"pm.test(\"Test senderUserId\", function () {",
													"\tpm.expect(senderUserId).to.eql(loggedid);",
													"});",
													"",
													"pm.test(\"Test receiverUserId\", function () {",
													"\tpm.expect(receiverUserId).to.eql(receiveruserid)",
													"});",
													"",
													"pm.test(\"Test senderUserprivacy\", function () {",
													"\tpm.expect(senderUserprivacy).to.eql(3);",
													"});",
													"",
													"pm.test(\"Test receiverUserPrivacy\", function () {",
													"\tpm.expect(receiverUserprivacy).to.eql(3)",
													"});",
													"",
													"pm.test(\"Test receiverUserPrivacy\", function () {",
													"\tpm.expect(liked).to.eql(0)",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - findByIdFeed currency,privacy,type\")",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"amount\": 5,\n  \"currency\": \"GEL\",\n  \"gifImage\": \"string\",\n  \"image\": \"string\",\n  \"receiverUserId\": 222,\n  \"receiverUserPrivacy\": \"NOT_PUBLISH\",\n  \"senderUserId\": {{loggedId}},\n  \"senderUserPrivacy\": \"NOT_PUBLISH\",\n  \"text\": \"string\",\n  \"type\": \"SEND\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/feeds",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"feeds"
											]
										}
									},
									"response": []
								},
								{
									"name": "002 - createFeed currency,privacy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"let loggedid = pm.collectionVariables.get(\"loggedId\")",
													"let receiveruserid1 = pm.collectionVariables.get(\"receiverUserId\")",
													"",
													"let feedid = jsonData.id ",
													"let receiveruserid = jsonData.receiverUserId",
													"let trxAmount = jsonData.trxAmount",
													"let senderUserprivacy = jsonData.senderUserPrivacy",
													"let receiverUserprivacy = jsonData.receiverUserPrivacy",
													"let trxCurrency = jsonData.trxCurrency",
													"let senderUserId = jsonData.senderUserId",
													"let receiverUserId = jsonData.receiverUserId",
													"let liked = jsonData.likeAmount",
													"",
													"pm.collectionVariables.set(\"feedId\", feedid)",
													"pm.collectionVariables.set(\"receiverUserId\", receiveruserid)",
													"",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test trxAmount\", function () {",
													"\tpm.expect(trxAmount).to.eql(5.0);",
													"});",
													"",
													"pm.test(\"Test trxCurrency\", function () {",
													"\tpm.expect(trxCurrency).to.contain(\"USD\");",
													"});",
													"",
													"pm.test(\"Test senderUserId\", function () {",
													"\tpm.expect(senderUserId).to.eql(loggedid);",
													"});",
													"",
													"pm.test(\"Test receiverUserId\", function () {",
													"\tpm.expect(receiverUserId).to.eql(receiveruserid)",
													"});",
													"",
													"pm.test(\"Test senderUserprivacy\", function () {",
													"\tpm.expect(senderUserprivacy).to.eql(2);",
													"});",
													"",
													"pm.test(\"Test receiverUserPrivacy\", function () {",
													"\tpm.expect(receiverUserprivacy).to.eql(2)",
													"});",
													"",
													"pm.test(\"Test receiverUserPrivacy\", function () {",
													"\tpm.expect(liked).to.eql(0)",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - createFeed currency,privacy\")",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"amount\": 5,\n  \"currency\": \"USD\",\n  \"gifImage\": \"string\",\n  \"image\": \"string\",\n  \"receiverUserId\": 222,\n  \"receiverUserPrivacy\": \"PRIVATE\",\n  \"senderUserId\": {{loggedId}},\n  \"senderUserPrivacy\": \"PRIVATE\",\n  \"text\": \"string\",\n  \"type\": \"SEND\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/feeds",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"feeds"
											]
										}
									},
									"response": []
								},
								{
									"name": "003 - createFeed privacy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"let loggedid = pm.collectionVariables.get(\"loggedId\")",
													"let receiveruserid1 = pm.collectionVariables.get(\"receiverUserId\")",
													"",
													"let feedid = jsonData.id ",
													"let receiveruserid = jsonData.receiverUserId",
													"let trxAmount = jsonData.trxAmount",
													"let senderUserprivacy = jsonData.senderUserPrivacy",
													"let receiverUserprivacy = jsonData.receiverUserPrivacy",
													"let trxCurrency = jsonData.trxCurrency",
													"let senderUserId = jsonData.senderUserId",
													"let receiverUserId = jsonData.receiverUserId",
													"let liked = jsonData.likeAmount",
													"",
													"pm.collectionVariables.set(\"feedId\", feedid)",
													"pm.collectionVariables.set(\"receiverUserId\", receiveruserid)",
													"",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test trxAmount\", function () {",
													"\tpm.expect(trxAmount).to.eql(5.0);",
													"});",
													"",
													"pm.test(\"Test trxCurrency\", function () {",
													"\tpm.expect(trxCurrency).to.contain(\"GEL\");",
													"});",
													"",
													"pm.test(\"Test senderUserId\", function () {",
													"\tpm.expect(senderUserId).to.eql(loggedid);",
													"});",
													"",
													"pm.test(\"Test receiverUserId\", function () {",
													"\tpm.expect(receiverUserId).to.eql(receiveruserid)",
													"});",
													"",
													"pm.test(\"Test senderUserprivacy\", function () {",
													"\tpm.expect(senderUserprivacy).to.eql(0);",
													"});",
													"",
													"pm.test(\"Test receiverUserPrivacy\", function () {",
													"\tpm.expect(receiverUserprivacy).to.eql(0)",
													"});",
													"",
													"pm.test(\"Test receiverUserPrivacy\", function () {",
													"\tpm.expect(liked).to.eql(0)",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - findByIdFeed currency,privacy,type\")",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"amount\": 5,\n  \"currency\": \"GEL\",\n  \"gifImage\": \"string\",\n  \"image\": \"string\",\n  \"receiverUserId\": 222,\n  \"receiverUserPrivacy\": \"PUBLIC\",\n  \"senderUserId\": {{loggedId}},\n  \"senderUserPrivacy\": \"PUBLIC\",\n  \"text\": \"string\",\n  \"type\": \"SEND\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/feeds",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"feeds"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "001 - create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"let feedid = jsonData.id ",
											"let receiveruserid = jsonData.receiverUserId",
											"",
											"pm.collectionVariables.set(\"feedId\", feedid)",
											"pm.collectionVariables.set(\"receiverUserId\", receiveruserid)",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"\tpm.response.to.have.status(200);",
											"});",
											"",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - findByIdFeed\")",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"amount\": 5,\n  \"currency\": \"EUR\",\n  \"gifImage\": \"string\",\n  \"image\": \"string\",\n  \"receiverUserId\": 222,\n  \"receiverUserPrivacy\": \"FRIEND\",\n  \"senderUserId\": {{loggedId}},\n  \"senderUserPrivacy\": \"FRIEND\",\n  \"text\": \"string\",\n  \"type\": \"REQUEST\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/social-service/api/v1/feeds",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"social-service",
										"api",
										"v1",
										"feeds"
									]
								}
							},
							"response": []
						},
						{
							"name": "002 - findByIdFeed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"\tpm.response.to.have.status(200);",
											"});",
											"",
											"let loggedid = pm.collectionVariables.get(\"loggedId\")",
											"let receiveruserid = pm.collectionVariables.get(\"receiverUserId\")",
											"",
											"",
											"let trxAmount = jsonData.trxAmount",
											"let trxCurrency = jsonData.trxCurrency",
											"let senderUserId = jsonData.senderUserId",
											"let receiverUserId = jsonData.receiverUserId",
											"let liked = jsonData.liked",
											"",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - ChangePrivacy\")",
											"",
											"pm.test(\"Test trxAmount\", function () {",
											"\tpm.expect(trxAmount).to.eql(5.0);",
											"});",
											"",
											"pm.test(\"Test trxCurrency\", function () {",
											"\tpm.expect(trxCurrency).to.contain(\"EUR\");",
											"});",
											"",
											"pm.test(\"Test senderUserId\", function () {",
											"\tpm.expect(senderUserId).to.eql(loggedid);",
											"});",
											"",
											"pm.test(\"Test receiverUserId\", function () {",
											"\tpm.expect(receiverUserId).to.eql(receiveruserid)",
											"});",
											"",
											"pm.test(\"Test liked\", function () {",
											"\tpm.expect(liked).to.false;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/social-service/api/v1/feeds/{{feedId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"social-service",
										"api",
										"v1",
										"feeds",
										"{{feedId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "003 - ChangePrivacy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"\tpm.response.to.have.status(200);",
											"});",
											"",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - createComment\")",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{base_url}}/social-service/api/v1/feeds/8tAS2H4BC3SYijfaVDPH?feedId={{feedId}}&privacy=PUBLIC",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"social-service",
										"api",
										"v1",
										"feeds",
										"8tAS2H4BC3SYijfaVDPH"
									],
									"query": [
										{
											"key": "feedId",
											"value": "{{feedId}}"
										},
										{
											"key": "privacy",
											"value": "PUBLIC"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "004 - createComment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"let commentid = jsonData.id",
											"",
											"pm.collectionVariables.set(\"commentId\", commentid)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"\tpm.response.to.have.status(200);",
											"});",
											"",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"005 - getFeedComments\")",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"comment\": \"testComment\",\n  \"feedId\": \"{{feedId}}\",\n  \"parentCommentId\": \"main\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/social-service/api/v1/comments",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"social-service",
										"api",
										"v1",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "005 - getFeedComments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json()[0];",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"\tpm.response.to.have.status(200);",
											"});",
											"",
											"let loggedid = pm.collectionVariables.get(\"loggedId\")",
											"",
											"let parentCommentId = jsonData.parentCommentId",
											"let comment = jsonData.comment",
											"let feedId = jsonData.feedId",
											"let authorId = jsonData.authorId",
											"let liked = jsonData.liked",
											"",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"006 - like\")",
											"",
											"pm.test(\"Test parentCommentId\", function () {",
											"\tpm.expect(parentCommentId).to.contain(\"main\");",
											"});",
											"",
											"pm.test(\"Test comment\", function () {",
											"\tpm.expect(comment).to.contain(\"testComment\");",
											"});",
											"",
											"pm.test(\"Test feedId\", function () {",
											"\tpm.expect(feedId).to.eql(feedId);",
											"});",
											"",
											"pm.test(\"Test authorId\", function () {",
											"\tpm.expect(authorId).to.eql(loggedid)",
											"});",
											"",
											"pm.test(\"Test liked\", function () {",
											"\tpm.expect(liked).to.false;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/social-service/api/v1/feeds/{{feedId}}/comments",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"social-service",
										"api",
										"v1",
										"feeds",
										"{{feedId}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "006 - like",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"\tpm.response.to.have.status(200);",
											"});",
											"",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"007 - getLikedFeed\")",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/social-service/api/v1/feeds/{{feedId}}/like",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"social-service",
										"api",
										"v1",
										"feeds",
										"{{feedId}}",
										"like"
									]
								}
							},
							"response": []
						},
						{
							"name": "007 - getLikedFeed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json()[0];",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"\tpm.response.to.have.status(200);",
											"});",
											"",
											"let loggedid = pm.collectionVariables.get(\"loggedId\")",
											"let f_name = pm.collectionVariables.get(\"fname\")",
											"let l_name = pm.collectionVariables.get(\"lname\")",
											"let mobil = pm.collectionVariables.get(\"registration_number\")",
											"",
											"",
											"let id = jsonData.id",
											"let firstname = jsonData.firstname",
											"let lastname = jsonData.lastname",
											"let mobile = jsonData.mobile",
											"",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"008 - unlike\")",
											"",
											"pm.test(\"Test id\", function () {",
											"\tpm.expect(id).to.eql(loggedid);",
											"});",
											"",
											"pm.test(\"Test firstname\", function () {",
											"\tpm.expect(firstname).to.contain(f_name);",
											"});",
											"",
											"pm.test(\"Test lastname\", function () {",
											"\tpm.expect(lastname).to.contain(l_name);",
											"});",
											"",
											"pm.test(\"Test mobile\", function () {",
											"\tpm.expect(mobile).to.contain(mobil);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/social-service/api/v1/feeds/{{feedId}}/like",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"social-service",
										"api",
										"v1",
										"feeds",
										"{{feedId}}",
										"like"
									]
								}
							},
							"response": []
						},
						{
							"name": "008 - unlike",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"\tpm.response.to.have.status(200);",
											"});",
											"",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"009 - getUnliked feed\")",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/social-service/api/v1/feeds/{{feedId}}/unlike",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"social-service",
										"api",
										"v1",
										"feeds",
										"{{feedId}}",
										"unlike"
									]
								}
							},
							"response": []
						},
						{
							"name": "009 - getUnliked feed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"\tpm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test jsonData\", function () {",
											"\tpm.expect(jsonData[0]).to.equals();",
											"});",
											"",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - createComment Empty\")",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/social-service/api/v1/feeds/{{feedId}}/like",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"social-service",
										"api",
										"v1",
										"feeds",
										"{{feedId}}",
										"like"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "002 - comment contrfoller",
					"item": [
						{
							"name": "001 - 001 - negative createComment",
							"item": [
								{
									"name": "001 - createComment Empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test trxCurrency\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"Validation failed for object='commentParam'. Error count: 3\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - createComment Empty Comment\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"comment\": \"\",\n  \"feedId\": \"\",\n  \"parentCommentId\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/comments",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "002 - createComment Empty Comment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test trxCurrency\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"Validation failed for object='commentParam'. Error count: 2\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - createComment Empty feedId\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"comment\": \"\",\n  \"feedId\": \"test\",\n  \"parentCommentId\": \"test\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/comments",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "003 - createComment Empty feedId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test trxCurrency\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"Validation failed for object='commentParam'. Error count: 1\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - createComment max\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"comment\": \"test\",\n  \"feedId\": \"\",\n  \"parentCommentId\": \"test\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/comments",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "004 - createComment max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test trxCurrency\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"Validation failed for object='commentParam'. Error count: 1\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"005 - getFeedComments\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"comment\": \"{{access_token}}\",\n  \"feedId\": \"{{access_token}}\",\n  \"parentCommentId\": \"{{access_token}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/comments",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "005 - createComment max comment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test trxCurrency\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"Validation failed for object='commentParam'. Error count: 1\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"006 - createComment max feedId\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"comment\": \"{{access_token}}\",\n  \"feedId\": \"test\",\n  \"parentCommentId\": \"test\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/comments",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "006 - createComment max feedId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"\tpm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Test trxCurrency\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"404 NOT_FOUND \\\"Feed not found\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"007 - createComment incorrect\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"comment\": \"test\",\n  \"feedId\": \"{{access_token}}\",\n  \"parentCommentId\": \"test\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/comments",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "007 - createComment incorrect",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"\tpm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Test trxCurrency\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"404 NOT_FOUND \\\"Feed not found\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"008 - createComment incorrect feedId\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"comment\": 1,\n  \"feedId\": 1,\n  \"parentCommentId\": 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/comments",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "008 - createComment incorrect feedId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"\tpm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Test trxCurrency\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"404 NOT_FOUND \\\"Feed not found\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"009 - createComment spaces\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"comment\": \"test\",\n  \"feedId\": 1,\n  \"parentCommentId\": \"main\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/comments",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "009 - createComment spaces",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test trxCurrency\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"Validation failed for object='commentParam'. Error count: 2\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"010 - createComment spaces comment\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"comment\": \"   \",\n  \"feedId\": \"   \",\n  \"parentCommentId\": \"   \"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/comments",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "010 - createComment spaces comment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test trxCurrency\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"Validation failed for object='commentParam'. Error count: 1\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"011 - createComment spaces feedId\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"comment\": \"   \",\n  \"feedId\": \"test\",\n  \"parentCommentId\": \"test\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/comments",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "011 - createComment spaces feedId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test trxCurrency\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"Validation failed for object='commentParam'. Error count: 1\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - findById\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"comment\": \"test\",\n  \"feedId\": \"   \",\n  \"parentCommentId\": \"test\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/comments",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"comments"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "001 - findById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"\tpm.response.to.have.status(200);",
											"});",
											"",
											"let loggedid = pm.collectionVariables.get(\"loggedId\")",
											"",
											"let parentCommentId = jsonData.parentCommentId",
											"let comment = jsonData.comment",
											"let feedId = jsonData.feedId",
											"let authorId = jsonData.authorId",
											"let liked = jsonData.liked",
											"",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - like\")",
											"",
											"pm.test(\"Test parentCommentId\", function () {",
											"\tpm.expect(parentCommentId).to.contain(\"main\");",
											"});",
											"",
											"pm.test(\"Test comment\", function () {",
											"\tpm.expect(comment).to.contain(\"testComment\");",
											"});",
											"",
											"pm.test(\"Test feedId\", function () {",
											"\tpm.expect(feedId).to.eql(feedId);",
											"});",
											"",
											"pm.test(\"Test authorId\", function () {",
											"\tpm.expect(authorId).to.eql(loggedid)",
											"});",
											"",
											"pm.test(\"Test liked\", function () {",
											"\tpm.expect(liked).to.false;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/social-service/api/v1/comments/{{commentId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"social-service",
										"api",
										"v1",
										"comments",
										"{{commentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "002 - like",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"\tpm.response.to.have.status(200);",
											"});",
											"",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - getLikedUsers\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/social-service/api/v1/comments/{{commentId}}/like",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"social-service",
										"api",
										"v1",
										"comments",
										"{{commentId}}",
										"like"
									]
								}
							},
							"response": []
						},
						{
							"name": "003 - getLikedUsers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json()[0];",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"\tpm.response.to.have.status(200);",
											"});",
											"",
											"let loggedid = pm.collectionVariables.get(\"loggedId\")",
											"let f_name = pm.collectionVariables.get(\"fname\")",
											"let l_name = pm.collectionVariables.get(\"lname\")",
											"let mobil = pm.collectionVariables.get(\"registration_number\")",
											"",
											"",
											"let id = jsonData.id",
											"let firstname = jsonData.firstname",
											"let lastname = jsonData.lastname",
											"let mobile = jsonData.mobile",
											"",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - getReplies\")",
											"",
											"pm.test(\"Test id\", function () {",
											"\tpm.expect(id).to.eql(loggedid);",
											"});",
											"",
											"pm.test(\"Test firstname\", function () {",
											"\tpm.expect(firstname).to.contain(f_name);",
											"});",
											"",
											"pm.test(\"Test lastname\", function () {",
											"\tpm.expect(lastname).to.contain(l_name);",
											"});",
											"",
											"pm.test(\"Test mobile\", function () {",
											"\tpm.expect(mobile).to.contain(mobil);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/social-service/api/v1/comments/{{commentId}}/like",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"social-service",
										"api",
										"v1",
										"comments",
										"{{commentId}}",
										"like"
									]
								}
							},
							"response": []
						},
						{
							"name": "004 - getReplies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"\tpm.response.to.have.status(200);",
											"});",
											"",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"005 - unlike\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/social-service/api/v1/comments/{{commentId}}/replies",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"social-service",
										"api",
										"v1",
										"comments",
										"{{commentId}}",
										"replies"
									]
								}
							},
							"response": []
						},
						{
							"name": "005 - unlike",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"\tpm.response.to.have.status(200);",
											"});",
											"",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"006 - getUnliked\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/social-service/api/v1/comments/{{commentId}}/unlike",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"social-service",
										"api",
										"v1",
										"comments",
										"{{commentId}}",
										"unlike"
									]
								}
							},
							"response": []
						},
						{
							"name": "006 - getUnliked",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"\tpm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test jsonData\", function () {",
											"\tpm.expect(jsonData[0]).to.equals();",
											"});",
											"",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - findGifs empty\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/social-service/api/v1/comments/{{commentId}}/like",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"social-service",
										"api",
										"v1",
										"comments",
										"{{commentId}}",
										"like"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "003 - gif controller",
					"item": [
						{
							"name": "003 - 001 gif controller negative",
							"item": [
								{
									"name": "001 - findGifs empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test jsonData\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"Required int parameter 'offset' is not present\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - findGifs empty limit\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/gifs/find?limit=&page=&query=",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"gifs",
												"find"
											],
											"query": [
												{
													"key": "limit",
													"value": ""
												},
												{
													"key": "page",
													"value": ""
												},
												{
													"key": "query",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "002 - findGifs empty limit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test jsonData\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"Required int parameter 'offset' is not present\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - findGifs empty page\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/gifs/find?limit=&page=1&query=1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"gifs",
												"find"
											],
											"query": [
												{
													"key": "limit",
													"value": ""
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "query",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "003 - findGifs empty page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test jsonData\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"Required int parameter 'offset' is not present\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - findGifs empty query\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/gifs/find?limit=1&page=&query=1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"gifs",
												"find"
											],
											"query": [
												{
													"key": "limit",
													"value": "1"
												},
												{
													"key": "page",
													"value": ""
												},
												{
													"key": "query",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "004 - findGifs empty query",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test jsonData\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"Required int parameter 'offset' is not present\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"005 - findGifs max\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/gifs/find?limit=1&page=1&query=",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"gifs",
												"find"
											],
											"query": [
												{
													"key": "limit",
													"value": "1"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "query",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "005 - findGifs max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 413\", function () {",
													"\tpm.response.to.have.status(413);",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"006 - findGifs max limit\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/gifs/find?limit={{access_token}}&page={{access_token}}&query={{access_token}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"gifs",
												"find"
											],
											"query": [
												{
													"key": "limit",
													"value": "{{access_token}}"
												},
												{
													"key": "page",
													"value": "{{access_token}}"
												},
												{
													"key": "query",
													"value": "{{access_token}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "006 - findGifs max limit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test jsonData\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"Required int parameter 'offset' is not present\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"007 - findGifs max page\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/gifs/find?limit={{access_token}}&page=1&query=1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"gifs",
												"find"
											],
											"query": [
												{
													"key": "limit",
													"value": "{{access_token}}"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "query",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "007 - findGifs max page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test jsonData\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"Required int parameter 'offset' is not present\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"008 - findGifs max query\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/gifs/find?limit=1&page={{access_token}}&query=1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"gifs",
												"find"
											],
											"query": [
												{
													"key": "limit",
													"value": "1"
												},
												{
													"key": "page",
													"value": "{{access_token}}"
												},
												{
													"key": "query",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "008 - findGifs max query",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test jsonData\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"Required int parameter 'offset' is not present\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"009 - findGifs incorrect format\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/gifs/find?limit=1&page=1&query={{access_token}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"gifs",
												"find"
											],
											"query": [
												{
													"key": "limit",
													"value": "1"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "query",
													"value": "{{access_token}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "009 - findGifs incorrect format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test jsonData\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"Required int parameter 'offset' is not present\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"010 - findGifs incorrect format limit\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/gifs/find?limit=test&page=test&query=ტესტი",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"gifs",
												"find"
											],
											"query": [
												{
													"key": "limit",
													"value": "test"
												},
												{
													"key": "page",
													"value": "test"
												},
												{
													"key": "query",
													"value": "ტესტი"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "010 - findGifs incorrect format limit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test jsonData\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"Required int parameter 'offset' is not present\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"011 - findGifs incorrect format page\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/gifs/find?limit=test&page=1&query=1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"gifs",
												"find"
											],
											"query": [
												{
													"key": "limit",
													"value": "test"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "query",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "011 - findGifs incorrect format page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test jsonData\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"Required int parameter 'offset' is not present\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"012 - findGifs incorrect format query\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/gifs/find?limit=1&page=test&query=1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"gifs",
												"find"
											],
											"query": [
												{
													"key": "limit",
													"value": "1"
												},
												{
													"key": "page",
													"value": "test"
												},
												{
													"key": "query",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "012 - findGifs incorrect format query",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test jsonData\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"Required int parameter 'offset' is not present\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"013 - findGifs spaces\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/gifs/find?limit=1&page=1&query=ტესტი",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"gifs",
												"find"
											],
											"query": [
												{
													"key": "limit",
													"value": "1"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "query",
													"value": "ტესტი"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "013 - findGifs spaces",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test jsonData\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"Required int parameter 'offset' is not present\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"014 - findGifs spaces limit\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/gifs/find?limit=   &page=   &query=   ",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"gifs",
												"find"
											],
											"query": [
												{
													"key": "limit",
													"value": "   "
												},
												{
													"key": "page",
													"value": "   "
												},
												{
													"key": "query",
													"value": "   "
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "014 - findGifs spaces limit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test jsonData\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"Required int parameter 'offset' is not present\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"015 - findGifs spaces page\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/gifs/find?limit=   &page=1&query=1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"gifs",
												"find"
											],
											"query": [
												{
													"key": "limit",
													"value": "   "
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "query",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "015 - findGifs spaces page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test jsonData\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"Required int parameter 'offset' is not present\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"016 - findGifs spaces query\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/gifs/find?limit=1&page=   &query=1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"gifs",
												"find"
											],
											"query": [
												{
													"key": "limit",
													"value": "1"
												},
												{
													"key": "page",
													"value": "   "
												},
												{
													"key": "query",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "016 - findGifs spaces query",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"\tpm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Test jsonData\", function () {",
													"\tpm.expect(jsonData.message).to.contain(\"Required int parameter 'offset' is not present\");",
													"});",
													"",
													"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - findGifs\")"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/social-service/api/v1/gifs/find?limit=1&page=1&query=   ",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"social-service",
												"api",
												"v1",
												"gifs",
												"find"
											],
											"query": [
												{
													"key": "limit",
													"value": "1"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "query",
													"value": "   "
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "001 - findGifs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json()[0];",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"\tpm.response.to.have.status(200);",
											"});",
											"",
											"let gifId = jsonData.gifId",
											"let gifImagePreview = jsonData.gifImagePreview",
											"",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"001 - findById\")",
											"",
											"pm.test(\"Test gifId\", function () {",
											"\tpm.expect(gifId).to.contain(\"13VLdHIQRb8zQc\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/social-service/api/v1/gifs/find?limit=1&offset=1&query=1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"social-service",
										"api",
										"v1",
										"gifs",
										"find"
									],
									"query": [
										{
											"key": "limit",
											"value": "1"
										},
										{
											"key": "offset",
											"value": "1"
										},
										{
											"key": "query",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "004 - users controller",
					"item": [
						{
							"name": "001 - findById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"\tpm.response.to.have.status(200);",
											"});",
											"",
											"let loggedid = pm.collectionVariables.get(\"loggedId\")",
											"let f_name = pm.collectionVariables.get(\"fname\")",
											"let l_name = pm.collectionVariables.get(\"lname\")",
											"let mobil = pm.collectionVariables.get(\"registration_number\")",
											"",
											"let id = jsonData.id",
											"let firstname = jsonData.firstname",
											"let lastname = jsonData.lastname",
											"let mobile = jsonData.mobile",
											"",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"002 - getUserFeeds\")",
											"",
											"pm.test(\"Test id\", function () {",
											"\tpm.expect(id).to.eql(loggedid);",
											"});",
											"",
											"pm.test(\"Test firstname\", function () {",
											"\tpm.expect(firstname).to.contain(f_name);",
											"});",
											"",
											"pm.test(\"Test lastname\", function () {",
											"\tpm.expect(lastname).to.contain(l_name);",
											"});",
											"",
											"pm.test(\"Test mobile\", function () {",
											"\tpm.expect(mobile).to.contain(mobil);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/social-service/api/v1/users/{{loggedId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"social-service",
										"api",
										"v1",
										"users",
										"{{loggedId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "002 - getUserFeeds",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json()[0];",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"\tpm.response.to.have.status(200);",
											"});",
											"",
											"let loggedid = pm.collectionVariables.get(\"loggedId\")",
											"let feedid = pm.collectionVariables.get(\"feedId\")",
											"let receiveruserid = pm.collectionVariables.get(\"receiverUserId\")",
											"",
											"",
											"let trxAmount = jsonData.trxAmount",
											"let trxCurrency = jsonData.trxCurrency",
											"let feedId = jsonData.id",
											"let senderUserId = jsonData.senderUserId",
											"let receiverUserId = jsonData.receiverUserId",
											"let likesCount = jsonData.likesCount",
											"let commentsCount = jsonData.commentsCount",
											"let liked = jsonData.liked",
											"",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"003 - Follow\")",
											"",
											"pm.test(\"Test trxAmount\", function () {",
											"\tpm.expect(trxAmount).to.eql(5.0);",
											"});",
											"",
											"pm.test(\"Test trxCurrency\", function () {",
											"\tpm.expect(trxCurrency).to.contain(\"EUR\");",
											"});",
											"",
											"pm.test(\"Test feedId\", function () {",
											"\tpm.expect(feedId).to.eql(feedid);",
											"});",
											"",
											"pm.test(\"Test senderUserId\", function () {",
											"\tpm.expect(senderUserId).to.eql(loggedid)",
											"});",
											"",
											"pm.test(\"Test liked\", function () {",
											"\tpm.expect(liked).to.false;",
											"});",
											"",
											"pm.test(\"Test likesCount\", function () {",
											"\tpm.expect(likesCount).to.eql(0);",
											"});",
											"",
											"pm.test(\"Test receiverUserId\", function () {",
											"\tpm.expect(receiverUserId).to.eql(receiveruserid);",
											"});",
											"",
											"pm.test(\"Test commentsCount\", function () {",
											"\tpm.expect(commentsCount).to.eql(1)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/social-service/api/v1/users/{{loggedId}}/feeds",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"social-service",
										"api",
										"v1",
										"users",
										"{{loggedId}}",
										"feeds"
									]
								}
							},
							"response": []
						},
						{
							"name": "003 - Follow",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"\tpm.response.to.have.status(200);",
											"});",
											"",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"004 - Followers\")",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/social-service/api/v1/users/{{receiverUserId}}/follow",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"social-service",
										"api",
										"v1",
										"users",
										"{{receiverUserId}}",
										"follow"
									]
								}
							},
							"response": []
						},
						{
							"name": "004 - Followers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"var lastElement = Object.keys(responseJson).length;",
											"",
											"let jsonData = pm.response.json()[lastElement-1];",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"\tpm.response.to.have.status(200);",
											"});",
											"",
											"let loggedid = pm.collectionVariables.get(\"loggedId\")",
											"let f_name = pm.collectionVariables.get(\"fname\")",
											"let l_name = pm.collectionVariables.get(\"lname\")",
											"let mobil = pm.collectionVariables.get(\"registration_number\")",
											"",
											"let id = jsonData.id",
											"let firstname = jsonData.firstname",
											"let lastname = jsonData.lastname",
											"let mobile = jsonData.mobile",
											"",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"005 - followings\")",
											"",
											"pm.test(\"Test id\", function () {",
											"\tpm.expect(id).to.eql(loggedid);",
											"});",
											"",
											"pm.test(\"Test firstname\", function () {",
											"\tpm.expect(firstname).to.contain(f_name);",
											"});",
											"",
											"pm.test(\"Test lastname\", function () {",
											"\tpm.expect(lastname).to.contain(l_name);",
											"});",
											"",
											"pm.test(\"Test mobile\", function () {",
											"\tpm.expect(mobile).to.contain(mobil);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/social-service/api/v1/users/{{receiverUserId}}/followers",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"social-service",
										"api",
										"v1",
										"users",
										"{{receiverUserId}}",
										"followers"
									]
								}
							},
							"response": []
						},
						{
							"name": "005 - followings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json()[0];",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"\tpm.response.to.have.status(200);",
											"});",
											"",
											"let receiveruserid = pm.collectionVariables.get(\"receiverUserId\")",
											"",
											"let id = jsonData.id",
											"let firstname = jsonData.firstname",
											"let lastname = jsonData.lastname",
											"let mobile = jsonData.mobile",
											"",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"006 - findFriends\")",
											"",
											"pm.test(\"Test id\", function () {",
											"\tpm.expect(id).to.eql(receiveruserid);",
											"});",
											"",
											"pm.test(\"Test firstname\", function () {",
											"\tpm.expect(firstname).to.contain(\"Beka\");",
											"});",
											"",
											"pm.test(\"Test lastname\", function () {",
											"\tpm.expect(lastname).to.contain(\"Batmanashvili\");",
											"});",
											"",
											"pm.test(\"Test mobile\", function () {",
											"\tpm.expect(mobile).to.contain(\"995551121165\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/social-service/api/v1/users/{{loggedId}}/followings",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"social-service",
										"api",
										"v1",
										"users",
										"{{loggedId}}",
										"followings"
									]
								}
							},
							"response": []
						},
						{
							"name": "006 - findFriends",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"\tpm.response.to.have.status(200);",
											"});",
											"",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"007 - unfollows\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/social-service/api/v1/users/{{loggedId}}/friends",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"social-service",
										"api",
										"v1",
										"users",
										"{{loggedId}}",
										"friends"
									]
								}
							},
							"response": []
						},
						{
							"name": "007 - unfollows",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"\tpm.response.to.have.status(200);",
											"});",
											"",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"008 - after unfollow\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/social-service/api/v1/users/{{receiverUserId}}/unfollow",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"social-service",
										"api",
										"v1",
										"users",
										"{{receiverUserId}}",
										"unfollow"
									]
								}
							},
							"response": []
						},
						{
							"name": "008 - after unfollow",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"\tpm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test jsonData\", function () {",
											"\tpm.expect(jsonData[0]).to.equals();",
											"});",
											"",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"009 - updateContacts\")",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/social-service/api/v1/users/{{loggedId}}/followings",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"social-service",
										"api",
										"v1",
										"users",
										"{{loggedId}}",
										"followings"
									]
								}
							},
							"response": []
						},
						{
							"name": "009 - updateContacts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"\tpm.response.to.have.status(200);",
											"});",
											"",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"log out\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"contacts\": [\n    \"string\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/social-service/api/v1/users/contacts",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"social-service",
										"api",
										"v1",
										"users",
										"contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "log out",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"\tpm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"log out after log out\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/profile/logout/{{sessionId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"profile",
										"logout",
										"{{sessionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "log out after log out",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"\tpm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"NOT_FOUND\", () => {\r",
											"\tpm.expect(jsonData.message).to.contains(\"404 NOT_FOUND \\\"Session with id\")\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"next_request_after_verify_sms\", \"verify sms expiredPhoneNumber\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/profile/logout/{{sessionId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"profile",
										"logout",
										"{{sessionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "verify sms expiredPhoneNumber",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 410\", function () {",
											"\tpm.response.to.have.status(410);",
											"});",
											"",
											"pm.test(\"Error message must contain text: \\\"410 GONE \\\"\", () => {",
											"\tpm.expect(jsonData.message).to.contains(\"expired\")",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"123456\",\n  \"countryCode\": \"996\",\n  \"phone\": \"{{registration_number}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/common-service/api/v1/auth/verify-sms",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"common-service",
										"api",
										"v1",
										"auth",
										"verify-sms"
									]
								},
								"description": "## Verify SMS\n\n### Purpose\n\nThis request is used to verify sent OTP and generate `SMSID`.\n\n### Parameters\n\n`verify-sms` request requires three parameters to pass:\n\n1. `code` - OTP code sent via `send-sms` request.\n2. `countryCode` - for what country it was sent. For us, it is `996`.\n3. `phone` - for what number OTP was generated for. The value of this parameter is from the collection variables.\n\n### Tests\n\nAfter the response is received\n\n-  `smsID` is set at collection variables.\n- The length of returned smsid is checked.\n- The next request is set from collection variables."
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "notification-service",
			"item": [
				{
					"name": "001 - notification controller",
					"item": [
						{
							"name": "markAsRead",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{base_url}}/notification-service/api/v1/notification/read/225",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"notification-service",
										"api",
										"v1",
										"notification",
										"read",
										"225"
									]
								}
							},
							"response": []
						},
						{
							"name": "findByUserId",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/notification-service/api/v1/notification?limit=1&page=1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"notification-service",
										"api",
										"v1",
										"notification"
									],
									"query": [
										{
											"key": "limit",
											"value": "1"
										},
										{
											"key": "page",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getUnreadNotifications",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/notification-service/api/v1/notification/unread?limit=1&page=1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"notification-service",
										"api",
										"v1",
										"notification",
										"unread"
									],
									"query": [
										{
											"key": "limit",
											"value": "1"
										},
										{
											"key": "page",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getUnreadCount",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/notification-service/api/v1/notification/unread/count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"notification-service",
										"api",
										"v1",
										"notification",
										"unread",
										"count"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "payment-service",
			"item": [
				{
					"name": "001 - balance controller",
					"item": [
						{
							"name": "setSweeftBalance",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"currenciesIds\": [\n    0\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/payment-service/api/v1/balance",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"payment-service",
										"api",
										"v1",
										"balance"
									]
								}
							},
							"response": []
						},
						{
							"name": "deleteBalance",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/payment-service/api/v1/balance/5",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"payment-service",
										"api",
										"v1",
										"balance",
										"5"
									]
								}
							},
							"response": []
						},
						{
							"name": "setMainBalance",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{base_url}}/payment-service/api/v1/balance/main",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"payment-service",
										"api",
										"v1",
										"balance",
										"main"
									]
								}
							},
							"response": []
						},
						{
							"name": "addBalance",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"amount\": 0,\n  \"balanceId\": 0\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/payment-service/api/v1/balance/set-balance-test",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"payment-service",
										"api",
										"v1",
										"balance",
										"set-balance-test"
									]
								}
							},
							"response": []
						},
						{
							"name": "transferToBalance",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"amount\": 0,\n  \"fromBalanceId\": 0,\n  \"toBalanceId\": 0\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/payment-service/api/v1/balance/transfer",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"payment-service",
										"api",
										"v1",
										"balance",
										"transfer"
									]
								}
							},
							"response": []
						},
						{
							"name": "getBalances",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/payment-service/api/v1/balance/user/5",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"payment-service",
										"api",
										"v1",
										"balance",
										"user",
										"5"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "002 - country controller",
					"item": [
						{
							"name": "getCountries",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/payment-service/api/v1/country?name=geo",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"payment-service",
										"api",
										"v1",
										"country"
									],
									"query": [
										{
											"key": "name",
											"value": "geo"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "003 - currency controller",
					"item": [
						{
							"name": "getCurrencies",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"countryIds\": [\n    0\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/payment-service/api/v1/currencies",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"payment-service",
										"api",
										"v1",
										"currencies"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "004 - test controller",
					"item": [
						{
							"name": "createCountry",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/payment-service/api/v1/test/country",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"payment-service",
										"api",
										"v1",
										"test",
										"country"
									]
								}
							},
							"response": []
						},
						{
							"name": "createCurrency",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/payment-service/api/v1/test/currency",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"payment-service",
										"api",
										"v1",
										"test",
										"currency"
									]
								}
							},
							"response": []
						},
						{
							"name": "bindCurrencyCountry",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"countryCurrency\": {\n    \"additionalProp1\": [\n      0\n    ],\n    \"additionalProp2\": [\n      0\n    ],\n    \"additionalProp3\": [\n      0\n    ]\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/payment-service/api/v1/test/currency-country",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"payment-service",
										"api",
										"v1",
										"test",
										"currency-country"
									]
								}
							},
							"response": []
						},
						{
							"name": "createSweeftBank",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/payment-service/api/v1/test/sweeft-bank",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"payment-service",
										"api",
										"v1",
										"test",
										"sweeft-bank"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "005 - transaction controller",
					"item": [
						{
							"name": "getTransactions",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/payment-service/api/v1/transaction",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"payment-service",
										"api",
										"v1",
										"transaction"
									]
								}
							},
							"response": []
						},
						{
							"name": "sendMoney",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"acceptConvert\": true,\n  \"amount\": 0,\n  \"convertToBalanceId\": 0,\n  \"fromBalanceId\": 0,\n  \"gifImage\": \"string\",\n  \"privacy\": \"FRIEND\",\n  \"text\": \"string\",\n  \"toUserId\": 0,\n  \"type\": \"REQUEST\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/payment-service/api/v1/transaction",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"payment-service",
										"api",
										"v1",
										"transaction"
									]
								}
							},
							"response": []
						},
						{
							"name": "getTransaction",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"acceptConvert\": true,\n  \"amount\": 0,\n  \"convertToBalanceId\": 0,\n  \"fromBalanceId\": 0,\n  \"gifImage\": \"string\",\n  \"privacy\": \"FRIEND\",\n  \"text\": \"string\",\n  \"toUserId\": 0,\n  \"type\": \"REQUEST\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/payment-service/api/v1/transaction/5",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"payment-service",
										"api",
										"v1",
										"transaction",
										"5"
									]
								}
							},
							"response": []
						},
						{
							"name": "acceptMoneyRequest",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/payment-service/api/v1/transaction/5/accept",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"payment-service",
										"api",
										"v1",
										"transaction",
										"5",
										"accept"
									]
								}
							},
							"response": []
						},
						{
							"name": "rejectMoneyRequest",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/payment-service/api/v1/transaction/5/reject",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"payment-service",
										"api",
										"v1",
										"transaction",
										"5",
										"reject"
									]
								}
							},
							"response": []
						},
						{
							"name": "filterTransactions",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"amountBefore\": 0,\n  \"amountFrom\": 0,\n  \"answerTimeBefore\": \"2022-02-07T18:16:56.369Z\",\n  \"answerTimeFrom\": \"2022-02-07T18:16:56.369Z\",\n  \"fromBalances\": [\n    0\n  ],\n  \"fromBankAccounts\": [\n    0\n  ],\n  \"fromUserIds\": [\n    0\n  ],\n  \"fromUserPrivacies\": [\n    \"FRIEND\"\n  ],\n  \"ids\": [\n    0\n  ],\n  \"sendTimeBefore\": \"2022-02-07T18:16:56.369Z\",\n  \"sendTimeFrom\": \"2022-02-07T18:16:56.369Z\",\n  \"statuses\": [\n    \"ACCEPTED\"\n  ],\n  \"toBalances\": [\n    0\n  ],\n  \"toBankAccounts\": [\n    0\n  ],\n  \"toUserIds\": [\n    0\n  ],\n  \"toUserPrivacies\": [\n    \"FRIEND\"\n  ],\n  \"types\": [\n    \"REQUEST\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/payment-service/api/v1/transaction/filter",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"payment-service",
										"api",
										"v1",
										"transaction",
										"filter"
									]
								}
							},
							"response": []
						},
						{
							"name": "getNotAnsweredTransactions",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/payment-service/api/v1/transaction/requests",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"payment-service",
										"api",
										"v1",
										"transaction",
										"requests"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is [200, 201, 202, 204, 205, 400, 401, 404, 406, 206, 409,410, 413, 415,428]\", function () {",
					"\tpm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204, 205, 206, 400, 401, 404, 406, 409,410, 413, 415,428])",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://wallet-dev.sweeftdigital.com:8888"
		},
		{
			"key": "smsID",
			"value": ""
		},
		{
			"key": "access_token",
			"value": ""
		},
		{
			"key": "refresh_token",
			"value": ""
		},
		{
			"key": "fname",
			"value": ""
		},
		{
			"key": "registration_number",
			"value": ""
		},
		{
			"key": "lname",
			"value": ""
		},
		{
			"key": "send_sms_type",
			"value": "REGISTRATION"
		},
		{
			"key": "generate_new_user",
			"value": "true"
		},
		{
			"key": "next_request",
			"value": ""
		},
		{
			"key": "next_request_after_verify_sms",
			"value": ""
		},
		{
			"key": "personalID",
			"value": ""
		},
		{
			"key": "birthDate",
			"value": ""
		},
		{
			"key": "updatedRegNumber",
			"value": ""
		},
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "emailName",
			"value": ""
		},
		{
			"key": "mailVerificationCode",
			"value": ""
		},
		{
			"key": "categoryName",
			"value": ""
		},
		{
			"key": "categoryid",
			"value": ""
		},
		{
			"key": "merchantName",
			"value": ""
		},
		{
			"key": "resetedPassword",
			"value": ""
		},
		{
			"key": "password",
			"value": ""
		},
		{
			"key": "merchantDataId",
			"value": ""
		},
		{
			"key": "branchName",
			"value": ""
		},
		{
			"key": "branchDataId",
			"value": ""
		},
		{
			"key": "cashback",
			"value": ""
		},
		{
			"key": "updatedCashBack",
			"value": ""
		},
		{
			"key": "updatedbranchName",
			"value": ""
		},
		{
			"key": "updatedMerchantName",
			"value": ""
		},
		{
			"key": "latitude",
			"value": ""
		},
		{
			"key": "longitude",
			"value": ""
		},
		{
			"key": "address",
			"value": ""
		},
		{
			"key": "loggedId",
			"value": ""
		},
		{
			"key": "sessionId",
			"value": ""
		},
		{
			"key": "maxNumber",
			"value": ""
		},
		{
			"key": "feedId",
			"value": ""
		},
		{
			"key": "commentId",
			"value": ""
		},
		{
			"key": "receiverUserId",
			"value": ""
		}
	]
}